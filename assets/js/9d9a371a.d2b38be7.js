"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[5147],{3233:(e,t,s)=>{s.d(t,{ZP:()=>r});var n=s(5893),i=s(1151);function a(e){const t={a:"a",code:"code",p:"p",pre:"pre",...(0,i.a)(),...e.components},{Details:s}=t;return s||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:"Following the previous step of this tutorial, you should now\nhave a deployment of both Kratix and MinIO running on your platform cluster\nwith no installed Promises."}),"\n",(0,n.jsxs)(t.p,{children:["You should also have two environment variables, ",(0,n.jsx)(t.code,{children:"PLATFORM"})," and ",(0,n.jsx)(t.code,{children:"WORKER"}),"."]}),"\n",(0,n.jsxs)(s,{children:[(0,n.jsx)("summary",{children:"Verify the current state of your installation"}),(0,n.jsx)(t.p,{children:"Run:"}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"kubectl --context $PLATFORM get deployments --namespace kratix-platform-system\n"})}),(0,n.jsx)(t.p,{children:"The above command will give an output similar to:"}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-shell-session",children:"NAME                                 READY   UP-TO-DATE   AVAILABLE   AGE\nkratix-platform-controller-manager   1/1     1            1           1h\nminio                                1/1     1            1           1h\n"})}),(0,n.jsxs)(t.p,{children:["You should also have a State Store created and configured to point to the\n",(0,n.jsx)(t.code,{children:"kratix"})," bucket on MinIO. Verify the ",(0,n.jsx)(t.code,{children:"bucketstatestores"}),":"]}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"kubectl --context $PLATFORM get bucketstatestores.platform.kratix.io\n"})}),(0,n.jsx)(t.p,{children:"The above command will give an output similar to:"}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-shell-session",children:"NAME        AGE\ndefault     1h\n"})}),(0,n.jsx)(t.p,{children:"Verify there are no existing Promises:"}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"kubectl --context $PLATFORM get promises\n"})}),(0,n.jsx)(t.p,{children:"Verify your cluster environment variables are set:"}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"env | grep 'PLATFORM\\|WORKER'\n"})}),(0,n.jsx)(t.p,{children:"which should result in:"}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-shell-session",children:"WORKER=kind-worker\nPLATFORM=kind-platform\n"})})]}),"\n",(0,n.jsxs)(t.p,{children:["If you are are not continuing from the previous section, or your outputs do not align with the validation, please refer back to\n",(0,n.jsx)(t.a,{href:"installing-kratix",children:"Installing Kratix"}),"."]})]})}function r(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}},5747:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var n=s(5893),i=s(1151);s(3233);const a={description:"Updating the Resource status",title:"Updating the Resource status",id:"updating-status",slug:"../updating-status"},r=void 0,o={id:"workshop/part-ii/updating-status",title:"Updating the Resource status",description:"Updating the Resource status",source:"@site/docs/workshop/part-ii/05-updating-status.md",sourceDirName:"workshop/part-ii",slug:"/workshop/updating-status",permalink:"/workshop/updating-status",draft:!1,unlisted:!1,editUrl:"https://github.com/syntasso/kratix-docs/tree/main/docs/workshop/part-ii/05-updating-status.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{description:"Updating the Resource status",title:"Updating the Resource status",id:"updating-status",slug:"../updating-status"},sidebar:"workshopSidebar",previous:{title:"Scheduling Promises",permalink:"/workshop/scheduling-promise"},next:{title:"What's next?",permalink:"/workshop/whats-next"}},l={},c=[{value:"Conveying information back to the application developers",id:"understand-metadata",level:2},{value:"Status",id:"status",level:2},{value:"Picking a status for your ECK Promise",id:"picking-a-status-for-your-eck-promise",level:3},{value:"Request a resource and check its status",id:"request-a-resource-and-check-its-status",level:2},{value:"The conditions field",id:"the-conditions-field",level:3},{value:"Summary",id:"summary",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components},{Details:s}=t;return s||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["This is Part 2 of ",(0,n.jsx)(t.a,{href:"intro",children:"a series"})," illustrating how Kratix works. ",(0,n.jsx)("br",{}),"\n\ud83d\udc48\ud83c\udffe\xa0\xa0 Previous: ",(0,n.jsx)(t.a,{href:"scheduling-promise",children:"Intentionally schedule Promise resources"}),")",(0,n.jsx)("br",{}),"\n\ud83d\udc49\ud83c\udffe\xa0\xa0 Next: ",(0,n.jsx)(t.a,{href:"whats-next",children:"What's next"})]}),"\n",(0,n.jsx)("hr",{}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"In this tutorial, you will"})}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"#understand-metadata",children:"Conveying information back to the application developers"})}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.a,{href:"#status",children:"Status"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"#picking-a-status-for-your-eck-promise",children:"Picking a status for your ECK Promise"})}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"#request-a-resource-and-check-its-status",children:"Request a resource and check its status"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"#summary",children:"Summary"})}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"understand-metadata",children:"Conveying information back to the application developers"}),"\n",(0,n.jsx)(t.p,{children:"What we've focused on so far is how to define a Kratix Promise in a compelling way so that platform users choose to use the platform. A Kratix-powered platform enables users to ask for the services they need, on-demand, without having to know unnecessary business and service lifecycle requirements."}),"\n",(0,n.jsx)(t.p,{children:"What platform users need, though, is the end-to-end experience of making a simple request, understanding what's happening with the request, then ultimately making use of the service created by the request. So how do you communicate back to platform users information about their request, and how do users use the services that the platform creates?"}),"\n",(0,n.jsx)(t.p,{children:"There are actually a number of ways you can communicate the status of a service to the platform, and the choice comes down to the Promise and Promise Workflow author."}),"\n",(0,n.jsx)(t.p,{children:"One approach is to generate notifications for internal systems like Slack or Teams from the Promise Workflow's Pipeline container."}),"\n",(0,n.jsxs)(t.p,{children:["Another approach, which is what we'll choose today, is to follow convention and leverage the ",(0,n.jsx)(t.code,{children:"status"})," field on Kubernetes resources. The Kratix Workflow's Pipeline has the ability to write information back to the status of the Resource."]}),"\n",(0,n.jsx)(t.p,{children:"In the context of your Promise, an example of what you might want to convey back is the configuration of the Resource (e.g. default configuration), and how to access the running Resources (e.g. a URL or connection string)."}),"\n",(0,n.jsx)(t.h2,{id:"status",children:"Status"}),"\n",(0,n.jsxs)(t.p,{children:["As we saw in ",(0,n.jsx)(t.a,{href:"/workshop/scheduling-promise",children:"scheduling"}),", within the Pipeline container file system, Kratix mounts a ",(0,n.jsx)(t.a,{href:"../main/reference/resources/workflows#metadata",children:(0,n.jsx)(t.code,{children:"/kratix/metadata"})})," directory to manage important configuration that is independent of the Resources definitions for your State Store."]}),"\n",(0,n.jsxs)(t.p,{children:["Similar to writing destination selector rules to ",(0,n.jsx)(t.code,{children:"/kratix/metadata/destination-selectors.yaml"}),", you will write changes to the Resource status to the ",(0,n.jsx)(t.code,{children:"/kratix/metadata/status.yaml"})," file."]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["The ",(0,n.jsx)(t.code,{children:"status.yaml"})," file can contain arbitrary key values, with the ",(0,n.jsx)(t.code,{children:"message"})," key being a special key that is communicated back to the user when running ",(0,n.jsx)(t.code,{children:"kubectl get elastic-cloud"}),"."]}),"\n",(0,n.jsx)(t.li,{children:"All other key-value pairs are viewable by getting the full Resource definition."}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"picking-a-status-for-your-eck-promise",children:"Picking a status for your ECK Promise"}),"\n",(0,n.jsx)(t.p,{children:"You want to achieve two things with the ECK Promise Resource status:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["The Promise provides an option to pre-configure Beats with modules. Broadcast the existence of these modules as part of the ",(0,n.jsx)(t.code,{children:"message"})," field."]}),"\n",(0,n.jsxs)(t.li,{children:["You are providing Kibana as a user interface, and your users need a way to access the Kibana UI. Provide the initial username and password as additional ",(0,n.jsx)(t.code,{children:"status"})," values."]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["Update the ",(0,n.jsx)(t.code,{children:"pipeline/run"})," script:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",metastring:"title=pipeline/run -- add to the end",children:'cat <<EOF > /kratix/metadata/status.yaml\nmessage: "Instance ${name} provisioned with preconfigured system metrics"\ninitialLoginDetails:\n    username: "elastic"\n    passwordSecretName: "${name}-es-elastic-user"\nEOF\n'})}),"\n",(0,n.jsx)(t.h2,{id:"request-a-resource-and-check-its-status",children:"Request a resource and check its status"}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"run"})," script is included in the Pipeline's container image, so to have these destination selector changes take effect, you need to rebuild and re-load the Docker image."]}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"test-pipeline"})," script builds, loads, and runs the Docker image."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"./scripts/test-pipeline\n"})}),"\n",(0,n.jsx)(t.p,{children:"Verify that the test output directory contains the correct status:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-shell-session",children:"\ud83d\udcc2 test\n\u251c\u2500\u2500 input\n\u2502   \u2514\u2500\u2500 object.yaml\n\u251c\u2500\u2500 metadata\n\u2502   \u2514\u2500\u2500 destination-selectors.yaml\n#highlight-next-line\n    \u2514\u2500\u2500 status.yaml\n\u2514\u2500\u2500 output\n    \u251c\u2500\u2500 beats.yaml\n    \u251c\u2500\u2500 elasticsearch.yaml\n    \u2514\u2500\u2500 kibana.yaml\n"})}),"\n",(0,n.jsx)(t.p,{children:"Next, install the Promise:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"kubectl --context $PLATFORM create --filename promise.yaml\n"})}),"\n",(0,n.jsx)(t.p,{children:"And finally, put on the Application Developer hat and make a request for a Elastic Cloud Resource:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"kubectl --context $PLATFORM apply --filename resource-request.yaml\n"})}),"\n",(0,n.jsxs)(t.p,{children:["The status of the request for the Resource will start as ",(0,n.jsx)(t.code,{children:"pending"}),", which is the Kratix default before a Workflow runs. Once the Workflow has completed, the status will be updated."]}),"\n",(0,n.jsx)(t.p,{children:"Check the status of the Resource:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"kubectl --context $PLATFORM get elastic-clouds\n"})}),"\n",(0,n.jsx)(t.p,{children:"The above command will return something close to the following:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"NAME      STATUS\nexample   Instance example provisioned with preconfigured system metrics\n"})}),"\n",(0,n.jsxs)(t.p,{children:["As you can see, the ",(0,n.jsx)(t.code,{children:"message"})," field appears in the output. To see the other keys, get the full ",(0,n.jsx)(t.code,{children:"status"})," value from Kubernetes:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"kubectl --context $PLATFORM get elastic-clouds example -o yaml | yq .status\n"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:'conditions:\n  - lastTransitionTime: "2023-01-01T12:00:00Z"\n    message: Pipeline completed\n    reason: PipelineExecutedSuccessfully\n    status: "True"\n    type: PipelineCompleted\nmessage: Instance example provisioned with preconfigured system metrics\ninitialLoginDetails:\n    username: elastic\n    passwordSecretName: example-es-elastic-user\n'})}),"\n",(0,n.jsxs)(s,{children:[(0,n.jsx)("summary",{children:"\ud83e\udd14 Curious about the conditions fields?"}),(0,n.jsx)(t.h3,{id:"the-conditions-field",children:"The conditions field"}),(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.a,{href:"https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#typical-status-properties",children:"Conditions"})," are a core Kubernetes concept and standard to convey information about a resources status. For example, Pods report back various conditions:"]}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'- lastProbeTime: null\n  lastTransitionTime: "2023-06-20T15:02:20Z"\n  status: "True"\n  type: Ready\n- lastProbeTime: null\n  lastTransitionTime: "2023-06-20T15:02:20Z"\n  status: "True"\n  type: ContainersReady\n- lastProbeTime: null\n  lastTransitionTime: "2023-06-20T15:00:49Z"\n  status: "True"\n  type: PodScheduled\n\n'})}),(0,n.jsx)(t.p,{children:"Conditions are also powerful for enabling you to wait for an occurrence. For example, you can wait for the health of a pod by running something like this:"}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"kubectl --context $PLATFORM \\\n    wait pods \\\n    --namespace kratix-platform-system \\\n    --selector control-plane=controller-manager \\\n    --for condition=Ready \\\n    --timeout=90s\n"})}),(0,n.jsxs)(t.p,{children:["This same logic can be applied to Resources. Kratix sets the ",(0,n.jsx)(t.code,{children:"PipelineCompleted"})," condition. For example, a user (or CI/Automation) could wait for a request to finish by running:"]}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"kubectl --context $PLATFORM wait elastic-cloud/example \\\n  --for=condition=PipelineCompleted --timeout=60s\n"})}),(0,n.jsx)(t.p,{children:"Kratix supports this by default for all Resources."})]}),"\n",(0,n.jsx)(t.h2,{id:"summary",children:"Summary"}),"\n",(0,n.jsx)(t.p,{children:"To recap what you achieved:"}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsx)(t.li,{children:"\u2705\xa0\xa0 Use metadata to set a custom Resource status"}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["\u2705\xa0\xa0This tutorial concludes an Introduction to writing a Promise. ",(0,n.jsx)("br",{}),"\n\ud83d\udc49\ud83c\udffe\xa0\xa0You can go check ",(0,n.jsx)(t.a,{href:"whats-next",children:"what's next"})," to learn about\nwhat else you can achieve with Kratix."]})]})}function h(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},1151:(e,t,s)=>{s.d(t,{Z:()=>o,a:()=>r});var n=s(7294);const i={},a=n.createContext(i);function r(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);