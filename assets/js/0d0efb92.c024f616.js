"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[9550],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),f=i,d=u["".concat(s,".").concat(f)]||u[f]||m[f]||o;return n?r.createElement(d,a(a({ref:t},c),{},{components:n})):r.createElement(d,a({ref:t},c))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:i,a[1]=l;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},8457:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(7462),i=(n(7294),n(3905));const o={description:"Documentation for writing Promise Workflows using Kratix Pipelines, covering how Kratix internally executes the Pipeline containers",title:"Promise Workflows",sidebar_label:"Workflows"},a="Workflows",l={unversionedId:"main/reference/promises/workflows",id:"main/reference/promises/workflows",title:"Promise Workflows",description:"Documentation for writing Promise Workflows using Kratix Pipelines, covering how Kratix internally executes the Pipeline containers",source:"@site/docs/main/05-reference/03-promises/04-workflows.md",sourceDirName:"main/05-reference/03-promises",slug:"/main/reference/promises/workflows",permalink:"/docs/main/reference/promises/workflows",draft:!1,editUrl:"https://github.com/syntasso/kratix-docs/tree/main/docs/main/05-reference/03-promises/04-workflows.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{description:"Documentation for writing Promise Workflows using Kratix Pipelines, covering how Kratix internally executes the Pipeline containers",title:"Promise Workflows",sidebar_label:"Workflows"},sidebar:"mainSidebar",previous:{title:"Updates",permalink:"/docs/main/reference/promises/updates"},next:{title:"Introduction",permalink:"/docs/main/reference/resources/intro"}},s={},p=[{value:"Kratix Pipelines",id:"kratix-pipelines",level:2},{value:"<code>/kratix/input</code>",id:"kratixinput",level:3},{value:"<code>/kratix/output</code>",id:"kratixoutput",level:3},{value:"Running Workflows",id:"running-workflows",level:2},{value:"Passing secrets to the Pipeline",id:"passing-secrets-to-the-pipeline",level:2}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"workflows"},"Workflows"),(0,i.kt)("p",null,"A ",(0,i.kt)("a",{parentName:"p",href:"../promises/intro"},"Kratix Promise")," is configured with a series of Workflows\ndefined in the Promise's ",(0,i.kt)("inlineCode",{parentName:"p"},"workflows")," key. Within the Workflows, Promise writers\ncan trigger a series of actions (pipelines) that must be executed when certain\nconditions are met in the system. The ",(0,i.kt)("inlineCode",{parentName:"p"},"workflows")," is defined as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"platform: platform.kratix.io/v1alpha1\nkind: Promise\nmetadata:\n  # ...\nspec:\n  # ...\n  workflows:\n    # lifecycle hook for Promise\n    promise:\n      # lifecycle hook for creates/updates/ongoing reconciliation of the Promise\n      configure:\n        -  # Pipeline definition\n")),(0,i.kt)("p",null,"To define a Workflow, promise writers can use any technology they want (i.e.\nTekton, plain Pods, etc). Kratix provide a basic ",(0,i.kt)("inlineCode",{parentName:"p"},"kind")," to make the process of writing Workflows simpler."),(0,i.kt)("h2",{id:"kratix-pipelines"},"Kratix Pipelines"),(0,i.kt)("p",null,"Kratix ",(0,i.kt)("inlineCode",{parentName:"p"},"Pipeline")," is defined as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: platform.kratix.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: # name\nspec:\n  containers:\n    - name: # container name\n      image: # container image\n    -  # ...\n")),(0,i.kt)("p",null,"Kratix will run each container in the ",(0,i.kt)("inlineCode",{parentName:"p"},"spec.containers")," list in order,\nproviding a set of common volumes."),(0,i.kt)("h3",{id:"kratixinput"},(0,i.kt)("inlineCode",{parentName:"h3"},"/kratix/input")),(0,i.kt)("p",null,"This directory is pre-populated with files that are provided by Kratix or the\nprevious container. The first container will have access to an\n",(0,i.kt)("inlineCode",{parentName:"p"},"object.yaml")," file containing the Promise definition submitted to the platform. All\ncontainers will have access to this file at the ",(0,i.kt)("inlineCode",{parentName:"p"},"/kratix/input")," directory."),(0,i.kt)("h3",{id:"kratixoutput"},(0,i.kt)("inlineCode",{parentName:"h3"},"/kratix/output")),(0,i.kt)("p",null,"This directory is an empty directory provided to the container for writing files\nfor future use."),(0,i.kt)("p",null,"All containers in the pipeline will have access to the ",(0,i.kt)("inlineCode",{parentName:"p"},"/kratix/output"),"\ndirectory. Any documents on this directory by the end of the pipeline will be\nscheduled to all Worker Clusters. Any container on the list may add, update, or\nremove documents from this directory."),(0,i.kt)("p",null,"In the ",(0,i.kt)("inlineCode",{parentName:"p"},"configure")," pipeline all files present in ",(0,i.kt)("inlineCode",{parentName:"p"},"/kratix/output")," directory of the\nfinal container will be written to your GitOps repository."),(0,i.kt)("h2",{id:"running-workflows"},"Running Workflows"),(0,i.kt)("p",null,"The Workflows are regularly executed on each Resource. Kubernetes reconciles on a number of different actions including, but not\nlimited to:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"On the creation of the Promise"),(0,i.kt)("li",{parentName:"ul"},"Regular interval (default: 10 hours, not currently configurable)"),(0,i.kt)("li",{parentName:"ul"},"Recreating or restarting the Kratix Controller"),(0,i.kt)("li",{parentName:"ul"},"A change to the Promise definition")),(0,i.kt)("br",null),"All commands should be idempotent as there is a guarantee that they will be run multiple times a day, and may be run much more frequently depending on other environmental impacts like pod restarts.",(0,i.kt)("h2",{id:"passing-secrets-to-the-pipeline"},"Passing secrets to the Pipeline"),(0,i.kt)("p",null," See ",(0,i.kt)("a",{parentName:"p",href:"../workflows"},"workflow documentation for more\ninformation")," on how to pass secrets to\nPipelines"))}u.isMDXComponent=!0}}]);