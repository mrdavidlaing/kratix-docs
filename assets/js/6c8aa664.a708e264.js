"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[6132],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=a.createContext({}),p=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(i.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=p(n),d=o,h=m["".concat(i,".").concat(d)]||m[d]||c[d]||r;return n?a.createElement(h,l(l({ref:t},u),{},{components:n})):a.createElement(h,l({ref:t},u))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[m]="string"==typeof e?e:o,l[1]=s;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7244:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=n(7462),o=(n(7294),n(3905));const r={description:"Learn about how Compound Promises can deliver complete developer experiences",title:"Using Compound Promises",id:"multiple-promises",slug:"../multiple-promises"},l=void 0,s={unversionedId:"workshop/part-i/multiple-promises",id:"workshop/part-i/multiple-promises",title:"Using Compound Promises",description:"Learn about how Compound Promises can deliver complete developer experiences",source:"@site/docs/workshop/part-i/04-using-multiple-promise.md",sourceDirName:"workshop/part-i",slug:"/workshop/multiple-promises",permalink:"/docs/workshop/multiple-promises",draft:!1,editUrl:"https://github.com/syntasso/kratix-docs/tree/main/docs/workshop/part-i/04-using-multiple-promise.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{description:"Learn about how Compound Promises can deliver complete developer experiences",title:"Using Compound Promises",id:"multiple-promises",slug:"../multiple-promises"},sidebar:"workshopSidebar",previous:{title:"Unpacking a Promise",permalink:"/docs/workshop/promise-theory"},next:{title:"Part II",permalink:"/docs/category/part-ii"}},i={},p=[{value:"What&#39;s a Compound Promise?",id:"whats-a-compound-promise",level:2},{value:"Installing a Compound Promise",id:"installing-a-compound-promise",level:2},{value:"Registering the Platform as a Worker",id:"registering-the-platform-as-a-worker",level:3},{value:"Request a Paved Path",id:"request-a-paved-path",level:2},{value:"\ud83c\udf89 Congratulations",id:"-congratulations",level:2}],u={toc:p};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This is Part 4 of ",(0,o.kt)("a",{parentName:"p",href:"intro"},"a series")," illustrating how Kratix works. ",(0,o.kt)("br",null),"\n\ud83d\udc48\ud83c\udffe","\xa0","\xa0"," Previous: ",(0,o.kt)("a",{parentName:"p",href:"installing-a-promise"},"Install a Kratix Promise")," ",(0,o.kt)("br",null),"\n\ud83d\udc49\ud83c\udffe","\xa0","\xa0"," Next: ",(0,o.kt)("a",{parentName:"p",href:"promise-theory"},"Unpacking a Promise")),(0,o.kt)("hr",null),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"In this tutorial, you will:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"learn about Compound Promises"),(0,o.kt)("li",{parentName:"ul"},"see a Compound Promise in action")),(0,o.kt)("h2",{id:"whats-a-compound-promise"},"What's a Compound Promise?"),(0,o.kt)("p",null,"Imagine that you want to provide your users with a simpler way to deploy their\napplications. You do your research and notice that most teams use a similar\nstack: PostgreSQL as database, Redis for caching, Grafana for monitoring, etc.\nYou also find out that the majority of users don't care about a lot of the\nconfiguration options of those services, as long as they come with sane\ndefaults."),(0,o.kt)("p",null,"However, not all teams are created equal. Some teams need specific versions of\nthose services, configured with specific parameters, on specific regions and\nresources."),(0,o.kt)("p",null,"You want the platform to cater for both: it should be simple to get the simple\nservices and it should be possible to get the specialised ones."),(0,o.kt)("p",null,"You decide to provide each of the individual services as a Promise. Specialist\nteams can then use the API to get the exact service they need."),(0,o.kt)("p",null,"To deliver the simple experience though, you want to orchestrate those Promises\nin a higher-level promise. In Kratix terms, this is a Compound Promise: a\nPromise that define other Promises as its dependencies."),(0,o.kt)("p",null,"In this tutorial, we will install and use a Compound Promise."),(0,o.kt)("h2",{id:"installing-a-compound-promise"},"Installing a Compound Promise"),(0,o.kt)("p",null,"At this stage, you should still have your Platform and your Worker clusters\nrunning."),(0,o.kt)("p",null,"Verify Kratix status:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context kind-platform get pods --namespace kratix-platform-system\n")),(0,o.kt)("p",null,"The above command will give an output similar to:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell-session"},"NAME                                                  READY   STATUS    RESTARTS   AGE\nkratix-platform-controller-manager-7cc49f598b-zqkmz   2/2     Running   0          4h4m\nminio-6f75d9fbcf-jpstv                                1/1     Running   0          4h4m\n")),(0,o.kt)("p",null,"In this tutorial, we will use a Compound Promise that you can find on the Kratix\nrepository, under ",(0,o.kt)("inlineCode",{parentName:"p"},"samples/paved-path-nginx"),'. This Compound Promise encapsulate\nthe Nginx and the Postgres Promises. It also includes a "Deployment" Promise to\nrun the application image.'),(0,o.kt)("p",null,"From the Kratix directory, install the Paved Path Promise:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context kind-platform apply --filename samples/paved-path-nginx/promise.yaml\n")),(0,o.kt)("p",null,"Verify the Promise is available:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context kind-platform get promises\n")),(0,o.kt)("p",null,"The above command will give an output similar to:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell-session"},"NAME            AGE\npaved-path       1m\n")),(0,o.kt)("p",null,"However, similar to last time, if we check the Kratix Controller Manager logs,\nwe will once again see a failure to reconcile."),(0,o.kt)("p",null,"Verify the Kratix Controller Manager logs"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'kubectl --context kind-platform --namespace kratix-platform-system \\\n logs deployment/kratix-platform-controller-manager \\\n --container manager | grep "Reconciler error"\n')),(0,o.kt)("p",null,"The above command will give an output similar to:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'# output formatted for readability\nERROR    Reconciler error {\n  "Work": {"name":"paved-path-default","namespace":"default"},\n  "error": "no Clusters can be selected for clusterSelector"\n}\n')),(0,o.kt)("p",null,"By reading the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/syntasso/kratix/tree/main/samples/paved-path-nginx"},"Paved Path Promise\ndocumentation"),",\nclosely, we can see the following:"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"To use this Promise, the Kubernetes cluster running Kratix must be registered\nas a Worker Cluster")),(0,o.kt)("p",null,"Since the Paved Path Promise has other Promises as dependencies, we need to\nensure those dependencies are installed on the Platform cluster itself. For\nthat, we will follow a similar process as we executed previously."),(0,o.kt)("h3",{id:"registering-the-platform-as-a-worker"},"Registering the Platform as a Worker"),(0,o.kt)("p",null,"Register the Platform as a Worker:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"cat <<EOF | kubectl --context kind-platform apply -f -\napiVersion: platform.kratix.io/v1alpha1\nkind: Cluster\nmetadata:\n  name: platform-cluster\n  namespace: default\n  labels:\n    environment: platform\nspec:\n  stateStoreRef:\n    name: minio-store\n    kind: BucketStateStore\nEOF\n")),(0,o.kt)("p",null,"The above command will give an output similar to:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell-session"},"cluster.platform.kratix.io/platform-cluster created\n")),(0,o.kt)("p",null,"The Paved Path Promise dependencies (i.e. other Promises) cannot be installed to\nany Worker cluster. It should only be installed on clusters where the Promise\nCRD is available","\u2014","which is usually only in the Platform cluster."),(0,o.kt)("p",null,"Kratix allows Promise writers to determine to which clusters the Promisee dependencies\ncan be installed. The Paved Path Promise contains, in its definition, a line\nthat says ",(0,o.kt)("em",{parentName:"p"},"only install the dependencies in clusters with a label ",(0,o.kt)("inlineCode",{parentName:"em"},"environment"),"\nwith value ",(0,o.kt)("inlineCode",{parentName:"em"},"platform")),". That's why, if you look closely on the Cluster\ndefinition above, we are labelling the Platform cluster with those values."),(0,o.kt)("p",null,"We also need to install the GitOps toolkit on the Platform cluster."),(0,o.kt)("p",null,"Run the ",(0,o.kt)("inlineCode",{parentName:"p"},"install-gitops")," script located inside the ",(0,o.kt)("inlineCode",{parentName:"p"},"scripts")," directory:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"./scripts/install-gitops --context kind-platform --path platform-cluster\n")),(0,o.kt)("p",null,"Once the Flux running on the Platform picks up the changes, you should see the\nsub-Promises appearing in the Platform cluster."),(0,o.kt)("p",null,"Verify the available Promises:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context kind-platform get promises --watch\n")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"kubectl")," commands with the ",(0,o.kt)("inlineCode",{parentName:"p"},"--watch")," flag block your terminal indefinetely. To\nexit the watch mode, press ",(0,o.kt)("kbd",null,"Ctrl"),"+",(0,o.kt)("kbd",null,"C"),".")),(0,o.kt)("p",null,"The above command will give an output similar to:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell-session"},"NAME            AGE\ndeployment      10m\nnginx-ingress   10m\npaved-path      15m\npostgresql      10m\n")),(0,o.kt)("p",null,"The Paved Path Promise also determines that the sub-Promises dependencies should\nonly be installed to clusters with label ",(0,o.kt)("inlineCode",{parentName:"p"},"environment = dev"),". We already\nlabelled the Worker cluster with that label when we created it."),(0,o.kt)("p",null,"Verify the registered Clusters labels:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context kind-platform get clusters --show-labels\n")),(0,o.kt)("p",null,"The above command will give an output similar to:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell-session"},"NAME               AGE   LABELS\nplatform-cluster   1h    environment=platform\nworker-cluster     1h    environment=dev\n")),(0,o.kt)("p",null,"Checking the Worker cluster, we should see the Nginx Controller and the\nPostgreSQL operator starting up."),(0,o.kt)("p",null,"Verify the deployments on the Worker cluster:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context kind-worker get deployments --watch\n")),(0,o.kt)("p",null,"The above command will give an output similar to (it may take a few minutes for\nit to appear and to start):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell-session"},"NAME                  READY   UP-TO-DATE   AVAILABLE   AGE\nnginx-nginx-ingress   1/1     1            1           1m\npostgres-operator     1/1     1            1           1m\n")),(0,o.kt)("p",null,"When the deployments eventually complete, Platform users can go ahead and start\nusing the Promises!"),(0,o.kt)("h2",{id:"request-a-paved-path"},"Request a Paved Path"),(0,o.kt)("p",null,"As a Platform user, you now have a few choices of Promises. Verify the available\nPromises:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context kind-platform get promises\n")),(0,o.kt)("p",null,"The above command will give an output similar to:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell-session"},"NAME            AGE\ndeployment      1h\nnginx-ingress   1h\npaved-path      1h\npostgresql      1h\n")),(0,o.kt)("p",null,"You could request each one of those services individually if you need\nfine-grained control of how they ought to be deployed, or you can use the Paved\nPath promise to get an opinionated deployment of each of those. Let's go ahead\nand request the Platform to run an application using the Paved Path offering:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"cat <<EOF | kubectl --context kind-platform apply --filename -\n---\napiVersion: example.promise.syntasso.io/v1\nkind: app\nmetadata:\n  name: example\n  namespace: default\nspec:\n  name: todo\n  image: syntasso/sample-todo-app:v0.1.2\n  dbDriver: postgres\nEOF\n")),(0,o.kt)("p",null,"The above command will give an output similar to:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell-session"},"app.example.promise.syntasso.io/example created\n")),(0,o.kt)("p",null,"The Paved Path Promise will take that request and generate the necessary\nrequests for the sub-Promises, as well as doing the wire up of the services and\nthe application."),(0,o.kt)("p",null,"Verify the Pipelines running on the Platform cluster:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context kind-platform get pods --watch\n")),(0,o.kt)("p",null,"The above command will give an output similar to:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell-session"},"NAME                                        READY   STATUS      RESTARTS   AGE\nrequest-pipeline-deployment-default-22ee9   0/1     Completed   0          18s\nrequest-pipeline-paved-path-default-8769b   0/1     Completed   0          40s\nrequest-pipeline-postgresql-default-c3516   0/1     Completed   0          18s\n")),(0,o.kt)("p",null,"Kratix will, once again, stores the pipeline output (i.e. the desired state) in\nthe State Store for the Worker cluster, which will in turn be picked up by the\nGitOps toolkit and deployed onto the Worker."),(0,o.kt)("p",null,"Verify that the requested pods start on the Worker cluster (it may take a few\nminutes):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context kind-worker get pods --watch\n")),(0,o.kt)("p",null,"The above command will give an output similar to:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell-session"},"NAME                                   READY   STATUS    RESTARTS   AGE\n#highlight-next-line\nacid-todo-postgresql-0                 1/1     Running   0          110s\nnginx-nginx-ingress-58c4dcb47d-49fd8   1/1     Running   0          10m\npostgres-operator-79754946d-nmkhr      1/1     Running   0          10m\n#highlight-next-line\ntodo-84f6b6698-vqxqm                   1/1     Running   0          74s\n")),(0,o.kt)("p",null,"You can see the new PostgreSQL instance, as well as the application, fully\ndeployed. You can now access the app! It should be running on\n",(0,o.kt)("a",{parentName:"p",href:"http://todo.local.gd:31338/"},"http://todo.local.gd:31338/"),"."),(0,o.kt)("h2",{id:"-congratulations"},"\ud83c\udf89 Congratulations"),(0,o.kt)("p",null,"You have installed a Compound Promise and created an instance of the Paved Path!"),(0,o.kt)("p",null,"\u2705","\xa0","\xa0","This tutorial concludes our Introduction to Kratix. ",(0,o.kt)("br",null),"\n\ud83d\udc49\ud83c\udffe","\xa0","\xa0","You can go ahead and start the next module to learn ",(0,o.kt)("a",{parentName:"p",href:"writing-a-promise"},"how to write your own\nPromises")," or jump to ",(0,o.kt)("a",{parentName:"p",href:"whats-next"},"What's next")," to learn about\nwhat else you can achieve with Kratix."))}m.isMDXComponent=!0}}]);