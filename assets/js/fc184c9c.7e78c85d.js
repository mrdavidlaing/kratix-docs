"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[711],{1102:(e,n,s)=>{s.d(n,{ZP:()=>o});var r=s(5893),t=s(1151);function i(e){const n={code:"code",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Before moving on, please clean up your environment by deleting the current Promises and Resources.\nKratix will, by default, clean up any Resources when the parent Promise is deleted."}),"\n",(0,r.jsx)(n.p,{children:"To delete all the Promises, run:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"kubectl --context $PLATFORM delete promises --all\n"})}),"\n",(0,r.jsx)(n.p,{children:"The above command will give an output similar to:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell-session",children:"promise.platform.kratix.io/elastic-cloud deleted\n"})})]})}function o(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(i,{...e})}):i(e)}},6593:(e,n,s)=>{s.d(n,{ZP:()=>o});var r=s(5893),t=s(1151);function i(e){const n={a:"a",code:"code",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",...(0,t.a)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h4,{id:"pre-requisites",children:"Pre-requisites"}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsxs)("summary",{children:["You need an installation of Kratix for this section. ",(0,r.jsx)("strong",{children:"Click here"})," for instructions"]}),(0,r.jsx)(n.p,{children:"The simplest way to do so is by running the quick-start script from within the\nKratix directory. The script will create two KinD clusters, install, and\nconfigure Kratix."}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"./scripts/quick-start.sh --recreate\n"})}),(0,r.jsx)(n.p,{children:"You can run Kratix either with a multi-cluster or a single-cluster setup. The\ncommands on the remainder of this document assume that two environment variables\nare set:"}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"PLATFORM"})," representing the platform cluster Kubernetes context"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"WORKER"})," representing the worker cluster Kubernetes context"]}),"\n"]}),(0,r.jsx)(n.p,{children:"If you ran the quick-start script above, do:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'export PLATFORM="kind-platform"\nexport WORKER="kind-worker"\n'})}),(0,r.jsx)(n.p,{children:"For single cluster setups, the two variables should be set to the same value.\nYou can find your cluster context by running:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"kubectl config get-contexts\n"})}),(0,r.jsxs)(n.p,{children:["Refer back to ",(0,r.jsx)(n.a,{href:"../../category/installing-kratix",children:"Installing Kratix"})," for more\ndetails."]})]})]})}function o(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(i,{...e})}):i(e)}},3027:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>p,contentTitle:()=>d,default:()=>x,frontMatter:()=>c,metadata:()=>h,toc:()=>u});var r=s(5893),t=s(1151),i=s(6593),o=(s(1102),s(4996));function a(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"In this tutorial, you will"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"experience the power of leveraging customised Kratix Promises"}),"\n",(0,r.jsx)(n.li,{children:"gain confidence with the components of a Promise"}),"\n",(0,r.jsx)(n.li,{children:"enhance an sample Postgres Promise"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"using-kratix-to-support-your-organisation",children:"Using Kratix to support your organisation"}),"\n",(0,r.jsxs)(n.p,{children:["As ",(0,r.jsx)(n.a,{href:"./installing-a-promise",children:"you've seen"}),", Kratix can support Promises for services like Jenkins, Nginx, and Postgres."]}),"\n",(0,r.jsx)(n.p,{children:"When you think about providing services for things like automation, deployment or data, how often are you able to choose a service (like Postgres) and offer it to your users straight off the shelf?"}),"\n",(0,r.jsx)(n.p,{children:"Probably not very often."}),"\n",(0,r.jsx)(n.p,{children:"Application teams need to be able to easily run their services in different environments. They'll want specific sizes, particular backup strategies, defined versions, and more. Key stakeholders in other parts of the business also need to easily understand the state of service usage as it applies to them (hello audit, billing, and security!)."}),"\n",(0,r.jsx)(n.p,{children:"Your team works with all of these users to understand the if, when, and how of each of these requests and creates a platform from a prioritised backlog of platform features."}),"\n",(0,r.jsx)(n.p,{children:"This platform needs to be extensible and flexible\u2014your users will have new and changing needs, and you'll want to quickly respond to valuable feature requests."}),"\n",(0,r.jsx)(n.p,{children:"Kratix and Promises make it easier to create a platform paved with golden paths that deliver value easily and quickly."}),"\n",(0,r.jsx)(n.p,{children:"Now you will create and enhance a Promise as a response to user and business needs."}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsx)("hr",{}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsx)(n.h2,{id:"from-off-the-shelf-to-ready-for-the-paved-path",children:"From off-the-shelf to ready for the paved path"}),"\n",(0,r.jsx)(n.h3,{id:"the-scenario",children:"The scenario"}),"\n",(0,r.jsx)(n.p,{children:"In this exercise, you and the platform team are starting development of the next platform feature."}),"\n",(0,r.jsx)(n.p,{children:"You discussed needs with application teams and you've decided to offer a new service. You'll be adding Postgres to your platform."}),"\n",(0,r.jsx)(n.p,{children:"The billing team is a key stakeholder for the platform, and they will need a cost centre for each new Postgres Resource to charge back to the right team."}),"\n",(0,r.jsx)(n.p,{children:"For the purposes of this exercise, you know that all of the underlying functionality to get the billing team what it needs is already in place."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.em,{children:["In this guide, you only need create a new Postgres Promise that creates Postgres Resources with a ",(0,r.jsx)(n.code,{children:"costCentre"})," label."]})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"The steps:"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#base-promise",children:"Get a base Promise"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#api",children:["Change the Promise so that ",(0,r.jsx)(n.em,{children:"the user who wants an Resource"})," knows they need to include their ",(0,r.jsx)(n.code,{children:"costCentre"})," name when they make their request to the platform"]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#dependencies",children:["Change the Promise so that ",(0,r.jsx)(n.em,{children:"the operator Dependency"})," that creates the Resource knows to apply your new ",(0,r.jsx)(n.code,{children:"costCentre"})," label ",(0,r.jsx)(n.code,{children:"costCentre"})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#workflow",children:["Change the Promise so that ",(0,r.jsx)(n.em,{children:"the Workflow"})," knows how to add the user's ",(0,r.jsx)(n.code,{children:"costCentre"})," to the request for a Resource"]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#install-promise",children:"Install the modified Promise on your platform"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#verify-resource",children:"Check it works: make a request to your platform for a Postgres Resource"})}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"base-promise",children:"Step one: Get a base Promise"}),"\n",(0,r.jsxs)(n.p,{children:["There's a PostgreSQL Promise available on the ",(0,r.jsx)(n.a,{href:"http://kratix.io/marketplace",children:"Marketplace"}),". You'll use that as your base. Start by cloning the repository:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:"git clone https://github.com/syntasso/promise-postgresql.git\n"})}),"\n",(0,r.jsx)(n.p,{children:"Take a look"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:"cd promise-postgresql\nls\n"})}),"\n",(0,r.jsx)(n.p,{children:"You should see something a structure similar to the one below:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:". \ud83d\udcc2 promise-postgresql\n#highlight-next-line\n  \u251c\u2500\u2500 promise.yaml\n  \u251c\u2500\u2500 resource-request.yaml\n  \u251c\u2500\u2500 ...\n  \u2514\u2500\u2500 \ud83d\udcc2 internal\n      \u251c\u2500\u2500 \ud83d\udcc2 configure-pipeline\n      \u2502   \u251c\u2500\u2500 \ud83d\udcc2 resources\n      \u2502   \u2502   \u2514\u2500\u2500 minimal-postgres-manifest.yaml\n      \u2502   \u251c\u2500\u2500 Dockerfile\n      \u2502   \u251c\u2500\u2500 execute-pipeline.sh\n      \u251c\u2500\u2500 \ud83d\udcc2 dependencies\n      \u2502   \u251c\u2500\u2500 operator.yaml\n      \u2502   \u2514\u2500\u2500 ...\n      \u251c\u2500\u2500 \ud83d\udcc2 scripts\n      \u2502   \u251c\u2500\u2500 test\n      \u2502   \u2514\u2500\u2500 ...\n      \u2514\u2500\u2500 README.md\n"})}),"\n",(0,r.jsxs)(n.p,{children:["You should see the ",(0,r.jsx)(n.code,{children:"promise.yaml"})," file. This is the Promise definition\nthat you'll modify and install on your platform. Ignore everything else in the\nfolder for now."]}),"\n",(0,r.jsxs)(n.h3,{id:"api",children:["Step two: ",(0,r.jsx)(n.code,{children:"api"})]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Change the Promise so that ",(0,r.jsx)(n.em,{children:"the user who wants a Postgres"})," knows they need to include their ",(0,r.jsx)(n.code,{children:"costCentre"})," name when they make their request to the platform"]}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"about-api",children:["About ",(0,r.jsx)(n.code,{children:"api"})]}),"\n",(0,r.jsx)("img",{align:"right",width:"50%",src:(0,o.Z)("/img/docs/promise-crd-api.jpg"),alt:"screenshot of a YAML file, highlighting the presence of the api key"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"api"})," is the API exposed to the users of the ",(0,r.jsx)(n.a,{href:"writing-a-promise",children:"Promise"}),".\nTo see ",(0,r.jsx)(n.code,{children:"api"})," in the Promise definition file, open ",(0,r.jsx)(n.code,{children:"promise.yaml"}),"\nand look under the ",(0,r.jsx)(n.code,{children:"spec"})," section."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"api"})," is the contract with the user who wants a Resource. It's where you get to define the required and optional configuration options exposed to your users."]}),"\n",(0,r.jsxs)(n.p,{children:["You can already see a number of properties in this section of the ",(0,r.jsx)(n.code,{children:"promise.yaml"})," file. These properties are defined within a versioned schema and can have different types and validations."]}),"\n",(0,r.jsxs)(n.h4,{id:"update-the-api",children:["Update the ",(0,r.jsx)(n.code,{children:"api"})]}),"\n",(0,r.jsxs)(n.p,{children:["To add the required cost centre configuration, add the following to the ",(0,r.jsx)(n.code,{children:"promise.yaml"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'costCentre:\n  pattern: "^[a-zA-Z0-9_.-]*$"\n  type: string\n'})}),"\n",(0,r.jsx)(n.p,{children:"From the top of the file, navigate to"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"spec"})," > ",(0,r.jsx)(n.code,{children:"api"})," > ",(0,r.jsx)(n.code,{children:"spec"})," > ",(0,r.jsx)(n.code,{children:"versions[0]"})," > ",(0,r.jsx)(n.code,{children:"schema"})," > ",(0,r.jsx)("br",{})," ",(0,r.jsx)(n.code,{children:"openAPIV3Schema"})," > ",(0,r.jsx)(n.code,{children:"properties"})," > ",(0,r.jsx)(n.code,{children:"spec"})," > ",(0,r.jsx)(n.code,{children:"properties"})]}),"\n",(0,r.jsxs)(n.p,{children:["Here, add your ",(0,r.jsx)(n.code,{children:"costCentre"})," YAML from above as a sibling to the existing ",(0,r.jsx)(n.code,{children:"dbName"})," property."]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsxs)("summary",{children:["\ud83d\udc40\xa0\xa0Click here to view a final version of the extended ",(0,r.jsx)("code",{children:"api"})," which should be indented so as to nest under the ",(0,r.jsx)("code",{children:"spec"})," header"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'api:\n  apiVersion: apiextensions.k8s.io/v1\n  kind: CustomResourceDefinition\n  metadata:\n    name: postgresqls.marketplace.kratix.io\n  spec:\n    group: marketplace.kratix.io\n    names:\n      kind: postgresql\n      plural: postgresqls\n      singular: postgresql\n    scope: Namespaced\n    versions:\n      - name: v1alpha1\n        schema:\n          openAPIV3Schema:\n            properties:\n              spec:\n                properties:\n                  #highlight-start\n                  costCentre:\n                    pattern: "^[a-zA-Z0-9_.-]*$"\n                    type: string\n                  #highlight-end\n                  dbName:\n                    default: postgres\n                    description: |\n                      Database name. A database will be created with this name. The owner of the database will be the teamId.\n                    type: string\n                  env:\n                    default: dev\n                    description: |\n                      Configures and deploys this PostgreSQL with environment specific configuration. Prod PostgreSQL are configured with backups and more resources.\n                    pattern: ^(dev|prod)$\n                    type: string\n                  teamId:\n                    default: acid\n                    description: |\n                      Team ID. A superuser role will be created with this name.\n                    type: string\n                type: object\n            type: object\n        served: true\n        storage: true\n'})})]}),"\n",(0,r.jsxs)(n.h3,{id:"dependencies",children:["Step three: ",(0,r.jsx)(n.code,{children:"dependencies"})]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Change the Promise so that ",(0,r.jsx)(n.em,{children:"the worker Destination"})," that can host the Postgres knows to apply your new ",(0,r.jsx)(n.code,{children:"costCentre"})," label ",(0,r.jsx)(n.code,{children:"costCentre"})]}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"about-dependencies",children:["About ",(0,r.jsx)(n.code,{children:"dependencies"})]}),"\n",(0,r.jsx)("img",{align:"right",width:"50%",src:(0,o.Z)("/img/docs/promise-crd-dependencies.jpg"),alt:"screenshot of a YAML file, highlighting the presence of the Dependencies key"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"dependencies"})," is the description of all of the Kubernetes resources required to create a promised Resource, such as CRDs, Operators and Deployments."]}),"\n",(0,r.jsxs)(n.p,{children:["In the Promise definition, you divide resources based on the idea of ",(0,r.jsx)(n.em,{children:"prerequisite"})," and ",(0,r.jsx)(n.em,{children:"per-resource"})," items. Prerequisite resources are resources that we create before any application team requests a Resource. This can be helpful for two scenarios:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Any CRDs or Dependencies are ready when an Resource is requested which speeds up response time to application teams."}),"\n",(0,r.jsx)(n.li,{children:"Resources that can be shared across Resources are only deployed once. This can reduce load on the cluster, and it can also allow delivering a Resource as a portion of an existing Resource (e.g. you could provide a whole database instance on each request, or you could provide a database within an existing instance on each request)"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"dependencies"})," section of the Kratix Promise defines the ",(0,r.jsx)(n.em,{children:"prerequisite capabilities"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"These capabilities are:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"created once per Destination."}),"\n",(0,r.jsxs)(n.li,{children:["complete Kubernetes YAML documents stored in the ",(0,r.jsx)(n.code,{children:"dependencies"})," section of the Promise."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["For the Postgres Promise you're defining, the only Dependency workloads you need are conveniently packaged in a ",(0,r.jsx)(n.a,{href:"https://github.com/zalando/postgres-operator",children:"Kubernetes Operator"})," that is maintained by Zalando. The Operator turns the complexities of configuring Postgres into a manageable configuration format."]}),"\n",(0,r.jsxs)(n.h4,{id:"update-dependencies",children:["Update ",(0,r.jsx)(n.code,{children:"dependencies"})]}),"\n",(0,r.jsxs)(n.p,{children:["To make sure all Postgres Resources includes ",(0,r.jsx)(n.code,{children:"costCentre"}),", you need to make the Operator aware of the label."]}),"\n",(0,r.jsxs)(n.p,{children:["To ensure Zalando's Postgres Operator is aware of the label, you need to add configuration when installing the Operator. The configuration the Operator needs will be under a new key: ",(0,r.jsx)(n.a,{href:"https://github.com/zalando/postgres-operator/blob/master/docs/reference/operator_parameters.md#kubernetes-resources?:=inherited_labels",children:(0,r.jsx)(n.code,{children:"inherited_labels"})}),"."]}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"inherited_labels"})," is unique to how Zalando's Postgres Operator works. If you were using a different Operator (or writing your own!), a different change may be required (or no change at all)."]})}),"\n",(0,r.jsxs)(n.p,{children:["Following the Zalando ",(0,r.jsx)(n.a,{href:"https://github.com/zalando/postgres-operator/blob/master/docs/reference/operator_parameters.md#kubernetes-resources?:=inherited_labels",children:(0,r.jsx)(n.code,{children:"docs"})}),", you need to add ",(0,r.jsx)(n.code,{children:"inherited_labels"})," in a particular spot."]}),"\n",(0,r.jsx)(n.p,{children:"From the top of the file, navigate to"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"spec"})," > ",(0,r.jsx)(n.code,{children:"dependencies[7]"})," > ",(0,r.jsx)(n.code,{children:"configuration"})," > ",(0,r.jsx)(n.code,{children:"kubernetes"})]}),"\n",(0,r.jsxs)(n.p,{children:["To verify you're in the right place, the object should be ",(0,r.jsx)(n.code,{children:"kind: OperatorConfiguration"})," with ",(0,r.jsx)(n.code,{children:"name: postgres-operator"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Under the ",(0,r.jsx)(n.code,{children:"kubernetes"})," key, add ",(0,r.jsx)(n.code,{children:"inherited_labels: [costCentre]"}),"."]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsxs)("summary",{children:["\ud83d\udc40\xa0\xa0Click here to see the complete ",(0,r.jsx)("code",{children:"OperatorConfiguration"})," resource after this change"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# Note, the property was added to the top of the configuration.kubernetes\n- apiVersion: acid.zalan.do/v1\n  configuration:\n    aws_or_gcp:\n      aws_region: eu-central-1\n      enable_ebs_gp3_migration: false\n    connection_pooler:\n      connection_pooler_default_cpu_limit: "1"\n      connection_pooler_default_cpu_request: 500m\n      connection_pooler_default_memory_limit: 100Mi\n      connection_pooler_default_memory_request: 100Mi\n      connection_pooler_image: registry.opensource.zalan.do/acid/pgbouncer:master-22\n      connection_pooler_max_db_connections: 60\n      connection_pooler_mode: transaction\n      connection_pooler_number_of_instances: 2\n      connection_pooler_schema: pooler\n      connection_pooler_user: pooler\n    crd_categories:\n      - all\n    debug:\n      debug_logging: true\n      enable_database_access: true\n    docker_image: registry.opensource.zalan.do/acid/spilo-14:2.1-p6\n    enable_crd_registration: true\n    enable_lazy_spilo_upgrade: false\n    enable_pgversion_env_var: true\n    enable_shm_volume: true\n    enable_spilo_wal_path_compat: false\n    etcd_host: ""\n    kubernetes:\n      #highlight-next-line\n      inherited_labels: [costCentre]\n      cluster_domain: cluster.local\n      cluster_labels:\n        application: spilo\n      cluster_name_label: cluster-name\n      enable_cross_namespace_secret: false\n      enable_init_containers: true\n      enable_pod_antiaffinity: false\n      enable_pod_disruption_budget: true\n      enable_sidecars: true\n      oauth_token_secret_name: postgres-operator\n      pdb_name_format: postgres-{cluster}-pdb\n      pod_antiaffinity_topology_key: kubernetes.io/hostname\n      pod_management_policy: ordered_ready\n      pod_role_label: spilo-role\n      pod_service_account_name: postgres-pod\n      pod_terminate_grace_period: 5m\n      secret_name_template: "{username}.{cluster}.credentials.{tprkind}.{tprgroup}"\n      spilo_allow_privilege_escalation: true\n      spilo_privileged: false\n      storage_resize_mode: pvc\n      watched_namespace: "*"\n    load_balancer:\n      db_hosted_zone: db.example.com\n      enable_master_load_balancer: false\n      enable_master_pooler_load_balancer: false\n      enable_replica_load_balancer: false\n      enable_replica_pooler_load_balancer: false\n      external_traffic_policy: Cluster\n      master_dns_name_format: "{cluster}.{team}.{hostedzone}"\n      replica_dns_name_format: "{cluster}-repl.{team}.{hostedzone}"\n    logging_rest_api:\n      api_port: 8080\n      cluster_history_entries: 1000\n      ring_log_lines: 100\n    logical_backup:\n      logical_backup_docker_image: registry.opensource.zalan.do/acid/logical-backup:v1.8.0\n      logical_backup_job_prefix: logical-backup-\n      logical_backup_provider: s3\n      logical_backup_s3_access_key_id: ""\n      logical_backup_s3_bucket: my-bucket-url\n      logical_backup_s3_endpoint: ""\n      logical_backup_s3_region: ""\n      logical_backup_s3_retention_time: ""\n      logical_backup_s3_secret_access_key: ""\n      logical_backup_s3_sse: AES256\n      logical_backup_schedule: 30 00 * * *\n    major_version_upgrade:\n      major_version_upgrade_mode: "off"\n      minimal_major_version: "9.6"\n      target_major_version: "14"\n    max_instances: -1\n    min_instances: -1\n    postgres_pod_resources:\n      default_cpu_limit: "1"\n      default_cpu_request: 100m\n      default_memory_limit: 500Mi\n      default_memory_request: 100Mi\n      min_cpu_limit: 250m\n      min_memory_limit: 250Mi\n    repair_period: 5m\n    resync_period: 30m\n    teams_api:\n      enable_admin_role_for_users: true\n      enable_postgres_team_crd: false\n      enable_postgres_team_crd_superusers: false\n      enable_team_member_deprecation: false\n      enable_team_superuser: false\n      enable_teams_api: false\n      pam_role_name: zalandos\n      postgres_superuser_teams:\n        - postgres_superusers\n      protected_role_names:\n        - admin\n        - cron_admin\n      role_deletion_suffix: _deleted\n      team_admin_role: admin\n      team_api_role_configuration:\n        log_statement: all\n    timeouts:\n      patroni_api_check_interval: 1s\n      patroni_api_check_timeout: 5s\n      pod_deletion_wait_timeout: 10m\n      pod_label_wait_timeout: 10m\n      ready_wait_interval: 3s\n      ready_wait_timeout: 30s\n      resource_check_interval: 3s\n      resource_check_timeout: 10m\n    users:\n      enable_password_rotation: false\n      password_rotation_interval: 90\n      password_rotation_user_retention: 180\n      replication_username: standby\n      super_username: postgres\n    workers: 8\n  kind: OperatorConfiguration\n  metadata:\n    labels:\n      app.kubernetes.io/instance: postgres-operator\n      app.kubernetes.io/managed-by: Helm\n      app.kubernetes.io/name: postgres-operator\n      helm.sh/chart: postgres-operator-1.8.2\n    name: postgres-operator\n    namespace: default\n'})})]}),"\n",(0,r.jsxs)(n.h3,{id:"workflows",children:["Step four: ",(0,r.jsx)(n.code,{children:"workflows"})]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Change the Promise ",(0,r.jsx)(n.code,{children:"resource.configure"})," Workflow so that the image knows how to add the user's ",(0,r.jsx)(n.code,{children:"costCentre"})," to the request for the Resource."]}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"about-workflows",children:["About ",(0,r.jsx)(n.code,{children:"workflows"})]}),"\n",(0,r.jsx)("img",{align:"right",width:"50%",src:(0,o.Z)("img/docs/promise-crd-workflows.jpg"),alt:"screenshot of a YAML file, highlighting the presence of the Workflow key"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"workflows.resource.configure"})," contains a Kratix Pipeline that will take your user's request, apply rules from your organisation (including adding the ",(0,r.jsx)(n.code,{children:"costCentre"})," name), and output valid Kubernetes documents for the Operator to run on a Destination cluster."]}),"\n",(0,r.jsx)(n.p,{children:"Conceptually, a configure Pipeline is a sequential set of steps that transforms an input value to generate an output value. There are three parts to the PostgreSQL Pipeline."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"resources/minimal-postgres-manifest.yaml"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"execute-pipeline.sh"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"Dockerfile"})}),"\n"]}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsxs)(n.p,{children:["You can see these files in the ",(0,r.jsx)(n.code,{children:"internal/configure-pipeline"})," directory. To\nconnect the new user input label, we will need to make sure the image both\nreads it in from the API input, and applies it to the right place in the customised resource outputs."]}),"\n",(0,r.jsx)(n.p,{children:"This requires you to change two of files:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Template: This template needs to hold reference to the ",(0,r.jsx)(n.code,{children:"costCentre"})," ",(0,r.jsx)(n.em,{children:"label"})]}),"\n",(0,r.jsxs)(n.li,{children:["Pipeline script: Inject the user's ",(0,r.jsx)(n.code,{children:"costCentre"})," ",(0,r.jsx)(n.em,{children:"actual value"})," into the resource template to generate the output"]}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"update-the-minimal-postgres-manifestyaml-to-add-in-the-property",children:["Update the ",(0,r.jsx)(n.code,{children:"minimal-postgres-manifest.yaml"})," to add in the property"]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"minimal-postgres-manifest.yaml"})," is the basic template for a Postgres. This is a valid Kubernetes document that the Postgres Operator can understand."]}),"\n",(0,r.jsxs)(n.p,{children:["You know every Postgres Resource needs the ",(0,r.jsx)(n.code,{children:"costCentre"}),". Change the metadata in ",(0,r.jsx)(n.code,{children:"minimal-postgres-manifest.yaml"})," to include the ",(0,r.jsx)(n.code,{children:"costCentre"})," label. This sets up a holding spot for the ",(0,r.jsx)(n.code,{children:"costCentre"})," value the user sends in the request."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",metastring:"jsx title=promise-postgresql/internal/configure-pipeline/resources/minimal-postgres-manifest.yaml",children:"labels:\n  costCentre: TBD\n"})}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"\ud83d\udc40\xa0\xa0Click here for the complete metadata section"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",metastring:"jsx title=promise-postgresql/internal/configure-pipeline/resources/minimal-postgres-manifest.yaml",children:"metadata:\n  name: acid-minimal-cluster\n  labels:\n    costCentre: TBD\n"})})]}),"\n",(0,r.jsxs)(n.h4,{id:"update-the-execute-pipelinesh-to-add-in-the-users-value",children:["Update the ",(0,r.jsx)(n.code,{children:"execute-pipeline.sh"})," to add in the user's value"]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"execute-pipeline.sh"})," (in ",(0,r.jsx)(n.code,{children:"promise-postgresql/internal/configure-pipeline"}),")\nruns when Kubernetes schedules the Pipeline. This script is where the transformation logic lives."]}),"\n",(0,r.jsxs)(n.p,{children:["You can see that the script is already parsing the request to\nidentify key user variables (",(0,r.jsx)(n.code,{children:"name"}),", ",(0,r.jsx)(n.code,{children:"namespace"}),", ",(0,r.jsx)(n.code,{children:"teamId"}),", etc). The\nscript then uses ",(0,r.jsx)(n.a,{href:"https://github.com/mikefarah/yq",children:"yq"})," to add those\nuser-provided values to the output document. You can do the same to process the\nuser's ",(0,r.jsx)(n.code,{children:"costCentre"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["In the ",(0,r.jsx)(n.code,{children:"execute-pipeline.sh"})]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Export another environment variable to store the value","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"export COST_CENTRE=$(yq eval '.spec.costCentre' /kratix/input/object.yaml)\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Add a new line for ",(0,r.jsx)(n.code,{children:"yq"})," process the label replacement","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:".metadata.labels.costCentre = env(COST_CENTRE) |\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"\ud83d\udc40\xa0\xa0Click here to view an example of the final script"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",metastring:"jsx title=promise-postgresql/internal/configure-pipeline/execute-pipeline.sh",children:'#!/usr/bin/env sh\n\nset -x\n\nbase_instance="/tmp/transfer/minimal-postgres-manifest.yaml"\n\n# Read current values from the provided request\nname="$(yq eval \'.metadata.name\' /kratix/input/object.yaml)"\n\nenv_type="$(yq eval \'.spec.env // "dev"\' /kratix/input/object.yaml)"\nteam="$(yq eval \'.spec.teamId // "acid"\' /kratix/input/object.yaml)"\ndbname="$(yq eval \'.spec.dbName // "postgres"\' /kratix/input/object.yaml)"\n\ninstance_name="${team}-${name}-postgresql"\n\nbackup="false"\nsize="1Gi"\ninstances="1"\nif [ $env_type = "prod" ]; then\n  backup="true"\n  size="10Gi"\n  instances="3"\nfi\n\n#highlight-next-line\nexport COST_CENTRE=$(yq eval \'.spec.costCentre\' /kratix/input/object.yaml)\n\n# Replace defaults with user provided values\ncat ${base_instance} |\n  yq eval "\n  #highlight-next-line\n    .metadata.labels.costCentre = env(COST_CENTRE) |\n    .metadata.namespace = \\"default\\" |\n    .metadata.name = \\"${instance_name}\\" |\n    .spec.enableLogicalBackup = ${backup} |\n    .spec.teamId = \\"${team}\\" |\n    .spec.volume.size = \\"${size}\\" |\n    .spec.numberOfInstances = ${instances} |\n    .spec.users = {\\"${team}\\": [\\"superuser\\", \\"createdb\\"]} |\n    .spec.databases = {\\"$dbname\\": \\"$team\\"} |\n    del(.spec.preparedDatabases)\n  " - > /kratix/output/postgres-instance.yaml\n'})})]}),"\n",(0,r.jsx)(n.h4,{id:"test-the-pipeline-locally",children:"Test the pipeline locally"}),"\n",(0,r.jsx)(n.p,{children:"You can easily validate your pipeline locally by building and running the Docker image with the correct volume mounts."}),"\n",(0,r.jsxs)(n.p,{children:["Check that you are in the ",(0,r.jsx)(n.code,{children:"promise-postgresql"})," directory, and run the block below to:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["create two directories inside ",(0,r.jsx)(n.code,{children:"internal/configure-pipeline"}),": ",(0,r.jsx)(n.code,{children:"input"})," and ",(0,r.jsx)(n.code,{children:"output"})]}),"\n",(0,r.jsx)(n.li,{children:"create expected input file (i.e., the request from your user)"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:'cd internal/configure-pipeline\nmkdir -p {input,output}\ncat > input/object.yaml <<EOF\n---\napiVersion: marketplace.kratix.io/v1alpha1\nkind: postgresql\nmetadata:\n  name: example\n  namespace: default\nspec:\n  costCentre: "rnd-10002"\n  env: dev\n  teamId: acid\n  dbName: bestdb\nEOF\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Now test the pipeline by doing a Docker build and run. ",(0,r.jsxs)(n.em,{children:["Check that, per the step above, you are still in the ",(0,r.jsx)(n.code,{children:"internal/configure-pipeline"})," directory."]})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:"docker build . --tag kratix-workshop/postgres-configure-pipeline:dev\ndocker run -v ${PWD}/input:/kratix/input -v ${PWD}/output:/kratix/output kratix-workshop/postgres-configure-pipeline:dev\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Now you can validate the ",(0,r.jsx)(n.code,{children:"output/postgres-instance.yaml"})," file."]}),"\n",(0,r.jsx)(n.p,{children:"It should be the base manifest with all the custom values inserted and look like the example below. If your output is different, go back and check the steps from above and the files in the directory. Repeat this process until your output matches the output below."}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"\ud83d\udc40\xa0\xa0Click here to view an example of expected output YAML"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",metastring:'jsx title="expected promise-postgresql/internal/configure-pipeline/kratix/output/postgres-instance.yaml"',children:'apiVersion: "acid.zalan.do/v1"\nkind: postgresql\nmetadata:\n  name: acid-example-postgresql\n  labels:\n    costCentre: "rnd-10002"\nspec:\n  teamId: "acid"\n  volume:\n    size: 1Gi\n  numberOfInstances: 1\n  users:\n    acid:\n      - superuser\n      - createdb\n  databases:\n    bestdb: acid\n  postgresql:\n    version: "15"\n  enableLogicalBackup: false\n'})})]}),"\n",(0,r.jsx)(n.h4,{id:"give-the-platform-access-to-your-image",children:"Give the platform access to your image"}),"\n",(0,r.jsxs)(n.p,{children:["Once you have made and validated all the image changes, you will need\nto make the newly created ",(0,r.jsx)(n.code,{children:"kratix-workshop/postgres-configure-pipeline:dev"})," image\naccessible."]}),"\n",(0,r.jsx)(n.p,{children:"If you created your clusters with KinD, you can load the image into local cache\nby running the command below. This will stop any remote DockerHub calls."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:"kind load docker-image kratix-workshop/postgres-configure-pipeline:dev --name platform\n"})}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsxs)("summary",{children:[(0,r.jsx)("strong",{children:"Click here"})," if your clusters were not created with KinD"]}),(0,r.jsx)(n.p,{children:"If you have not created your Kubernetes clusters with KinD, you will need to either:"}),(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Push the image to a Image repository (like Dockerhub), or "}),(0,r.jsxs)("li",{children:["Use the appropriate command to load the image (for example, ",(0,r.jsx)("code",{children:"minikube cache add"})," if you are using minikube)"]})]})]}),"\n",(0,r.jsxs)(n.h4,{id:"update-the-promises-workflows-value",children:["Update the Promise's ",(0,r.jsx)(n.code,{children:"workflows"})," value"]}),"\n",(0,r.jsx)(n.p,{children:"The new image is built and available on your platform cluster. Update your Promise to use the new image."}),"\n",(0,r.jsxs)(n.p,{children:["Open the Promise definition file (",(0,r.jsx)(n.code,{children:"promise-postgresql/promise.yaml"}),"). From the top of the file, navigate to ",(0,r.jsx)(n.code,{children:"spec"})," > ",(0,r.jsx)(n.code,{children:"workflows"})," > ",(0,r.jsx)(n.code,{children:"resource"})," > ",(0,r.jsx)(n.code,{children:"configure[0]"})," > ",(0,r.jsx)(n.code,{children:"spec"})," > ",(0,r.jsx)(n.code,{children:"containers[0]"})," > ",(0,r.jsx)(n.code,{children:"image"})," and replace the current value image with the newly created ",(0,r.jsx)(n.code,{children:"kratix-workshop/postgres-configure-pipeline:dev"})," image."]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsxs)("summary",{children:["\ud83d\udc40\xa0\xa0Click here to see the resulting Workflows section which should be indented under ",(0,r.jsx)("code",{children:"spec"})," in the Promise yaml"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",metastring:'jsx title="promise-postgresql/promise.yaml"',children:"apiVersion: platform.kratix.io/v1alpha1\nkind: Promise\nmetadata:\n  name: postgresql\nspec:\n  api:\n  # ...\n  workflows:\n    resource:\n      configure:\n        - apiVersion: platform.kratix.io/v1alpha1\n          kind: Pipeline\n          metadata:\n            name: configure-instance\n          spec:\n            containers:\n              - name: pipeline-stage-0\n                #highlight-next-line\n                image: kratix-workshop/postgres-configure-pipeline:dev\n  dependencies:\n  # ...\n"})})]}),"\n",(0,r.jsx)(n.h3,{id:"install-promise",children:"Step five: Install"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Install the modified Promise on your platform"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["You can now install your enhanced Postgres Promise on your platform. Make sure you're in the ",(0,r.jsx)(n.code,{children:"promise-postgresql/"})," directory."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:"kubectl --context $PLATFORM apply --filename promise.yaml\n"})}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsx)(n.p,{children:"Check that your Promise's resource is available."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:"kubectl --context $PLATFORM get crds\n"})}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsx)(n.p,{children:"You should see something similar to"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:"NAME                                     CREATED AT\nclusters.platform.kratix.io              2022-08-09T14:35:54Z\n# highlight-next-line\npostgresqls.marketplace.kratix.io        2022-08-09T14:54:26Z\npromises.platform.kratix.io              2022-08-09T14:35:54Z\nworkplacements.platform.kratix.io        2022-08-09T14:35:54Z\nworks.platform.kratix.io                 2022-08-09T14:35:55Z\n"})}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsx)("p",{children:(0,r.jsxs)(n.p,{children:["Check that the dependencies have been installed on the worker: ",(0,r.jsx)("br",{}),"\n",(0,r.jsxs)("sub",{children:[" (This may take a few minutes so ",(0,r.jsx)("code",{children:"--watch"})," will watch the command. Press ",(0,r.jsx)("kbd",{children:"Ctrl"}),"+",(0,r.jsx)("kbd",{children:"C"})," to stop watching) "]})]})}),"\n",(0,r.jsxs)(n.p,{children:["For Postgres, you can see in the Promise file that there are a number of RBAC\nresources, as well as a deployment that installs the Postgres Operator in the\nworker cluster. That means that when the Promise is successfully applied you\nwill see the ",(0,r.jsx)(n.code,{children:"postgres-operator"})," deployment in the worker cluster. That's also\nan indication that the Operator is ready to provision a new Postgres."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:"kubectl --context $WORKER --namespace default get pods\n"})}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsx)(n.p,{children:"You should see something similar to"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:"NAME                                 READY   STATUS    RESTARTS   AGE\npostgres-operator-6c6dbd4459-hcsg2   1/1     Running   0          1m\n"})}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsxs)(n.p,{children:["You have successfully released a new platform capability! Your users can request a Postgres Resource, and that Postgres will include their ",(0,r.jsx)(n.code,{children:"costCentre"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"verify-resource",children:"Step six: Verify"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Check it works: make a request to your platform for a Postgres Resource"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"verifying-your-kratix-promise-can-be-fulfilled",children:"Verifying your Kratix Promise can be fulfilled"}),"\n",(0,r.jsx)(n.p,{children:"Switching hats to test your release, now act as one of your users to make sure the Promise creates working Resource."}),"\n",(0,r.jsxs)(n.p,{children:["You need to create a request for a Resource, which is a valid Kubernetes\nresource. Like all Kubernetes resources, this must include all ",(0,r.jsx)(n.a,{href:"https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/#required-fields",children:"required\nfields"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"apiVersion"})," where the resource can be found. This is ",(0,r.jsx)(n.code,{children:"marketplace.kratix.io/v1alpha1"})," in your Postgres Promise (from ",(0,r.jsx)(n.code,{children:"spec.api.spec.group"})," in ",(0,r.jsx)(n.code,{children:"promise.yaml"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"kind"}),". This is ",(0,r.jsx)(n.code,{children:"postgresql"})," in your Postgres Promise (from ",(0,r.jsx)(n.code,{children:"spec.api.spec.name"})," in ",(0,r.jsx)(n.code,{children:"promise.yaml"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:["Values for required fields. Fields are ",(0,r.jsx)(n.code,{children:"teamId"}),", ",(0,r.jsx)(n.code,{children:"env"}),", ",(0,r.jsx)(n.code,{children:"dbName"})," and ",(0,r.jsx)(n.code,{children:"costCentre"})," in your Postgres Promise (from ",(0,r.jsx)(n.code,{children:"spec"})," > ",(0,r.jsx)(n.code,{children:"api"})," > ",(0,r.jsx)(n.code,{children:"spec"})," > ",(0,r.jsx)(n.code,{children:"versions"}),"[0] > ",(0,r.jsx)(n.code,{children:"schema"})," > ",(0,r.jsx)(n.code,{children:"openAPIV3Schema"})," > ",(0,r.jsx)(n.code,{children:"properties"})," > ",(0,r.jsx)(n.code,{children:"spec"})," > ",(0,r.jsx)(n.code,{children:"properties"})," in ",(0,r.jsx)(n.code,{children:"promise.yaml"}),")."]}),"\n",(0,r.jsx)(n.li,{children:"A unique name and namespace combination."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["In the sample request (",(0,r.jsx)(n.code,{children:"promise-postgresql/resource-request.yaml"}),") add\nthe additional ",(0,r.jsx)(n.code,{children:"costCentre"})," field as a sibling to the other fields under ",(0,r.jsx)(n.code,{children:"spec"}),"\nwith any valid input. For example, ",(0,r.jsx)(n.code,{children:'costCentre: "rnd-10002"'}),"."]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"\ud83d\udc40\xa0\xa0Click here for the full Postgres Resource definition"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",metastring:'jsx title="promise-postgresql/resource-request.yaml"',children:'apiVersion: marketplace.kratix.io/v1alpha1\nkind: postgresql\nmetadata:\n  name: example\n  namespace: default\nspec:\n  costCentre: "rnd-10002"\n  env: dev\n  teamId: acid\n  dbName: bestdb\n'})})]}),"\n",(0,r.jsx)(n.p,{children:"Then apply the request file to the platform cluster:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:"kubectl --context $PLATFORM apply --filename resource-request.yaml\n"})}),"\n",(0,r.jsx)(n.p,{children:"We will validate the outcomes of this command in the next section."}),"\n",(0,r.jsx)(n.h4,{id:"validating-the-created-postgres",children:"Validating the created Postgres"}),"\n",(0,r.jsx)(n.p,{children:"Back as a platform engineer, you want to ensure that the platform and Promise\nbehaved as it should when creating the Resources and that the Resources have\nmet the requirements for the feature."}),"\n",(0,r.jsxs)(n.p,{children:["After you applied the request in the step above, you should\neventually see a new pod executing the\n",(0,r.jsx)(n.code,{children:"execute-pipeline.sh"})," script you created."]}),"\n",(0,r.jsx)("p",{children:(0,r.jsxs)(n.p,{children:["Check by listing the pods on the platform: ",(0,r.jsx)("br",{}),"\n",(0,r.jsxs)("sub",{children:[" (This may take a few minutes so ",(0,r.jsx)("code",{children:"--watch"})," will watch the command. Press ",(0,r.jsx)("kbd",{children:"Ctrl"}),"+",(0,r.jsx)("kbd",{children:"C"})," to stop watching) "]})]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:"kubectl --context $PLATFORM get pods --watch\n"})}),"\n",(0,r.jsx)(n.p,{children:"You should see something similar to"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:"NAME                                          READY   STATUS      RESTARTS   AGE\nconfigure-pipeline-postgresql-default-SHA     0/1     Completed   0          1h\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Then view the Pipeline logs by running ",(0,r.jsxs)(n.em,{children:["(replace SHA with the value from the output of ",(0,r.jsx)(n.code,{children:"get pods"})," above)"]}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:"kubectl --context $PLATFORM logs --container xaas-configure-pipeline-stage-0 pods/configure-pipeline-postgresql-default-SHA\n"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsxs)(n.p,{children:["On the worker cluster, you will eventually see a Postgres service as a two-pod cluster in the ",(0,r.jsx)("em",{children:"Running"})," state with the name defined by the Resource definition (",(0,r.jsx)("code",{children:"postgres-resource-request.yaml"}),").",(0,r.jsx)("br",{}),"\n",(0,r.jsxs)("sub",{children:["(This may take a few minutes so ",(0,r.jsx)("code",{children:"--watch"})," will watch the command. Press ",(0,r.jsx)("kbd",{children:"Ctrl"}),"+",(0,r.jsx)("kbd",{children:"C"})," to stop watching)"]})]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:"kubectl --context $WORKER get pods --watch\n"})}),"\n",(0,r.jsx)(n.p,{children:"You should see something similar to"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"NAME                             READY   STATUS    RESTARTS   AGE\nacid-example-postgresql-0        1/1     Running   0          1h\n...\n"})}),"\n",(0,r.jsxs)(n.p,{children:["For the finance team, the pods will provide cost tracking through your new ",(0,r.jsx)(n.code,{children:"costCentre"})," label. This can be confirmed by only selecting pods that contain the provided cost centre value:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:"kubectl --context $WORKER get pods --selector costCentre=rnd-10002\n"})}),"\n",(0,r.jsx)(n.p,{children:"You should see something similar to"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"NAME                          READY   STATUS    RESTARTS   AGE\nacid-example-postgresql-0     1/1     Running   0          1h\n"})}),"\n",(0,r.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,r.jsx)(n.p,{children:"Your platform has a new Promise. Your users have access to a new service from\nthe Promise. Your finance team has the ability to track service usage. Well\ndone!"}),"\n",(0,r.jsx)(n.p,{children:"To recap the steps we took:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"\u2705\xa0\xa0Acquired a base Promise"}),"\n",(0,r.jsxs)(n.li,{children:["\u2705\xa0\xa0Changed the Promise so that ",(0,r.jsx)(n.em,{children:"the user who wants a Postgres"})," knows they need to include their ",(0,r.jsx)(n.code,{children:"costCentre"})," name when they make their request to the platform"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705\xa0\xa0Changed the Promise so that ",(0,r.jsx)(n.em,{children:"the operator dependency"})," that creates the Resource knows to apply the new ",(0,r.jsx)(n.code,{children:"costCentre"})," label ",(0,r.jsx)(n.code,{children:"costCentre"})]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705\xa0\xa0Changed the Promise so that ",(0,r.jsx)(n.em,{children:"the Workflow"})," knows how to add the user's ",(0,r.jsx)(n.code,{children:"costCentre"})," to the request for the Postgres"]}),"\n",(0,r.jsx)(n.li,{children:"\u2705\xa0\xa0Installed the modified Promise on your platform"}),"\n",(0,r.jsx)(n.li,{children:"\u2705\xa0\xa0Checked it works: make a request to your platform for a Postgres Resource"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"cleanup",children:"Clean up environment"}),"\n",(0,r.jsx)(n.p,{children:"To clean up your environment first delete your request for the Postgres Resource"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"kubectl --context $PLATFORM delete --filename resource-request.yaml\n"})}),"\n",(0,r.jsx)(n.p,{children:"Verify the workloads belonging to the request have been deleted in the worker"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:"kubectl --context $WORKER get pods\n"})}),"\n",(0,r.jsx)(n.p,{children:"Now that the Resource has been deleted you can delete the Promise"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"kubectl --context $PLATFORM delete --filename promise.yaml\n"})}),"\n",(0,r.jsx)(n.p,{children:"Verify the Dependencies are deleted from the worker"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:"kubectl --context $WORKER get pods\n"})})]})}function l(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}const c={description:"Learn how to extend an existing Promise, from updating the API to changing the Workflow behaviour",title:"Enhancing a Promise"},d=void 0,h={id:"main/guides/enhancing-a-promise",title:"Enhancing a Promise",description:"Learn how to extend an existing Promise, from updating the API to changing the Workflow behaviour",source:"@site/docs/main/04-guides/05-enhancing-a-promise.mdx",sourceDirName:"main/04-guides",slug:"/main/guides/enhancing-a-promise",permalink:"/main/guides/enhancing-a-promise",draft:!1,unlisted:!1,editUrl:"https://github.com/syntasso/kratix-docs/tree/main/docs/main/04-guides/05-enhancing-a-promise.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{description:"Learn how to extend an existing Promise, from updating the API to changing the Workflow behaviour",title:"Enhancing a Promise"},sidebar:"mainSidebar",previous:{title:"Writing a Promise",permalink:"/main/guides/writing-a-promise"},next:{title:"Adding a new Destination",permalink:"/main/guides/scheduling"}},p={},u=[{value:"Using Kratix to support your organisation",id:"using-kratix-to-support-your-organisation",level:2},{value:"From off-the-shelf to ready for the paved path",id:"from-off-the-shelf-to-ready-for-the-paved-path",level:2},{value:"The scenario",id:"the-scenario",level:3},{value:"Step one: Get a base Promise",id:"base-promise",level:3},{value:"Step two: <code>api</code>",id:"api",level:3},{value:"About <code>api</code>",id:"about-api",level:4},{value:"Update the <code>api</code>",id:"update-the-api",level:4},{value:"Step three: <code>dependencies</code>",id:"dependencies",level:3},{value:"About <code>dependencies</code>",id:"about-dependencies",level:4},{value:"Update <code>dependencies</code>",id:"update-dependencies",level:4},{value:"Step four: <code>workflows</code>",id:"workflows",level:3},{value:"About <code>workflows</code>",id:"about-workflows",level:4},{value:"Update the <code>minimal-postgres-manifest.yaml</code> to add in the property",id:"update-the-minimal-postgres-manifestyaml-to-add-in-the-property",level:4},{value:"Update the <code>execute-pipeline.sh</code> to add in the user&#39;s value",id:"update-the-execute-pipelinesh-to-add-in-the-users-value",level:4},{value:"Test the pipeline locally",id:"test-the-pipeline-locally",level:4},{value:"Give the platform access to your image",id:"give-the-platform-access-to-your-image",level:4},{value:"Update the Promise&#39;s <code>workflows</code> value",id:"update-the-promises-workflows-value",level:4},{value:"Step five: Install",id:"install-promise",level:3},{value:"Step six: Verify",id:"verify-resource",level:3},{value:"Verifying your Kratix Promise can be fulfilled",id:"verifying-your-kratix-promise-can-be-fulfilled",level:4},{value:"Validating the created Postgres",id:"validating-the-created-postgres",level:4},{value:"Summary",id:"summary",level:2},{value:"Clean up environment",id:"cleanup",level:2}];function m(e){const n={a:"a",p:"p",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.ZP,{}),"\n",(0,r.jsx)(l,{}),"\n","\n",(0,r.jsx)("p",{style:{"font-size":"2rem"},children:(0,r.jsx)("strong",{children:"\ud83c\udf89 Congratulations!"})}),"\n",(0,r.jsxs)(n.p,{children:["\u2705\xa0\xa0 You have enhanced a Kratix Promise to suit your organisation's needs. ",(0,r.jsx)("br",{}),"\n\ud83d\udc49\ud83c\udffe\xa0\xa0 Let's ",(0,r.jsx)(n.a,{href:"./scheduling",children:"add a new Worker"}),"."]})]})}function x(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>a,a:()=>o});var r=s(7294);const t={},i=r.createContext(t);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);