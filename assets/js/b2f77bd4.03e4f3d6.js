"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[4671],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>h});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=n.createContext({}),u=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(i.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(r),m=a,h=p["".concat(i,".").concat(m)]||p[m]||d[m]||s;return r?n.createElement(h,o(o({ref:t},c),{},{components:r})):n.createElement(h,o({ref:t},c))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=r.length,o=new Array(s);o[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[p]="string"==typeof e?e:a,o[1]=l;for(var u=2;u<s;u++)o[u]=r[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},5162:(e,t,r)=>{r.d(t,{Z:()=>o});var n=r(7294),a=r(6010);const s="tabItem_Ymn6";function o(e){let{children:t,hidden:r,className:o}=e;return n.createElement("div",{role:"tabpanel",className:(0,a.Z)(s,o),hidden:r},t)}},4866:(e,t,r)=>{r.d(t,{Z:()=>N});var n=r(7462),a=r(7294),s=r(6010),o=r(2466),l=r(6550),i=r(1980),u=r(7392),c=r(12);function p(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:r,attributes:n,default:a}}=e;return{value:t,label:r,attributes:n,default:a}}))}function d(e){const{values:t,children:r}=e;return(0,a.useMemo)((()=>{const e=t??p(r);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,r])}function m(e){let{value:t,tabValues:r}=e;return r.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:r}=e;const n=(0,l.k6)(),s=function(e){let{queryString:t=!1,groupId:r}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:t,groupId:r});return[(0,i._X)(s),(0,a.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(n.location.search);t.set(s,e),n.replace({...n.location,search:t.toString()})}),[s,n])]}function k(e){const{defaultValue:t,queryString:r=!1,groupId:n}=e,s=d(e),[o,l]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=r.find((e=>e.default))??r[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:s}))),[i,u]=h({queryString:r,groupId:n}),[p,k]=function(e){let{groupId:t}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,s]=(0,c.Nk)(r);return[n,(0,a.useCallback)((e=>{r&&s.set(e)}),[r,s])]}({groupId:n}),b=(()=>{const e=i??p;return m({value:e,tabValues:s})?e:null})();(0,a.useLayoutEffect)((()=>{b&&l(b)}),[b]);return{selectedValue:o,selectValue:(0,a.useCallback)((e=>{if(!m({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),k(e)}),[u,k,s]),tabValues:s}}var b=r(2389);const f="tabList__CuJ",g="tabItem_LNqP";function y(e){let{className:t,block:r,selectedValue:l,selectValue:i,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,o.o5)(),d=e=>{const t=e.currentTarget,r=c.indexOf(t),n=u[r].value;n!==l&&(p(t),i(n))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const r=c.indexOf(e.currentTarget)+1;t=c[r]??c[0];break}case"ArrowLeft":{const r=c.indexOf(e.currentTarget)-1;t=c[r]??c[c.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":r},t)},u.map((e=>{let{value:t,label:r,attributes:o}=e;return a.createElement("li",(0,n.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>c.push(e),onKeyDown:m,onClick:d},o,{className:(0,s.Z)("tabs__item",g,o?.className,{"tabs__item--active":l===t})}),r??t)})))}function v(e){let{lazy:t,children:r,selectedValue:n}=e;const s=(Array.isArray(r)?r:[r]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===n));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},s.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function w(e){const t=k(e);return a.createElement("div",{className:(0,s.Z)("tabs-container",f)},a.createElement(y,(0,n.Z)({},e,t)),a.createElement(v,(0,n.Z)({},e,t)))}function N(e){const t=(0,b.Z)();return a.createElement(w,(0,n.Z)({key:String(t)},e))}},1567:(e,t,r)=>{r.d(t,{ZP:()=>o});var n=r(7462),a=(r(7294),r(3905));const s={toc:[]};function o(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Following the previous step of this tutorial, you should now\nhave a deployment of both Kratix and MinIO running on your Platform cluster\nwith no installed Promises."),(0,a.kt)("p",null,"You should also have two environment variables, ",(0,a.kt)("inlineCode",{parentName:"p"},"PLATFORM")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"WORKER"),"."),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Verify the current state of your installation"),"Run:",(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context $PLATFORM get deployments --namespace kratix-platform-system\n")),(0,a.kt)("p",null,"The above command will give an output similar to:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell-session"},"NAME                                 READY   UP-TO-DATE   AVAILABLE   AGE\nkratix-platform-controller-manager   1/1     1            1           1h\nminio                                1/1     1            1           1h\n")),(0,a.kt)("p",null,"You should also have a State Store created and configured to point to the\n",(0,a.kt)("inlineCode",{parentName:"p"},"kratix")," bucket on MinIO. Verify the ",(0,a.kt)("inlineCode",{parentName:"p"},"bucketstatestores"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context $PLATFORM get bucketstatestores.platform.kratix.io\n")),(0,a.kt)("p",null,"The above command will give an output similar to:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell-session"},"NAME          AGE\nminio-store   1h\n")),(0,a.kt)("p",null,"Verify there are no existing Promises:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context $PLATFORM get promises\n")),(0,a.kt)("p",null,"Verify your cluster environment variables are set:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"env | grep 'PLATFORM\\|WORKER'\n")),(0,a.kt)("p",null,"which should result in:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell-session"},"WORKER=kind-worker\nPLATFORM=kind-platform\n"))),(0,a.kt)("p",null,"If you are are not continuing from the previous section, or your outputs do not align with the validation, please refer back to\n",(0,a.kt)("a",{parentName:"p",href:"installing-kratix"},"Installing Kratix"),"."))}o.isMDXComponent=!0},2167:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>k,frontMatter:()=>u,metadata:()=>p,toc:()=>m});var n=r(7462),a=(r(7294),r(3905)),s=r(4996),o=r(4866),l=r(5162),i=r(1567);const u={description:"Extracting shared dependencies across multiple requests",title:"Extracting shared dependencies",id:"shared-dependencies",slug:"../shared-dependencies"},c=void 0,p={unversionedId:"workshop/part-ii/shared-dependencies",id:"workshop/part-ii/shared-dependencies",title:"Extracting shared dependencies",description:"Extracting shared dependencies across multiple requests",source:"@site/docs/workshop/part-ii/03-dependencies.md",sourceDirName:"workshop/part-ii",slug:"/workshop/shared-dependencies",permalink:"/docs/workshop/shared-dependencies",draft:!1,editUrl:"https://github.com/syntasso/kratix-docs/tree/main/docs/workshop/part-ii/03-dependencies.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{description:"Extracting shared dependencies across multiple requests",title:"Extracting shared dependencies",id:"shared-dependencies",slug:"../shared-dependencies"},sidebar:"workshopSidebar",previous:{title:"Delivering your service on demand",permalink:"/docs/workshop/service-on-demand"},next:{title:"Schedule Promises",permalink:"/docs/workshop/schedule-promise"}},d={},m=[{value:"Understanding Kratix Promise dependencies",id:"understanding-dependencies",level:2},{value:"Splitting out Elastic Cloud Kubernetes (ECK) dependencies",id:"splitting-dependencies",level:2},{value:"Worker Cluster Resources",id:"worker-cluster-resources",level:3},{value:"Remove shared dependencies from the pipeline",id:"remove-shared-dependencies-from-the-pipeline",level:3},{value:"Remove one-off files (i.e. dependencies) from pipeline",id:"remove-one-off-files-ie-dependencies-from-pipeline",level:4},{value:"Run the test suite, see it passing",id:"run-the-test-suite-see-it-passing",level:4},{value:"Add shared dependencies as Worker Cluster Resources",id:"add-shared-dependencies-as-worker-cluster-resources",level:3},{value:"Download the WorkerResourcesBuilder",id:"download-the-workerresourcesbuilder",level:4},{value:"Install the Promise",id:"install-promise",level:2},{value:"Prerequisite setup",id:"prerequisite-setup",level:3},{value:"Install the Promise",id:"install-the-promise",level:3},{value:"Make multiple Resource Requests",id:"resource-requests",level:2},{value:"Summary",id:"summary",level:2},{value:"Clean up environment",id:"cleanup",level:2},{value:"\ud83c\udf89 \xa0 Congratulations!",id:"--congratulations",level:2}],h={toc:m};function k(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},h,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This is Part 2 of ",(0,a.kt)("a",{parentName:"p",href:"intro"},"a series")," illustrating how Kratix works. ",(0,a.kt)("br",null),"\n\ud83d\udc48\ud83c\udffe","\xa0","\xa0"," Previous: ",(0,a.kt)("a",{parentName:"p",href:"service-on-demand"},"Delivering your service on demand")," ",(0,a.kt)("br",null),"\n\ud83d\udc49\ud83c\udffe","\xa0","\xa0"," Next: ",(0,a.kt)("a",{parentName:"p",href:"schedule-promise"},"Intentionally schedule Promise resources")),(0,a.kt)("hr",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"In this tutorial, you will")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#understanding-dependencies"},"Understanding Kratix Promise dependencies")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#splitting-dependencies"},"Splitting out Elastic Cloud Kubernetes (ECK) dependencies")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#install-promise"},"Install the Promise with separate dependencies")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#resource-requests"},"Make multiple Resource Requests ")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#summary"},"Summary")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#cleanup"},"Clean up environment"))),(0,a.kt)("h2",{id:"understanding-dependencies"},"Understanding Kratix Promise dependencies"),(0,a.kt)("h2",{id:"splitting-dependencies"},"Splitting out Elastic Cloud Kubernetes (ECK) dependencies"),(0,a.kt)("p",null,"After the previous tutorial step, the ECK Promise bundled all necessary provisioning\nsteps into the Promise pipeline. This made it possible to only do a single Resource Request\nbecause of duplication across the requests."),(0,a.kt)("p",null,"The pipeline ",(0,a.kt)("inlineCode",{parentName:"p"},"run")," script followed the installation instructions in the ECK\ndocumentation ",(0,a.kt)("a",{parentName:"p",href:"https://www.elastic.co/guide/en/cloud-on-k8s/2.8/k8s-deploy-eck.html"},"here"),".\nNamely, the two separate files downloaded, the CRDs and the operator. Then creating\nthe required instances of the CRDs."),(0,a.kt)("p",null,"The operator and CRDs are a set of resources that only need to (and can be)\ninstalled once in a cluster. After they are installed they can serve as many\nrequests as needed. Therefore, if you want to support provisioning multiple\nresource requests you will need to change how the CRDs and operator resources are installed\ninto the cluster so that there is not a conflict."),(0,a.kt)("img",{src:(0,s.Z)("/img/docs/workshop/operator-as-shared-dependency.png")}),(0,a.kt)("h3",{id:"worker-cluster-resources"},"Worker Cluster Resources"),(0,a.kt)("p",null,"Currently, both the operator and the request for an instance from the operator are generated in the pipeline.\nKratix has the concept of ",(0,a.kt)("inlineCode",{parentName:"p"},"workerClusterResources")," which can be useful to manage different\ntypes of resources. While a pipeline runs on every request for a resource, the Worker Cluster\nResources are a set of resources that only need to be installed once per cluster for the given Promise."),(0,a.kt)("p",null,"A simple use cases may be to create a shared namespace that all subsequent\nresource requests send there output to. In the case of this ECK Promise, you can\ninstall the Operator and CRDs as a Worker Cluster Resources."),(0,a.kt)("h3",{id:"remove-shared-dependencies-from-the-pipeline"},"Remove shared dependencies from the pipeline"),(0,a.kt)("p",null,"The following steps will refactor this Promise to instead separate shared dependencies from individual request resources:"),(0,a.kt)("img",{src:(0,s.Z)("/img/docs/workshop/promise-with-dependencies.png")}),(0,a.kt)("h4",{id:"remove-one-off-files-ie-dependencies-from-pipeline"},"Remove one-off files (i.e. dependencies) from pipeline"),(0,a.kt)("p",null,"First you will need to remove the Operator and CRD files from the pipeline ",(0,a.kt)("inlineCode",{parentName:"p"},"run")," script in order in order\nto stop them from being created on all Resource Requests."),(0,a.kt)("p",null,"Open the ",(0,a.kt)("inlineCode",{parentName:"p"},"pipeline/run")," file and remove lines 9-16. This will remove both curl commands which download the CRDs and controller resources."),(0,a.kt)("h4",{id:"run-the-test-suite-see-it-passing"},"Run the test suite, see it passing"),(0,a.kt)("p",null,"With the downloads removed, you can re-run the test suite and see that the resulting files no long include\nthe Operator or the CRDs."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"scripts/test-pipeline\n")),(0,a.kt)("p",null,"Once the execution completes, use the following command to check the files generated by the pipeline:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"tree test\n")),(0,a.kt)("p",null,"Verify that the output shows only the following files:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell-session"},"\ud83d\udcc2 test\n\u251c\u2500\u2500 input\n\u2502   \u2514\u2500\u2500 object.yaml\n\u251c\u2500\u2500 metadata\n\u2514\u2500\u2500 output\n    \u251c\u2500\u2500 beats.yaml\n    \u251c\u2500\u2500 elasticsearch.yaml\n    \u2514\u2500\u2500 kibana.yaml\n")),(0,a.kt)("h3",{id:"add-shared-dependencies-as-worker-cluster-resources"},"Add shared dependencies as Worker Cluster Resources"),(0,a.kt)("p",null,"Removing the files from the pipeline is not enough. You must now also add them to the Promise as Worker Cluster Resources."),(0,a.kt)("h4",{id:"download-the-workerresourcesbuilder"},"Download the WorkerResourcesBuilder"),(0,a.kt)("p",null,"Run the following command to create a ",(0,a.kt)("inlineCode",{parentName:"p"},"resources")," directory where you can store these files and any others that you may want to depend on for the Promise installation:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir -p resources\n\ncurl --silent --location --output resources/elastic-crds.yaml https://download.elastic.co/downloads/eck/2.8.0/crds.yaml\ncurl --silent --location --output resources/elastic-operator.yaml https://download.elastic.co/downloads/eck/2.8.0/operator.yaml\n")),(0,a.kt)("p",null,"Once stored locally, you will need to add these resources to the Promise file. The resources are added\nas a list under ",(0,a.kt)("inlineCode",{parentName:"p"},"workerClusterResources")," which can tricky with formatting and require some subtle white\nspace changes."),(0,a.kt)("p",null,"To make this step simpler there is a ",(0,a.kt)("em",{parentName:"p"},"very basic")," tool which grabs all YAML\ndocuments from a single directory and injects them correctly into the ",(0,a.kt)("inlineCode",{parentName:"p"},"workerClusterResources"),"\nfield in the ",(0,a.kt)("inlineCode",{parentName:"p"},"promise.yaml"),"."),(0,a.kt)("p",null,"To use this tool, you will need to download the correct binary for your computer\nfrom ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/syntasso/kratix/releases/tag/v0.0.3"},"GitHub releases"),":"),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"If you are using Instruqt, this binary has already been made available to you.\nAll you need is:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir -p bin\ncp /root/bin/worker-resource-builder ./bin\n"))),(0,a.kt)(o.Z,{mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"darwin-amd64",label:"Intel Mac",default:!0,mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"mkdir -p bin\ncurl -sLo ./bin/worker-resource-builder.tar.gz https://github.com/syntasso/kratix/releases/download/v0.0.3/worker-resource-builder_0.0.3_darwin_amd64.tar.gz\ntar -xvf ./bin/worker-resource-builder.tar.gz -C ./bin\nmv ./bin/worker-resource-builder-v* ./bin/worker-resource-builder\nchmod +x ./bin/worker-resource-builder\n"))),(0,a.kt)(l.Z,{value:"darwin-arm64",label:"Apple Silicon Mac",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"mkdir -p bin\ncurl -sLo ./bin/worker-resource-builder.tar.gz https://github.com/syntasso/kratix/releases/download/v0.0.3/worker-resource-builder_0.0.3_darwin_arm64.tar.gz\ntar -xvf ./bin/worker-resource-builder.tar.gz -C ./bin\nmv ./bin/worker-resource-builder-v* ./bin/worker-resource-builder\nchmod +x ./bin/worker-resource-builder\n"))),(0,a.kt)(l.Z,{value:"linux-arm64",label:"Linux ARM64",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"mkdir -p bin\ncurl -sLo ./bin/worker-resource-builder.tar.gz https://github.com/syntasso/kratix/releases/download/v0.0.3/worker-resource-builder_0.0.3_linux_arm64.tar.gz\ntar -xvf ./bin/worker-resource-builder.tar.gz -C ./bin\nmv ./bin/worker-resource-builder-v* ./bin/worker-resource-builder\nchmod +x ./bin/worker-resource-builder\n"))),(0,a.kt)(l.Z,{value:"linux-amd64",label:"Linux AMD64",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"mkdir -p bin\ncurl -sLo ./bin/worker-resource-builder.tar.gz https://github.com/syntasso/kratix/releases/download/v0.0.3/worker-resource-builder_0.0.3_linux_amd64.tar.gz\ntar -xvf ./bin/worker-resource-builder.tar.gz -C ./bin\nmv ./bin/worker-resource-builder-v* ./bin/worker-resource-builder\nchmod +x ./bin/worker-resource-builder\n")))),(0,a.kt)("p",null,"Once installed, you can see how to use the binary by running the following help command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"./bin/worker-resource-builder --help\n")),(0,a.kt)("p",null,"The above command will give an output similar to:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell-session"},"Usage of ./bin/worker-resource-builder:\n  -k8s-resources-directory string\n        Absolute Path of k8s resources to build workerClusterResources from\n  -promise string\n        Absolute path of Promise to insert workerClusterResources into\n")),(0,a.kt)("p",null,"Given this usage instructions, you can run the following command to overwrite the current Promise file to include the CRD and controller resources:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'echo "current promise length is: $(wc -l promise.yaml)"\n./bin/worker-resource-builder -k8s-resources-directory ./resources -promise promise.yaml | tee tmp-promise.yaml  >/dev/null; mv tmp-promise.yaml promise.yaml\necho "new promise length is: $(wc -l promise.yaml)"\n')),(0,a.kt)("p",null,"The above command will give an output similar to:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell-session"},"current promise length is: 35 promise.yaml\nnew promise length is: 11398 promise.yaml\n")),(0,a.kt)("p",null,"In this output, you can see that the the files in the ",(0,a.kt)("inlineCode",{parentName:"p"},"resources")," directory have now been added to the ",(0,a.kt)("inlineCode",{parentName:"p"},"promise.yaml")," file. You can also check the top of the newly edited ",(0,a.kt)("inlineCode",{parentName:"p"},"promise.yaml")," and see that these resources have been added as list items under the ",(0,a.kt)("inlineCode",{parentName:"p"},"workerClusterResources")," key."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"You may notice that the length of the files in ",(0,a.kt)("inlineCode",{parentName:"p"},"resources")," is shorter than what was added to the ",(0,a.kt)("inlineCode",{parentName:"p"},"promise.yaml")," file. This is because the ",(0,a.kt)("inlineCode",{parentName:"p"},"worker-resources-builder")," binary reformatted long lines into more readable lines with a max length of 90."),(0,a.kt)("p",{parentName:"admonition"},"If you have ",(0,a.kt)("a",{parentName:"p",href:"https://mikefarah.gitbook.io/yq/"},"yq")," installed you can verify the total number of documents in both matches with the following command:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"diff <(yq ea '[.] | length' resources/*) <(yq '.spec.workerClusterResources | length' promise.yaml)\n")),(0,a.kt)("p",{parentName:"admonition"},"No difference in number of YAML resources will result in no output.")),(0,a.kt)("h2",{id:"install-promise"},"Install the Promise"),(0,a.kt)("h3",{id:"prerequisite-setup"},"Prerequisite setup"),(0,a.kt)(i.ZP,{mdxType:"PartialVerifyKratixWithOutPromises"}),(0,a.kt)("h3",{id:"install-the-promise"},"Install the Promise"),(0,a.kt)("p",null,"With the pipeline image available, you can now install the updated Promise:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context ${PLATFORM} create --filename promise.yaml\n")),(0,a.kt)("p",null,"To validate the Promise has been installed, you can list all Promises by running:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context kind-platform get promises\n")),(0,a.kt)("p",null,"Your output will show the ",(0,a.kt)("inlineCode",{parentName:"p"},"elastic-cloud")," Promise:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell-session"},"NAME            AGE\nelastic-cloud   10s\n")),(0,a.kt)("p",null,"In addition, you can now verify that the dependencies have been installed on the worker cluster:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context ${WORKER} get crds | grep elastic\nkubectl --context ${WORKER} get pods -n elastic-system\n")),(0,a.kt)("p",null,"The above command will give an output similar to:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell-session"},"agents.agent.k8s.elastic.co                            2023-02-01T12:00:00Z\napmservers.apm.k8s.elastic.co                          2023-02-01T12:00:00Z\nbeats.beat.k8s.elastic.co                              2023-02-01T12:00:00Z\nelasticmapsservers.maps.k8s.elastic.co                 2023-02-01T12:00:00Z\nelasticsearchautoscalers.autoscaling.k8s.elastic.co    2023-02-01T12:00:00Z\nelasticsearches.elasticsearch.k8s.elastic.co           2023-02-01T12:00:00Z\nenterprisesearches.enterprisesearch.k8s.elastic.co     2023-02-01T12:00:00Z\nkibanas.kibana.k8s.elastic.co                          2023-02-01T12:00:00Z\nlogstashes.logstash.k8s.elastic.co                     2023-02-01T12:00:00Z\nstackconfigpolicies.stackconfigpolicy.k8s.elastic.co   2023-02-01T12:00:00Z\n\nNAME                 READY   STATUS    RESTARTS   AGE\nelastic-operator-0   1/1     Running   0          1m\n")),(0,a.kt)("h2",{id:"resource-requests"},"Make multiple Resource Requests"),(0,a.kt)("p",null,"Now that you have installed the operator and CRDs as a part of Promise installation,\nyou can once again don the Application Engineer hat and return to the original goal of\nmaking more than one Resource Request to the single ECK Promise."),(0,a.kt)("p",null,"Just as you did in the last step, you will need to make two Resource Requests with\ntwo different resource names:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context $PLATFORM apply --filename resource-request.yaml\ncat resource-request.yaml | \\\n  sed 's/name: example/name: second-request/' | \\\n  kubectl --context $PLATFORM apply --filename -\n")),(0,a.kt)("p",null,"With these two requests made, you can see both pipelines running simultaneously:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context $PLATFORM get pods\n")),(0,a.kt)("p",null,"The above command will give an output similar to:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell-session"},"NAME                                           READY   STATUS      RESTARTS   AGE\nrequest-pipeline-elastic-cloud-default-01650   0/1     Completed   0          106s\nrequest-pipeline-elastic-cloud-default-99684   0/1     Completed   0          11s\n")),(0,a.kt)("p",null,"And once completed you will be able to watch for two sets of ECK resources being deployed to the Worker cluster:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context $WORKER get pods --watch\n")),(0,a.kt)("p",null,"Once you see all 6 pods in the output similar to below, you can use ",(0,a.kt)("kbd",null,"Ctrl"),"+",(0,a.kt)("kbd",null,"C")," to exit the watch mode:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell-session"},"NAME                                 READY   STATUS    RESTARTS   AGE\nexample-es-default-0                 1/1     Running   0          2m21s\nexample-kb-d97b489b-9twhq            1/1     Running   0          2m21s\nexample-beat-metricbeat-frpv7        1/1     Running   0          2m21s\nsecond-request-es-default-0          1/1     Running   0          42s\nsecond-request-kb-6cdc9594ff-7dnnm   1/1     Running   0          42s\n")),(0,a.kt)("h2",{id:"summary"},"Summary"),(0,a.kt)("p",null,"And with that, you have reduced duplication by delivering shared dependencies separately from the on-demand service! While this workshop only showcases two instances both deployed to the same cluster, this architecture can easily be used to support an unlimited number of instances across an unlimited number of clusters."),(0,a.kt)("p",null,"To recap the steps you took:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u2705","\xa0","\xa0","Evaluated what resources are shared dependencies"),(0,a.kt)("li",{parentName:"ol"},"\u2705","\xa0","\xa0","Moved any shared dependencies from pipeline resources to worker cluster resources"),(0,a.kt)("li",{parentName:"ol"},"\u2705","\xa0","\xa0","Viewed the dependency set up on Promise install"),(0,a.kt)("li",{parentName:"ol"},"\u2705","\xa0","\xa0","Successfully request more than one instance of ECK")),(0,a.kt)("h2",{id:"cleanup"},"Clean up environment"),(0,a.kt)("p",null,"Before moving on, please remove the ECK Promise from your cluster."),(0,a.kt)("p",null,"To delete all the Promises:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context $PLATFORM delete promises --all\n")),(0,a.kt)("h2",{id:"--congratulations"},"\ud83c\udf89 ","\xa0"," Congratulations!"),(0,a.kt)("p",null,"\u2705","\xa0","\xa0","Your Promise can deliver on-demand services that have shared dependencies.",(0,a.kt)("br",null),"\n\ud83d\udc49\ud83c\udffe","\xa0","\xa0","Next you will ",(0,a.kt)("a",{parentName:"p",href:"schedule-promise"},"Intentionally schedule Promise resources"),"."))}k.isMDXComponent=!0}}]);