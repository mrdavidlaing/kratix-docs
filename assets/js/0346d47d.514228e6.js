"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[5481],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var n=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var l=n.createContext({}),u=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=u(a),d=o,h=c["".concat(l,".").concat(d)]||c[d]||m[d]||r;return a?n.createElement(h,s(s({ref:t},p),{},{components:a})):n.createElement(h,s({ref:t},p))}));function h(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,s=new Array(r);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:o,s[1]=i;for(var u=2;u<r;u++)s[u]=a[u];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},1567:(e,t,a)=>{a.d(t,{ZP:()=>s});var n=a(7462),o=(a(7294),a(3905));const r={toc:[]};function s(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,n.Z)({},r,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Following the previous step of this tutorial, you should now\nhave a deployment of both Kratix and MinIO running on your Platform cluster\nwith no installed Promises."),(0,o.kt)("p",null,"You should also have two environment variables, ",(0,o.kt)("inlineCode",{parentName:"p"},"PLATFORM")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"WORKER"),"."),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Verify the current state of your installation"),"Run:",(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context $PLATFORM get deployments --namespace kratix-platform-system\n")),(0,o.kt)("p",null,"The above command will give an output similar to:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell-session"},"NAME                                 READY   UP-TO-DATE   AVAILABLE   AGE\nkratix-platform-controller-manager   1/1     1            1           1h\nminio                                1/1     1            1           1h\n")),(0,o.kt)("p",null,"You should also have a State Store created and configured to point to the\n",(0,o.kt)("inlineCode",{parentName:"p"},"kratix")," bucket on MinIO. Verify the ",(0,o.kt)("inlineCode",{parentName:"p"},"bucketstatestores"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context $PLATFORM get bucketstatestores.platform.kratix.io\n")),(0,o.kt)("p",null,"The above command will give an output similar to:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell-session"},"NAME          AGE\nminio-store   1h\n")),(0,o.kt)("p",null,"Verify there are no existing Promises:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context $PLATFORM get promises\n")),(0,o.kt)("p",null,"Verify your cluster environment variables are set:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"env | grep 'PLATFORM\\|WORKER'\n")),(0,o.kt)("p",null,"which should result in:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell-session"},"WORKER=kind-worker\nPLATFORM=kind-platform\n"))),(0,o.kt)("p",null,"If you are are not continuing from the previous section, or your outputs do not align with the validation, please refer back to\n",(0,o.kt)("a",{parentName:"p",href:"installing-kratix"},"Installing Kratix"),"."))}s.isMDXComponent=!0},8477:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>r,metadata:()=>i,toc:()=>u});var n=a(7462),o=(a(7294),a(3905));a(1567);const r={description:"Update the Resource Request status",title:"Update the Resource Request status",id:"update-status",slug:"../update-status"},s=void 0,i={unversionedId:"workshop/part-ii/update-status",id:"workshop/part-ii/update-status",title:"Update the Resource Request status",description:"Update the Resource Request status",source:"@site/docs/workshop/part-ii/05-update-status.md",sourceDirName:"workshop/part-ii",slug:"/workshop/update-status",permalink:"/docs/workshop/update-status",draft:!1,editUrl:"https://github.com/syntasso/kratix-docs/tree/main/docs/workshop/part-ii/05-update-status.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{description:"Update the Resource Request status",title:"Update the Resource Request status",id:"update-status",slug:"../update-status"},sidebar:"workshopSidebar",previous:{title:"Schedule Promises",permalink:"/docs/workshop/schedule-promise"},next:{title:"What's next?",permalink:"/docs/workshop/whats-next"}},l={},u=[{value:"Conveying information back to the application developers",id:"understand-metadata",level:2},{value:"Status",id:"status",level:2},{value:"Picking a status for your ECK promise",id:"picking-a-status-for-your-eck-promise",level:3},{value:"Request a resource and check its status",id:"rr-status",level:2},{value:"The conditions field",id:"the-conditions-field",level:3},{value:"Summary",id:"summary",level:2}],p={toc:u};function c(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This is Part 2 of ",(0,o.kt)("a",{parentName:"p",href:"intro"},"a series")," illustrating how Kratix works. ",(0,o.kt)("br",null),"\n\ud83d\udc48\ud83c\udffe","\xa0","\xa0"," Previous: ",(0,o.kt)("a",{parentName:"p",href:"schedule-promise"},"Intentionally schedule Promise resources"),")",(0,o.kt)("br",null),"\n\ud83d\udc49\ud83c\udffe","\xa0","\xa0"," Next: ",(0,o.kt)("a",{parentName:"p",href:"whats-next"},"What's next")),(0,o.kt)("hr",null),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"In this tutorial, you will")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#understand-metadata"},"Revisit pipeline metadata")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#customise-status"},"Customise the Resource Request status")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#rr-status"},"Request a resource and check its status")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#summary"},"Summary"))),(0,o.kt)("h2",{id:"understand-metadata"},"Conveying information back to the application developers"),(0,o.kt)("p",null,"Kratix Promises are a great way to encapsulate business logic and complexity of provisioning services, hiding it from the application developers. However, the application developer is still the consumer of the output from a Promise. Therefore, you need some way to communicate back to the application developers information about their request."),(0,o.kt)("p",null,"One approach to this would be to make API calls from within the pipeline to your internal systems like Slack or Microsoft Teams. This approach is good but introduces a separation between the place where the user makes the request and where they get feedback about it."),(0,o.kt)("p",null,"Kratix provides built-in support for providing feedback back to the application developers directly from within Kubernetes by allowing the pipeline to write information back to the status of the resource request."),(0,o.kt)("p",null,"In the context of your Promise, an example of what you might want to convey back is the configuration of the resource (e.g. default configuration), and how to access the running instance (e.g. a URL or connection string)."),(0,o.kt)("h2",{id:"status"},"Status"),(0,o.kt)("p",null,"Similar to how the pipeline orchestrated scheduling by writing configuration code to ",(0,o.kt)("inlineCode",{parentName:"p"},"/metadata/cluster-selectors.yaml")," Kratix exposes a ",(0,o.kt)("inlineCode",{parentName:"p"},"/metadata/status.yaml")," file."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"status.yaml")," file can contain arbitrary key values, with the ",(0,o.kt)("inlineCode",{parentName:"p"},"message")," key being a special key that is communicated back to the user when running ",(0,o.kt)("inlineCode",{parentName:"p"},"kubectl get elastic-cloud"),". The rest of the key values can be viewed by inspecting the full document. For example you could convey a brief description of the ECK instance back to the user in the ",(0,o.kt)("inlineCode",{parentName:"p"},"message")," key, and provide more programmatic information like the location of credentials to access the instance in other fields."),(0,o.kt)("h3",{id:"picking-a-status-for-your-eck-promise"},"Picking a status for your ECK promise"),(0,o.kt)("p",null,'The ECK promise provides an option to pre-configure Beats with modules. In the event a user selects to enable metrics collection, you may want to validate this for them as a part of the message field. E.g. "message: "Instance ${name} provisioned with preconfigured system metrics".'),(0,o.kt)("p",null,"In addition, you are providing Kibana as a user interface. Your users need a way to securely access this UI so you may want to provide the initial username and password."),(0,o.kt)("p",null,"Putting these two things together, you can add the following to the end of the ",(0,o.kt)("inlineCode",{parentName:"p"},"pipeline/run")," script:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:"title=pipeline/run -- add to the end",title:"pipeline/run","--":!0,add:!0,to:!0,the:!0,end:!0},'cat <<EOF > /metadata/status.yaml\nmessage: "Instance ${name} provisioned with preconfigured system metrics"\ninitialLoginDetails:\n    username: "elastic"\n    passwordSecretName: "${name}-es-elastic-user"\nEOF\n')),(0,o.kt)("h2",{id:"rr-status"},"Request a resource and check its status"),(0,o.kt)("p",null,"In order to see these changes in the pipeline you need to rebuild the image and load it into the cluster. Run the following script to build, load and test the pipeline:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"./scripts/test-pipeline\n")),(0,o.kt)("p",null,"Before installing and making a resource request, you can verify the local test by checking that the test output directory contains the correct status:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell-session"},"\ud83d\udcc2 test\n\u251c\u2500\u2500 input\n\u2502   \u2514\u2500\u2500 object.yaml\n\u251c\u2500\u2500 metadata\n\u2502   \u2514\u2500\u2500 cluster-selectors.yaml\n#highlight-next-line\n    \u2514\u2500\u2500 status.yaml\n\u2514\u2500\u2500 output\n    \u251c\u2500\u2500 beats.yaml\n    \u251c\u2500\u2500 elasticsearch.yaml\n    \u2514\u2500\u2500 kibana.yaml\n")),(0,o.kt)("p",null,"Next, install the Promise:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context $PLATFORM create --filename promise.yaml\n")),(0,o.kt)("p",null,"And finally, you can put on the Application Developer hat and make a request for an instance of Elastic Cloud:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context $PLATFORM apply --filename resource-request.yaml\n")),(0,o.kt)("p",null,"Once this Resource Request is made, you will be able to check its status. This will start as ",(0,o.kt)("inlineCode",{parentName:"p"},"pending")," which is the Kratix default before a pipeline runs. Once the pipeline has complete the status will be updated."),(0,o.kt)("p",null,"To check the complete status, listing the requested ECK instance:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context $PLATFORM get elastic-clouds\n")),(0,o.kt)("p",null,"The above command will return something close to the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"NAME      STATUS\nexample   Instance example provisioned with preconfigured system metrics\n")),(0,o.kt)("p",null,"As you can see, the ",(0,o.kt)("inlineCode",{parentName:"p"},"message")," field appears in the output. To see the other keys request the full status document from Kubernetes:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context $PLATFORM get elastic-clouds example -o yaml | yq .status\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'conditions:\n  - lastTransitionTime: "2023-01-01T12:00:00Z"\n    message: Pipeline completed\n    reason: PipelineExecutedSuccessfully\n    status: "True"\n    type: PipelineCompleted\nmessage: Instance example provisioned with preconfigured system metrics\ninitialLoginDetails:\n    username: elastic\n    passwordSecretName: example-es-elastic-user\n')),(0,o.kt)("details",null,(0,o.kt)("summary",null,"\ud83e\udd14 Curious about the conditions fields?"),(0,o.kt)("h3",{id:"the-conditions-field"},"The conditions field"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#typical-status-properties"},"Conditions")," are a core Kubernetes concept and standard to convey information about a resources status. For example, Pods report back various conditions:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'- lastProbeTime: null\n  lastTransitionTime: "2023-06-20T15:02:20Z"\n  status: "True"\n  type: Ready\n- lastProbeTime: null\n  lastTransitionTime: "2023-06-20T15:02:20Z"\n  status: "True"\n  type: ContainersReady\n- lastProbeTime: null\n  lastTransitionTime: "2023-06-20T15:00:49Z"\n  status: "True"\n  type: PodScheduled\n\n')),(0,o.kt)("p",null,"Conditions are also powerful for enabling you to wait for an occurrence. For example, you can wait for the health of a pod by running something like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context $PLATFORM \\\n    wait pods \\\n    --namespace kratix-platform-system \\\n    --selector control-plane=controller-manager \\\n    --for condition=Ready \\\n    --timeout=90s\n")),(0,o.kt)("p",null,"This same logic can be applied to resource requests, Kratix automatically sets the ",(0,o.kt)("inlineCode",{parentName:"p"},"PipelineCompleted")," condition. For example, a user (or some CI/Automation) could wait for a request to finish by running:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context $PLATFORM wait elastic-cloud/example \\\n  --for=condition=PipelineCompleted --timeout=60s\n")),(0,o.kt)("p",null,"Kratix supports this by default for all Resource Requests.")),(0,o.kt)("h2",{id:"summary"},"Summary"),(0,o.kt)("p",null,"And with that, you have successfully improved the Promise, allowing the author to provide useful details to the Application Developers who will be your platform users."),(0,o.kt)("p",null,"To recap what you achieved:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"\u2705","\xa0","\xa0"," Use metadata to set a custom Resource Request status")),(0,o.kt)("p",null,"\u2705","\xa0","\xa0","This tutorial concludes an Introduction to writing a Promise. ",(0,o.kt)("br",null),"\n\ud83d\udc49\ud83c\udffe","\xa0","\xa0","You can go check ",(0,o.kt)("a",{parentName:"p",href:"whats-next"},"what's next")," to learn about\nwhat else you can achieve with Kratix."))}c.isMDXComponent=!0}}]);