"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[7455],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=u(n),d=a,k=m["".concat(s,".").concat(d)]||m[d]||c[d]||i;return n?r.createElement(k,l(l({ref:t},p),{},{components:n})):r.createElement(k,l({ref:t},p))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[m]="string"==typeof e?e:a,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>l});var r=n(7294),a=n(6010);const i="tabItem_Ymn6";function l(e){let{children:t,hidden:n,className:l}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(i,l),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>v});var r=n(7462),a=n(7294),i=n(6010),l=n(2466),o=n(6550),s=n(1980),u=n(7392),p=n(12);function m(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}function c(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??m(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function d(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function k(e){let{queryString:t=!1,groupId:n}=e;const r=(0,o.k6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(i),(0,a.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(r.location.search);t.set(i,e),r.replace({...r.location,search:t.toString()})}),[i,r])]}function h(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,i=c(e),[l,o]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:i}))),[s,u]=k({queryString:n,groupId:r}),[m,h]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,i]=(0,p.Nk)(n);return[r,(0,a.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:r}),f=(()=>{const e=s??m;return d({value:e,tabValues:i})?e:null})();(0,a.useLayoutEffect)((()=>{f&&o(f)}),[f]);return{selectedValue:l,selectValue:(0,a.useCallback)((e=>{if(!d({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),h(e)}),[u,h,i]),tabValues:i}}var f=n(2389);const y="tabList__CuJ",g="tabItem_LNqP";function b(e){let{className:t,block:n,selectedValue:o,selectValue:s,tabValues:u}=e;const p=[],{blockElementScrollPositionUntilNextRender:m}=(0,l.o5)(),c=e=>{const t=e.currentTarget,n=p.indexOf(t),r=u[n].value;r!==o&&(m(t),s(r))},d=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=p.indexOf(e.currentTarget)+1;t=p[n]??p[0];break}case"ArrowLeft":{const n=p.indexOf(e.currentTarget)-1;t=p[n]??p[p.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:l}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>p.push(e),onKeyDown:d,onClick:c},l,{className:(0,i.Z)("tabs__item",g,l?.className,{"tabs__item--active":o===t})}),n??t)})))}function w(e){let{lazy:t,children:n,selectedValue:r}=e;const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},i.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function N(e){const t=h(e);return a.createElement("div",{className:(0,i.Z)("tabs-container",y)},a.createElement(b,(0,r.Z)({},e,t)),a.createElement(w,(0,r.Z)({},e,t)))}function v(e){const t=(0,f.Z)();return a.createElement(N,(0,r.Z)({key:String(t)},e))}},4205:(e,t,n)=>{n(7462),n(7294),n(3905)},1482:(e,t,n)=>{n.d(t,{ZP:()=>l});var r=n(7462),a=(n(7294),n(3905));const i={toc:[{value:"Pre-requisites",id:"pre-requisites",level:4}]};function l(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},i,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"pre-requisites"},"Pre-requisites"),(0,a.kt)("p",null,"If you completed the environment cleanup steps at the end of the previous\nworkshop chapter you're good to go! If you did not cleanup or ran into issues you\ncan run the following from inside the Kratix repo to get a fresh environment:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"./scripts/quick-start.sh --recreate\n")),(0,a.kt)("p",null,"Also, make sure to that the following environment variables are set:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'export PLATFORM="kind-platform"\nexport WORKER="kind-worker"\n')))}l.isMDXComponent=!0},7246:(e,t,n)=>{n.d(t,{ZP:()=>m,d$:()=>u});var r=n(7462),a=(n(7294),n(3905)),i=(n(4205),n(1482)),l=n(4996),o=n(4866),s=n(5162);const u=[{value:"What&#39;s inside a Kratix Promise?",id:"whats-inside-a-kratix-promise",level:2},{value:"Platform Team Journey",id:"platform-team-journey",level:3},{value:"Platform User Journey",id:"platform-user-journey",level:3},{value:"Fulfiling the Promise",id:"fulfiling-the-promise",level:3},{value:"Writing your own Kratix Promise",id:"writing-your-own-kratix-promise",level:2},{value:"Prepare your environment",id:"prepare-your-environment",level:3},{value:"Directory setup",id:"directory-setup",level:3},{value:"Define your Promise API",id:"promise-api",level:3},{value:"Create your Resource Request Pipeline",id:"create-pipeline",level:3},{value:"Create your Promise instance base manifest",id:"base-instance",level:4},{value:"Build a simple request pipeline",id:"pipeline-script",level:4},{value:"Package your pipeline step as a Docker image",id:"docker-file",level:4},{value:"Test your pipeline image",id:"test-image",level:3},{value:"Define your <code>workerClusterResources</code> in your Promise definition",id:"worker-cluster-resources",level:3},{value:"Install your Promise",id:"install-promise",level:3},{value:"Create and submit a Kratix Resource Request",id:"create-resource-request",level:3},{value:"Kratix Promise parts: in details",id:"promise-review",level:3},{value:"<code>xaasCrd</code>",id:"xaascrd",level:4},{value:"<code>workerClusterResources</code>",id:"workerclusterresources",level:4},{value:"<code>xaasRequestPipeline</code>",id:"xaasrequestpipeline",level:4},{value:"Recap",id:"summary",level:2},{value:"Cleanup environment",id:"cleanup",level:2},{value:"\ud83c\udf89 \xa0 Congratulations!",id:"--congratulations",level:2}],p={toc:u};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"In this tutorial, you will")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#whats-inside-a-kratix-promise"},"learn more about what's inside a Kratix Promise")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#writing-your-own-kratix-promise"},"write and install your own Kratix Promise"))),(0,a.kt)("h2",{id:"whats-inside-a-kratix-promise"},"What's inside a Kratix Promise?"),(0,a.kt)("p",null,"You've ",(0,a.kt)("a",{parentName:"p",href:"multiple-promises"},"installed Kratix and three sample Promises"),". Now\nyou'll create a Promise from scratch."),(0,a.kt)("p",null,"From ",(0,a.kt)("a",{parentName:"p",href:"installing-a-promise"},"installing a Promise"),", a Kratix Promise is a YAML\ndocument that defines a contract between the platform and its users. It is what\nallows platforms to be built incrementally."),(0,a.kt)("p",null,"It consists of three parts:"),(0,a.kt)("img",{align:"right",src:(0,l.Z)("/img/docs/base-promise-structure.png"),alt:"Kratix logo"}),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"xaasCrd"),": the CRD that an application developer uses to request an instance\nof the Kratix Promise from the Platform Cluster."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"workerClusterResources"),": a collection of Kubernetes resources that enable\nthe creation of an instance and will be pre-installed in the Worker Clusters."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"xaasRequestPipeline"),": an ordered list of container images that result in the\ncreation an instance of the promised service on a Worker Cluster, executing\nthe series of steps required by your business to create that instance.")),(0,a.kt)("h3",{id:"platform-team-journey"},"Platform Team Journey"),(0,a.kt)("p",null,"Thinking of your platform as-a-Product, steps to write a Promise are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Talk to users of your platform to find out what they're using and what\nthey need."),(0,a.kt)("li",{parentName:"ul"},"Determine what the API of the Promise should be.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"What are the configuration options you want to expose to your users?"),(0,a.kt)("li",{parentName:"ul"},"Do you need to provide low-level options or will the users be happy with\nhigher-level abstractions?"))),(0,a.kt)("li",{parentName:"ul"},"In the Promise, write the ",(0,a.kt)("inlineCode",{parentName:"li"},"xaasCrd")," with the desired API."),(0,a.kt)("li",{parentName:"ul"},"Next, determine what the software dependencies are that you need to fulfill the\nPromise. You may find out you need a ",(0,a.kt)("a",{parentName:"li",href:"https://kubernetes.io/docs/concepts/extend-kubernetes/operator/"},"Kubernetes\nOperator"),"\nrunning on the Worker cluster, for example."),(0,a.kt)("li",{parentName:"ul"},"In the Promise, add your dependencies in the ",(0,a.kt)("inlineCode",{parentName:"li"},"workerClusterResources"),"."),(0,a.kt)("li",{parentName:"ul"},"Finally, determine the steps that need to be executed for the instance to be created.\nThese may include translating the user's request into the Operator's expected document,\ninjecting custom configuration, sending requests to internal APIs to verify permissions,\nscanning images for vulnerabilities, etc."),(0,a.kt)("li",{parentName:"ul"},"In the Promise, list those steps in the ",(0,a.kt)("inlineCode",{parentName:"li"},"xaasRequuestPipeline"),"."),(0,a.kt)("li",{parentName:"ul"},"Install the Promise on your Platform Cluster, where Kratix is installed.")),(0,a.kt)("h3",{id:"platform-user-journey"},"Platform User Journey"),(0,a.kt)("p",null,"To use the Promise once it is installed on the platform, a platform user will:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"List the available Promises in the platform cluster to find what they want."),(0,a.kt)("li",{parentName:"ul"},"Write a Kratix Resource Request for the service, as defined by the ",(0,a.kt)("inlineCode",{parentName:"li"},"xaasCrd")," in the Promise."),(0,a.kt)("li",{parentName:"ul"},"Send the Resource Request to the Platform.")),(0,a.kt)("h3",{id:"fulfiling-the-promise"},"Fulfiling the Promise"),(0,a.kt)("p",null,"At this point, Kratix will execute the following steps:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Kratix fires off the first container in the defined in ",(0,a.kt)("inlineCode",{parentName:"li"},"xaasRequestPipeline"),"\nand passes the Resource Request as an input. Subsequent containers will have\nthe previous container's output available as input. For further details on the\ninternal works of multiple pipeline images, check the ",(0,a.kt)("a",{parentName:"li",href:"/docs/main/reference/resource-requests/pipelines"},"Pipelines reference\ndocumentation"),"."),(0,a.kt)("li",{parentName:"ul"},"Once all pipeline containers are executed, a series of documents are\noutputted, encapsulating the user's request into valid Kubernetes objects."),(0,a.kt)("li",{parentName:"ul"},"Those documents are schedule to an available Worker Cluster, which in turn has\nthe necessary dependencies installed (via the ",(0,a.kt)("inlineCode",{parentName:"li"},"workerClusterResources"),")"),(0,a.kt)("li",{parentName:"ul"},"The instances are created, and the user can reference the request's status to\naccess the instances.")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"writing-your-own-kratix-promise"},"Writing your own Kratix Promise"),(0,a.kt)("p",null,"Imagine your platform team has received its fourth request from its fourth team\nfor a Jenkins instance. You decide four times is too many times to manually set\nup Jenkins."),(0,a.kt)("p",null,"Now you'll write a Jenkins Promise and install it on your platform so that your\nfour teams get Jenkins","\u2014","and you get time back for more valuable work."),(0,a.kt)("p",null,"This guide will follow the steps below:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Define Promise")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#prepare-your-environment"},"Prepare your environment"),", if required"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#directory-setup"},"Set up your directories"))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Promise definition: xaasCrd")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#promise-api"},"X as-a-Service Custom Resource Definition: define your Promise API"))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Promise definition: xaasRequestPipeline")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#base-instance"},"Create your Promise instance base manifest")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#pipeline-script"},"Build a simple request pipeline")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#dockerfile"},"Package your pipeline step as a Docker image")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#test-image"},"Test your container image"))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Promise definition: workerClusterResources")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#worker-cluster-resources"},"Define your ",(0,a.kt)("inlineCode",{parentName:"a"},"workerClusterResources")," in your Promise definition"))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Test Promise")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#install-promise"},"Install your Promise")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#create-resource-request"},"Create and submit a Kratix Resource Request")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#promise-review"},"Review of a Kratix Promise parts (in detail)")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#summary"},"Summary")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#cleanup"},"Cleanup environment"))),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"prepare-your-environment"},"Prepare your environment"),(0,a.kt)(i.ZP,{mdxType:"PartialPreRequisites"}),(0,a.kt)("h3",{id:"directory-setup"},"Directory setup"),(0,a.kt)("p",null,"To quick-start your Promise, we have setup a template repository to start from."),(0,a.kt)("p",null,"You can start by\n",(0,a.kt)("a",{parentName:"p",href:"https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/about-forks"},"forking"),"\nthe ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/syntasso/workshop-promise-template"},"template repository"),"\nor by cloning it directly."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/syntasso/workshop-promise-template\n")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"If you'd like to save the Promise you will write, consider forking the template\nrepository.")),(0,a.kt)("p",null,"Once cloned, change into the directory:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cd workshop-promise-template/\n")),(0,a.kt)("h3",{id:"promise-api"},"Define your Promise API"),(0,a.kt)("p",null,"For the purpose of this tutorial, you will create an API that accepts a single\n",(0,a.kt)("inlineCode",{parentName:"p"},"string")," parameter called ",(0,a.kt)("inlineCode",{parentName:"p"},"name"),". In real world scenarios, the API can be as\nsimple or as complex you design it to be. The Promise API is defined within the\n",(0,a.kt)("inlineCode",{parentName:"p"},"xaasCrd")," of your Promise YAML."),(0,a.kt)("p",null,"Replace the ",(0,a.kt)("inlineCode",{parentName:"p"},"xaasCrd")," field in ",(0,a.kt)("inlineCode",{parentName:"p"},"promise.yaml")," with the complete field details\nbelow. Ensure the indentation is correct (",(0,a.kt)("inlineCode",{parentName:"p"},"xaasCrd")," is nested under ",(0,a.kt)("inlineCode",{parentName:"p"},"spec"),")."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'jsx title="xaasCrd in promise.yaml"',jsx:!0,title:'"xaasCrd',in:!0,'promise.yaml"':!0},"  xaasCrd:\n    apiVersion: apiextensions.k8s.io/v1\n    kind: CustomResourceDefinition\n    metadata:\n      name: jenkins.example.promise.syntasso.io\n    spec:\n      group: example.promise.syntasso.io\n      scope: Namespaced\n      names:\n        plural: jenkins\n        singular: jenkins\n        kind: jenkins\n      versions:\n      - name: v1\n        served: true\n        storage: true\n        schema:\n          openAPIV3Schema:\n            type: object\n            properties:\n              spec:\n                type: object\n                properties:\n                  name:\n                    type: string\n")),(0,a.kt)("p",null,"You have now defined the as-a-Service API."),(0,a.kt)("h3",{id:"create-pipeline"},"Create your Resource Request Pipeline"),(0,a.kt)("h4",{id:"base-instance"},"Create your Promise instance base manifest"),(0,a.kt)("p",null,"Next build the pipeline to use details from a Kratix Promise ",(0,a.kt)("em",{parentName:"p"},"Resource Request"),"\ninto the Kubernetes resources required to create a running instance of the\nJenkins service. For that, copy the YAML file below and save it in\n",(0,a.kt)("inlineCode",{parentName:"p"},"internal/request-pipeline/jenkins-instance.yaml"),"."),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("strong",null,"CLICK HERE")," to expand the contents of the ",(0,a.kt)("code",null,"jenkins-instance.yaml")," file."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'jsx title="internal/request-pipeline/jenkins-instance.yaml"',jsx:!0,title:'"internal/request-pipeline/jenkins-instance.yaml"'},'apiVersion: jenkins.io/v1alpha2\nkind: Jenkins\nmetadata:\n  name: <tbr-name>\n  namespace: default\nspec:\n  service:\n    type: NodePort\n    port: 8080\n    nodePort: 30269\n  configurationAsCode:\n    configurations: []\n    secret:\n      name: ""\n  groovyScripts:\n    configurations: []\n    secret:\n      name: ""\n  jenkinsAPISettings:\n    authorizationStrategy: createUser\n  master:\n    disableCSRFProtection: false\n    containers:\n      - name: jenkins-master\n        image: jenkins/jenkins:2.396-jdk17\n        imagePullPolicy: Always\n        livenessProbe:\n          failureThreshold: 12\n          httpGet:\n            path: /login\n            port: http\n            scheme: HTTP\n          initialDelaySeconds: 100\n          periodSeconds: 10\n          successThreshold: 1\n          timeoutSeconds: 5\n        readinessProbe:\n          failureThreshold: 10\n          httpGet:\n            path: /login\n            port: http\n            scheme: HTTP\n          initialDelaySeconds: 80\n          periodSeconds: 10\n          successThreshold: 1\n          timeoutSeconds: 1\n        resources:\n          limits:\n            cpu: 1500m\n            memory: 3Gi\n          requests:\n            cpu: "1"\n            memory: 500Mi\n        env:\n          - name: DEBUG_JENKINS_OPERATOR\n            value: "true"\n          - name: JAVA_OPTS\n            value: -Xmx2048m -XX:MinRAMPercentage=50.0 -XX:MaxRAMPercentage=80.0 -Djenkins.install.runSetupWizard=false -Djava.awt.headless=true\n    basePlugins:\n      - name: kubernetes\n        version: 3802.vb_b_600831fcb_3\n      - name: workflow-job\n        version: 1289.vd1c337fd5354\n      - name: workflow-aggregator\n        version: "2.6"\n      - name: git\n        version: 4.11.3\n      - name: job-dsl\n        version: 1.78.3\n      - name: configuration-as-code\n        version: 1569.vb_72405b_80249\n      - name: kubernetes-credentials-provider\n        version: 1.208.v128ee9800c04\n'))),(0,a.kt)("h4",{id:"pipeline-script"},"Build a simple request pipeline"),(0,a.kt)("p",null,"Kratix takes no opinion on the tooling used within a pipeline. Kratix will pass\na set of resources to the pipeline, and expect back a set of resources. What\nhappens within the pipeline, and what tooling is used, is a decision left\nentirely to you."),(0,a.kt)("p",null,"For this example, you're taking a name from the Kratix Resource Request for an\ninstance and passing it to the Jenkins custom resource output."),(0,a.kt)("p",null,"To keep this transformation simple, you'll use a combination of ",(0,a.kt)("inlineCode",{parentName:"p"},"sed")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"yq"),"\nto do the work."),(0,a.kt)("p",null,"Update the ",(0,a.kt)("inlineCode",{parentName:"p"},"execute-pipeline")," script in the ",(0,a.kt)("inlineCode",{parentName:"p"},"request-pipeline")," directory\nwith the contents below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash",metastring:'jsx title="internal/request-pipeline/execute-pipeline"',jsx:!0,title:'"internal/request-pipeline/execute-pipeline"'},"#!/bin/sh\n\nset -x\n\n#Get the name from the Promise Custom resource\ninstanceName=$(yq eval '.spec.name' /input/object.yaml)\n\n# Inject the name into the Jenkins resources\nfind /tmp/transfer -type f -exec sed -i \\\n  -e \"s/<tbr-name>/${instanceName}/g\" \\\n  {} \\;\n\ncp /tmp/transfer/* /output/\n")),(0,a.kt)("p",null,"Pipelines also have the capability to write back information to the resource\nrequester by writing to the status. See ",(0,a.kt)("a",{parentName:"p",href:"/docs/main/reference/resource-requests/status"},"status documentation for more\ninfoformation.")),(0,a.kt)("h4",{id:"docker-file"},"Package your pipeline step as a Docker image"),(0,a.kt)("p",null,"Update the ",(0,a.kt)("inlineCode",{parentName:"p"},"Dockerfile")," in the ",(0,a.kt)("inlineCode",{parentName:"p"},"request-pipeline")," directory to contain the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dockerfile",metastring:'jsx title="internal/request-pipeline/Dockerfile"',jsx:!0,title:'"internal/request-pipeline/Dockerfile"'},'FROM "mikefarah/yq:4"\nRUN [ "mkdir", "/tmp/transfer" ]\n\nADD jenkins-instance.yaml /tmp/transfer/jenkins-instance.yaml\nADD execute-pipeline execute-pipeline\n\nCMD [ "sh", "-c", "./execute-pipeline"]\nENTRYPOINT []\n')),(0,a.kt)("br",null),(0,a.kt)("p",null,"Next build your Docker image. First lets give it a name. If you are not using\n",(0,a.kt)("inlineCode",{parentName:"p"},"KinD"),", you may need to push the image later on, in that case change the name to\none suitable for your registry, e.g. if you use Dockerhub\n",(0,a.kt)("inlineCode",{parentName:"p"},"my-dockerhub-username/jenkins-request-pipeline:dev")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"export PIPELINE_NAME=kratix-workshop/jenkins-request-pipeline:dev\n")),(0,a.kt)("p",null,"Then we can build the image"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"./internal/scripts/pipeline-image build\n")),(0,a.kt)("h3",{id:"test-image"},"Test your pipeline image"),(0,a.kt)("p",null,"Since the Request Pipeline is a series of containers, we can easily test\nindividual images in isolation. We can provide an example ",(0,a.kt)("inlineCode",{parentName:"p"},"/input")," to mimic what\nKratix would do when it executes the pipeline and assert that the correct\n",(0,a.kt)("inlineCode",{parentName:"p"},"/output")," is written."),(0,a.kt)("p",null,"To test this lets create a sample ",(0,a.kt)("inlineCode",{parentName:"p"},"/input/object.yaml")," Resource Request in the\n",(0,a.kt)("inlineCode",{parentName:"p"},"internal/request-pipeline/test-input/")," directory with the contents below"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'jsx title="internal/request-pipeline/test-input/object.yaml"',jsx:!0,title:'"internal/request-pipeline/test-input/object.yaml"'},"apiVersion: promise.example.com/v1\nkind: jenkins\nmetadata:\n  name: my-promise-request\nspec:\n  name: my-amazing-jenkins\n")),(0,a.kt)("p",null,"Run the container, mounting the volumes"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"chmod 777 ./internal/request-pipeline/test-output\ndocker run \\\n  -v ${PWD}/internal/request-pipeline/test-input:/input \\\n  -v ${PWD}/internal/request-pipeline/test-output:/output $PIPELINE_NAME\n")),(0,a.kt)("br",null),(0,a.kt)("p",null,"Verify the contents in the ",(0,a.kt)("inlineCode",{parentName:"p"},"internal/request-pipeline/test-output")," directory\nmatch the desired outcome. Note how the Jenkins ",(0,a.kt)("inlineCode",{parentName:"p"},"metadata.name")," correspond to\nthe name on the Resource Request. This is exactly what we setup our pipeline to\ndo!"),(0,a.kt)("p",null,"The documents you see in the directory will be scheduled and deployed by Kratix\nto a Worker Cluster once the pipeline is executed. They need to be valid\nKubernetes resources that can be applied to any cluster with the Promise's\n",(0,a.kt)("inlineCode",{parentName:"p"},"workerClusterResources")," installed (see below)."),(0,a.kt)("p",null,"Once you are satisfied that your pipeline is producing the expected result, you\nwill need to make the container image available to your Kubernetes cluster. If\nyou are using KinD you can load it in by running:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"./internal/scripts/pipeline-image load\n")),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("strong",null,"Click here")," if your clusters were not created with KinD"),"If you have not created your Kubernetes clusters with KinD, you will need to either:",(0,a.kt)("ul",null,(0,a.kt)("li",null,"Push the image to a Image repository (like Dockerhub) by running ",(0,a.kt)("code",null,"./internal/scripts/pipeline-image push")),(0,a.kt)("li",null,"Use the appropriate command to load the image (for example, ",(0,a.kt)("code",null,"minikube cache add")," if you are using minikube)"))),(0,a.kt)("br",null),(0,a.kt)("p",null,"The final step of creating the ",(0,a.kt)("inlineCode",{parentName:"p"},"xaasRequestPipeline")," is to reference your docker\nimage from the ",(0,a.kt)("inlineCode",{parentName:"p"},"spec.xaasRequestPipeline")," field in the ",(0,a.kt)("inlineCode",{parentName:"p"},"promise.yaml"),"."),(0,a.kt)("p",null,"Add the image to the array in ",(0,a.kt)("inlineCode",{parentName:"p"},"promise.yaml"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'jsx title="promise.yaml"',jsx:!0,title:'"promise.yaml"'},"apiVersion: platform.kratix.io/v1alpha1\nkind: Promise\nmetadata:\n  name: promise\nspec:\n  workerClusterResources:\n  #highlight-start\n  xaasRequestPipeline:\n  - <value of $PIPELINE_NAME>\n  #highlight-end\n  xaasCrd:\n    ...\n")),(0,a.kt)("admonition",{title:"About Pipelines",type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Although the example here is a simple one, pipelines are one the of most\npowerful features of Kratix."),(0,a.kt)("p",{parentName:"admonition"},"The pipeline enables platform teams to deliver compelling developer experiences\non the platform, fully customized to meet both the users' and the organization's\nneeds."),(0,a.kt)("p",{parentName:"admonition"},"Furthermore, pipeline images can have their own development workflow, being\nfully tested and released on their own schedule. A well-designed image can also\nbe reused across many Promises, reducing duplication.")),(0,a.kt)("br",null),(0,a.kt)("p",null,"In summary, you have:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Created a container image containing:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"A template file to be injected with per-instance details\n(",(0,a.kt)("inlineCode",{parentName:"li"},"jenkins-instance.yaml"),")"),(0,a.kt)("li",{parentName:"ul"},"A shell script to retrieve the per-instance details from the user's\nrequest, and inject them into the template (",(0,a.kt)("inlineCode",{parentName:"li"},"execute-pipeline"),")"))),(0,a.kt)("li",{parentName:"ul"},"Executed the pipeline image locally to validate its output"),(0,a.kt)("li",{parentName:"ul"},"Loaded the image into the Platform Cluster (or pushed it to the registry)"),(0,a.kt)("li",{parentName:"ul"},"Added the image to the Promise definition in the ",(0,a.kt)("inlineCode",{parentName:"li"},"xaasRequestPipeline")," array")),(0,a.kt)("h3",{id:"worker-cluster-resources"},"Define your ",(0,a.kt)("inlineCode",{parentName:"h3"},"workerClusterResources")," in your Promise definition"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"workerClusterResources")," describes everything required to fulfil the\nPromise. Kratix applies this content on all registered Worker Clusters."),(0,a.kt)("p",null,"For this Promise, the ",(0,a.kt)("inlineCode",{parentName:"p"},"workerClusterResources")," needs to contain the Jenkins CRD\nand Operator."),(0,a.kt)("p",null,"Run the following commands to download the resource files"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"curl https://raw.githubusercontent.com/syntasso/kratix-marketplace/main/jenkins/internal/resources/jenkins.io_jenkins.yaml --output internal/resources/jenkins.io_jenkins.yaml --silent\ncurl https://raw.githubusercontent.com/syntasso/kratix-marketplace/main/jenkins/internal/resources/all-in-one-v1alpha2.yaml --output internal/resources/all-in-one-v1alpha2.yaml --silent\n")),(0,a.kt)("br",null),(0,a.kt)("p",null,"The commands above will download the necessary files in the ",(0,a.kt)("inlineCode",{parentName:"p"},"internal/resources"),"\ndirectory. You are now ready to inject the Jenkins files into the\n",(0,a.kt)("inlineCode",{parentName:"p"},"promise.yaml"),"."),(0,a.kt)("p",null,"To make this step simpler we have written a ",(0,a.kt)("em",{parentName:"p"},"very basic")," tool to grab all YAML\ndocuments from all YAML files located in ",(0,a.kt)("inlineCode",{parentName:"p"},"internal/resources")," and inject them\ninto the ",(0,a.kt)("inlineCode",{parentName:"p"},"workerClusterResources")," field in the ",(0,a.kt)("inlineCode",{parentName:"p"},"promise.yaml"),"."),(0,a.kt)("p",null,"To use this tool, you will need to download the correct binary for your computer\nfrom ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/syntasso/kratix/releases/tag/v0.0.2"},"GitHub releases"),":"),(0,a.kt)(o.Z,{mdxType:"Tabs"},(0,a.kt)(s.Z,{value:"darwin-amd64",label:"Intel Mac",default:!0,mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"curl -sLo internal/scripts/worker-resource-builder https://github.com/syntasso/kratix/releases/download/v0.0.2/worker-resource-builder-v0.0.2-darwin-amd64\nchmod +x internal/scripts/worker-resource-builder\n"))),(0,a.kt)(s.Z,{value:"darwin-arm64",label:"Apple Silicon Mac",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"curl -sLo internal/scripts/worker-resource-builder https://github.com/syntasso/kratix/releases/download/v0.0.2/worker-resource-builder-v0.0.2-darwin-arm64\nchmod +x internal/scripts/worker-resource-builder\n"))),(0,a.kt)(s.Z,{value:"linux-arm64",label:"Linux ARM64",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"curl -sLo internal/scripts/worker-resource-builder https://github.com/syntasso/kratix/releases/download/v0.0.2/worker-resource-builder-v0.0.2-linux-arm64\nchmod +x internal/scripts/worker-resource-builder\n"))),(0,a.kt)(s.Z,{value:"linux-amd64",label:"Linux AMD64",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"curl -sLo internal/scripts/worker-resource-builder https://github.com/syntasso/kratix/releases/download/v0.0.2/worker-resource-builder-v0.0.2-linux-amd64\nchmod +x internal/scripts/worker-resource-builder\n")))),(0,a.kt)("br",null),(0,a.kt)("p",null,"Once you have downloaded the correct binary, run:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"./internal/scripts/inject-wcr\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"promise.yaml")," file is now updated with the ",(0,a.kt)("inlineCode",{parentName:"p"},"workerClusterResources")," and you\nare ready to install it!"),(0,a.kt)("h3",{id:"install-promise"},"Install your Promise"),(0,a.kt)("p",null,"From your Promise directory, you can now install the Promise in Kratix."),(0,a.kt)("p",null,"At this point, your Promise directory structure should look like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\ud83d\udcc2 workshop-promise-template\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 \ud83d\udcc2 internal\n\u2502\xa0\xa0 \u251c\u2500\u2500 README.md\n\u2502\xa0\xa0 \u251c\u2500\u2500 \ud83d\udcc2 request-pipeline\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 Dockerfile\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 execute-pipeline\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 jenkins-instance.yaml\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 test-input\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 object.yaml\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 test-output\n\u2502\xa0\xa0 \u2502\xa0\xa0     \u2514\u2500\u2500 jenkins-instance.yaml\n\u2502\xa0\xa0 \u251c\u2500\u2500 \ud83d\udcc2 resources\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 all-in-one-v1alpha2.yaml\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 jenkins.io_jenkins.yaml\n\u2502\xa0\xa0 \u2514\u2500\u2500 \ud83d\udcc2 scripts\n\u2502\xa0\xa0     \u251c\u2500\u2500 inject-wcr\n\u2502\xa0\xa0     \u251c\u2500\u2500 pipeline-image\n\u2502\xa0\xa0     \u2514\u2500\u2500 worker-resource-builder\n\u251c\u2500\u2500 promise.yaml\n\u2514\u2500\u2500 resource-request.yaml\n")),(0,a.kt)("br",null),(0,a.kt)("p",null,"Before installing your promise, verify that Kratix and MinIO are installed and\nhealthy."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context $PLATFORM get pods --namespace kratix-platform-system\n")),(0,a.kt)("p",null,"You should see something similar to"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"NAME                                                  READY   STATUS       RESTARTS   AGE\nkratix-platform-controller-manager-769855f9bb-8srtj   2/2     Running      0          1h\nminio-6f75d9fbcf-5cn7w                                1/1     Running      0          1h\n")),(0,a.kt)("p",null,"If that is not the case, please go back to ",(0,a.kt)("a",{parentName:"p",href:"#prepare-your-environment"},"Prepare your\nenvironment")," and follow the instructions."),(0,a.kt)("p",null,"From the ",(0,a.kt)("inlineCode",{parentName:"p"},"promise")," directory, run:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"kubectl apply --context $PLATFORM --filename promise.yaml\n")),(0,a.kt)("p",null,"Verify the Promise is installed",(0,a.kt)("br",null)," ",(0,a.kt)("sub",null,"(This may take a few minutes so",(0,a.kt)("code",null,"--watch")," will watch the command. Press ",(0,a.kt)("kbd",null,"Ctrl"),"+",(0,a.kt)("kbd",null,"C"),"to stop watching)")," "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context $PLATFORM get crds --watch\n")),(0,a.kt)("p",null,"The above command will give an output similar to"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"NAME                                  CREATED AT\njenkins.example.promise.syntasso.io   2021-09-09T11:21:10Z\n")),(0,a.kt)("br",null),(0,a.kt)("p",null,"Verify the Jenkins Operator is running",(0,a.kt)("br",null)," ",(0,a.kt)("sub",null,"(This may take a few minutes so ",(0,a.kt)("code",null,"--watch")," will watch the command. Press",(0,a.kt)("kbd",null,"Ctrl"),"+",(0,a.kt)("kbd",null,"C")," to stop watching)")," "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context $WORKER get pods --watch\n")),(0,a.kt)("p",null,"The above command will give an output similar to"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"NAME                                 READY   STATUS    RESTARTS   AGE\njenkins-operator-6c89d97d4f-r474w    1/1     Running   0          1m\n")),(0,a.kt)("h3",{id:"create-resource-request"},"Create and submit a Kratix Resource Request"),(0,a.kt)("p",null,"You can now request instances of Jenkins. Create a file in the root directory\ncalled ",(0,a.kt)("inlineCode",{parentName:"p"},"resource-request.yaml")," with the following contents:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'jxs title="resource-request.yaml"',jxs:!0,title:'"resource-request.yaml"'},"apiVersion: example.promise.syntasso.io/v1\nkind: jenkins\nmetadata:\n  name: my-promise-request\nspec:\n  name: my-amazing-jenkins\n")),(0,a.kt)("p",null,"You can now send the Resource Request to Kratix:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply --context $PLATFORM --filename resource-request.yaml\n")),(0,a.kt)("p",null,"Applying the Kratix Promise will trigger your pipeline steps which in turn\nrequests an instance of Jenkins from the operator. While the pipeline can run\nquite quickly, Jenkins requires quite a few resources to be installed including\na deployment and a runner which means the full install may take a few minutes."),(0,a.kt)("p",null,"You can see a bit of what is happening by first looking for your pipeline completion"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context $PLATFORM get pods\n")),(0,a.kt)("p",null,"This should result in something similar to"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"NAME                                             READY   STATUS      RESTARTS   AGE\nrequest-pipeline-promise-default-9d40b   0/1     Completed   0          1m\n")),(0,a.kt)("br",null),(0,a.kt)("p",null,"For more details, you can view the pipeline logs with"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl logs \\\n  --context $PLATFORM \\\n  --selector kratix-promise-id=jenkins-default \\\n  --container xaas-request-pipeline-stage-0\n")),(0,a.kt)("p",null,"This should result in something like"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"+ yq eval .spec.name /input/object.yaml\n+ instanceName=my-amazing-jenkins\n+ find /tmp/transfer -type f -exec sed -i -e 's/<tbr-name>/my-amazing-jenkins/g' '{}' ';'\n+ cp /tmp/transfer/jenkins-instance.yaml /output/\n")),(0,a.kt)("p",null,"Then you can watch for the creation of your Jenkins instance by targeting the Worker Cluster:",(0,a.kt)("br",null)," ",(0,a.kt)("sub",null,"(This may take a few minutes so ",(0,a.kt)("code",null,"--watch"),"will watch the command. Press ",(0,a.kt)("kbd",null,"Ctrl"),"+",(0,a.kt)("kbd",null,"C")," to stop watching)")," "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context $WORKER get pods --all-namespaces --watch\n")),(0,a.kt)("p",null,"The above command will eventually give an output similar to"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"NAME                                READY   STATUS    RESTARTS   AGE\njenkins-my-amazing-jenkins          1/1     Running   0          1m\n...\n")),(0,a.kt)("br",null),(0,a.kt)("p",null,"For verification, access the Jenkins UI in a browser, as in ",(0,a.kt)("a",{parentName:"p",href:"./installing-a-promise#use-your-jenkins-instance"},"previous\nsteps"),"."),(0,a.kt)("p",null,"Let's now take a look at what you have done in more details."),(0,a.kt)("h3",{id:"promise-review"},"Kratix Promise parts: in details"),(0,a.kt)("h4",{id:"xaascrd"},(0,a.kt)("inlineCode",{parentName:"h4"},"xaasCrd")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"xaasCrd")," is your user-facing API for the Promise. It defines the options\nthat users can configure when they request the Promise. The complexity of the\n",(0,a.kt)("inlineCode",{parentName:"p"},"xaasCrd")," API is up to you. You can read more about writing Custom Resource\nDefinitions in the ",(0,a.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/#create-a-customresourcedefinition"},"Kubernetes\ndocs"),"."),(0,a.kt)("h4",{id:"workerclusterresources"},(0,a.kt)("inlineCode",{parentName:"h4"},"workerClusterResources")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"workerClusterResources")," describes everything required to fulfil the\nPromise. Kratix applies this content on all registered Worker Clusters. For\ninstance with the Jenkins Promise, the ",(0,a.kt)("inlineCode",{parentName:"p"},"workerClusterResources")," contains the\nJenkins CRD, the Jenkins Operator, and the resources the Operator requires."),(0,a.kt)("h4",{id:"xaasrequestpipeline"},(0,a.kt)("inlineCode",{parentName:"h4"},"xaasRequestPipeline")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"xaasRequestPipeline")," defines a set of jobs to run when Kratix receives a\nrequest for an instance of one of its Promises."),(0,a.kt)("p",null,"The pipeline is an array of container images, executed in order. The pipeline\nenables you to write Promises with specialised images and combine those images\nas needed."),(0,a.kt)("p",null,"Each container in the ",(0,a.kt)("inlineCode",{parentName:"p"},"xaasRequestPipeline")," array should output complete, valid\nKubernetes resources."),(0,a.kt)("p",null,"The contract with each pipeline container is simple and straightforward:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The first container in the list receives the resource document created by the\nuser's request","\u2014","this request will comply with the ",(0,a.kt)("inlineCode",{parentName:"li"},"xaasCrd")," described\nabove. The document will be always available to the pipeline in\n",(0,a.kt)("inlineCode",{parentName:"li"},"/input/object.yaml"),"."),(0,a.kt)("li",{parentName:"ul"},"The container's command then executes with the input object and fulfils its\nresponsibilites."),(0,a.kt)("li",{parentName:"ul"},"The container writes any resources to be created to ",(0,a.kt)("inlineCode",{parentName:"li"},"/output/"),"."),(0,a.kt)("li",{parentName:"ul"},"The resources in ",(0,a.kt)("inlineCode",{parentName:"li"},"/output")," of the last container in the ",(0,a.kt)("inlineCode",{parentName:"li"},"xaasRequestPipeline"),"\narray will be scheduled and applied to the appropriate Worker Clusters.")),(0,a.kt)("h2",{id:"summary"},"Recap"),(0,a.kt)("p",null,"You have now authored your first promise. Congratulations \ud83c\udf89"),(0,a.kt)("p",null,"To recap the steps we took:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u2705","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"li"},"xaasCrd"),": Defined your Promise API with a X as-a-Service\nCustom Resource Definition"),(0,a.kt)("li",{parentName:"ol"},"\u2705","\xa0","\xa0","Created your Promise instance base manifest"),(0,a.kt)("li",{parentName:"ol"},"\u2705","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"li"},"xaasRequestPipeline"),": Built a simple request pipeline"),(0,a.kt)("li",{parentName:"ol"},"\u2705","\xa0","\xa0","Packaged the pipeline as a Docker image"),(0,a.kt)("li",{parentName:"ol"},"\u2705","\xa0","\xa0","Tested the pipeline Docker image"),(0,a.kt)("li",{parentName:"ol"},"\u2705","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"li"},"workerClusterResources"),": Defined what needs to be present on\nyour Worker Clusters to fulfil this Promise"),(0,a.kt)("li",{parentName:"ol"},"\u2705","\xa0","\xa0","Installed your Kratix Promise"),(0,a.kt)("li",{parentName:"ol"},"\u2705","\xa0","\xa0","Created and submitted a Kratix Resource Request"),(0,a.kt)("li",{parentName:"ol"},"\u2705","\xa0","\xa0","Reviewed the components of a Promise")),(0,a.kt)("h2",{id:"cleanup"},"Cleanup environment"),(0,a.kt)("p",null,"To clean up your environment first delete the Resource Requests for the Jenkins\ninstance"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context $PLATFORM delete --filename resource-request.yaml\n")),(0,a.kt)("p",null,"Verify the resources belonging to the Resource Requests have been deleted in the\nWorker Cluster"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"kubectl --context $WORKER get pods\n")),(0,a.kt)("p",null,"Now the Resource Requests have been deleted you can delete the Promises"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context $PLATFORM delete --filename promise.yaml\n")),(0,a.kt)("p",null,"Verify the Worker Cluster Resources are deleted from the Worker Cluster"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"kubectl --context $WORKER get pods\n")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"--congratulations"},"\ud83c\udf89 ","\xa0"," Congratulations!"),(0,a.kt)("p",null,"\u2705","\xa0","\xa0"," You have written a Kratix Promise. ",(0,a.kt)("br",null),"\n\ud83d\udc49\ud83c\udffe","\xa0","\xa0"," Let's ",(0,a.kt)("a",{parentName:"p",href:"./enhancing-a-promise"},"see how to tailor Kratix Promises based on organisational context"),"."))}m.isMDXComponent=!0},9745:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var r=n(7462),a=(n(7294),n(3905)),i=n(7246);const l={description:"Write a Promise from scratch",title:"Writing a Kratix Promise",slug:"../writing-a-promise"},o=void 0,s={unversionedId:"workshop/part-ii/writing-a-promise",id:"workshop/part-ii/writing-a-promise",title:"Writing a Kratix Promise",description:"Write a Promise from scratch",source:"@site/docs/workshop/part-ii/01-writing-a-promise.md",sourceDirName:"workshop/part-ii",slug:"/workshop/writing-a-promise",permalink:"/docs/workshop/writing-a-promise",draft:!1,editUrl:"https://github.com/syntasso/kratix-docs/tree/main/docs/workshop/part-ii/01-writing-a-promise.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{description:"Write a Promise from scratch",title:"Writing a Kratix Promise",slug:"../writing-a-promise"},sidebar:"workshopSidebar",previous:{title:"Part II",permalink:"/docs/category/part-ii"},next:{title:"Enhancing a Promise",permalink:"/docs/workshop/enhancing-a-promise"}},u={},p=[...i.d$],m={toc:p};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"\ud83d\udc49\ud83c\udffe","\xa0","\xa0"," Next: ",(0,a.kt)("a",{parentName:"p",href:"enhancing-a-promise"},"Enhancing a Kratix Promise")),(0,a.kt)("hr",null),(0,a.kt)(i.ZP,{mdxType:"WritingPromise"}))}c.isMDXComponent=!0}}]);