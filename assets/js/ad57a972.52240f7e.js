"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[6859],{5717:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>l});var i=t(5893),a=t(1151);const s={title:"Backstage Plugins",description:"Documentation for the enterprise plugins for Backstage bundled with SKE.",sidebar_label:"Backstage Plugins"},o=void 0,r={id:"ske/backstage",title:"Backstage Plugins",description:"Documentation for the enterprise plugins for Backstage bundled with SKE.",source:"@site/docs/ske/01-backstage.mdx",sourceDirName:"ske",slug:"/ske/backstage",permalink:"/ske/backstage",draft:!1,unlisted:!1,editUrl:"https://github.com/syntasso/kratix-docs/tree/main/docs/ske/01-backstage.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Backstage Plugins",description:"Documentation for the enterprise plugins for Backstage bundled with SKE.",sidebar_label:"Backstage Plugins"},sidebar:"skeSidebar",previous:{title:"Introduction",permalink:"/ske/"}},c={},l=[{value:"Accessing the private npm registry",id:"accessing-the-private-npm-registry",level:2},{value:"For local development",id:"local-development",level:3},{value:"For Docker",id:"for-docker",level:3},{value:"Installing the front-end plugin",id:"installing-the-front-end-plugin",level:2},{value:"Update the EntityPage",id:"update-the-entitypage",level:3},{value:"Installing the back-end plugin",id:"installing-the-back-end-plugin",level:2},{value:"Configure",id:"configure",level:3},{value:"Add the backend route",id:"add-the-backend-route",level:3},{value:"Add the scaffolder action",id:"add-the-scaffolder-action",level:3},{value:"Using the actions",id:"using-the-actions",level:2},{value:"The Kratix Catalog Entity",id:"the-kratix-catalog-entity",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"The Backstage plugins for SKE are a set of plugins that are to provide additional\nfunctionality to Backstage. The plugins are:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"@syntasso/plugin-ske-backend"}),": The backend plugin for SKE."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"@syntasso/plugin-ske-frontend"}),": The frontend plugin for SKE."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Follow the instructions below to install and configure both plugins."}),"\n",(0,i.jsxs)(n.p,{children:["The instructions below assume that you have created a Backstage app. The\ncommands must be executed from the root of your Backstage app. Refer to the\n",(0,i.jsx)(n.a,{href:"https://backstage.io/docs/getting-started",children:"Backstage official documentation"}),"\nfor instructions on how to create a Backstage app."]}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsx)(n.p,{children:"For the plugins to work, make sure you have the following environment variable set when\nstarting your Backstage app:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"export NODE_OPTIONS=--no-node-snapshot\n"})})]}),"\n",(0,i.jsx)(n.h2,{id:"accessing-the-private-npm-registry",children:"Accessing the private npm registry"}),"\n",(0,i.jsx)(n.h3,{id:"local-development",children:"For local development"}),"\n",(0,i.jsxs)(n.p,{children:["To access the private npm registry in your local machine, you can create a\n",(0,i.jsx)(n.code,{children:".npmrc"})," file in your home directory with the following content:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# replace the token with the provided token\nexport PRIVATE_REGISTRY_TOKEN="<YOUR_TOKEN_HERE>"\n\ncat <<EOF > ~/.npmrc\n@syntasso:registry=https://npm.pkg.github.com\n//npm.pkg.github.com/:_authToken=${PRIVATE_REGISTRY_TOKEN}\nalways-auth=true\nEOF\n'})}),"\n",(0,i.jsx)(n.h3,{id:"for-docker",children:"For Docker"}),"\n",(0,i.jsxs)(n.p,{children:["For Docker builds, you must update the ",(0,i.jsx)(n.code,{children:"packages/backend/Dockerfile"})," in your Backstage\napp so that it can access the private npm registry."]}),"\n",(0,i.jsxs)(n.p,{children:["Update the ",(0,i.jsx)(n.code,{children:"RUN"})," command that is runnnig the ",(0,i.jsx)(n.code,{children:"yarn install"})," to mount a secret, as\ndescribed below:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Dockerfile",children:"RUN --mount=type=cache,target=/home/node/.cache/yarn,sharing=locked,uid=1000,gid=1000 \\\n    #highlight-next-line\n    --mount=type=secret,id=npmrc,target=/app/.npmrc,uid=1000,gid=1000 \\\n    yarn install --frozen-lockfile --production --network-timeout 300000\n"})}),"\n",(0,i.jsxs)(n.p,{children:["When running ",(0,i.jsx)(n.code,{children:"yarn build-image"})," you now need to pass in the additional args\n",(0,i.jsx)(n.code,{children:"--secret id=npmrc,src=$HOME/.npmrc"})," to provide the npm credentials to Docker.\nAlternatively, you can update the ",(0,i.jsx)(n.code,{children:"build-image"})," script in the ",(0,i.jsx)(n.code,{children:"package.json"}),"\nfile to include the additional required flag."]}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsxs)(n.p,{children:["Make sure that the ",(0,i.jsx)(n.code,{children:"~/.npmrc"})," file is in the home directory of the user that is running\nthe Docker build. Refer to the ",(0,i.jsx)(n.a,{href:"#local-development",children:"Local Development"})," section for instructions."]})}),"\n",(0,i.jsx)(n.h2,{id:"installing-the-front-end-plugin",children:"Installing the front-end plugin"}),"\n",(0,i.jsx)(n.p,{children:"From the root of the backstage repository, run:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"yarn add @syntasso/plugin-ske-frontend --cwd packages/app\n"})}),"\n",(0,i.jsx)(n.h3,{id:"update-the-entitypage",children:"Update the EntityPage"}),"\n",(0,i.jsxs)(n.p,{children:["In the ",(0,i.jsx)(n.code,{children:"packages/app/src/components/catalog/EntityPage.tsx"})," file, add the following to the list of imports:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'import { KratixEntityPage } from "@syntasso/plugin-ske-frontend";\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Find the line where the ",(0,i.jsx)(n.code,{children:"const componentPage"})," is being declared. Add the following case\nto the ",(0,i.jsx)(n.code,{children:"EntitySwitch"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'<EntitySwitch.Case if={isComponentType("kratix-resource")}>\n  <KratixEntityPage>{entityWarningContent}</KratixEntityPage>\n</EntitySwitch.Case>\n'})}),"\n",(0,i.jsx)(n.p,{children:"When updated, variable should look similar to this with any other additional case statements:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'const componentPage = (\n  <EntitySwitch>\n    <EntitySwitch.Case if={isComponentType("service")}>\n      {serviceEntityPage}\n    </EntitySwitch.Case>\n    <EntitySwitch.Case if={isComponentType("website")}>\n      {websiteEntityPage}\n    </EntitySwitch.Case>\n    //highlight-start\n    <EntitySwitch.Case if={isComponentType("kratix-resource")}>\n      <KratixEntityPage>{entityWarningContent}</KratixEntityPage>\n    </EntitySwitch.Case>\n    //highlight-end\n    <EntitySwitch.Case>{defaultEntityPage}</EntitySwitch.Case>\n  </EntitySwitch>\n);\n'})}),"\n",(0,i.jsx)(n.h2,{id:"installing-the-back-end-plugin",children:"Installing the back-end plugin"}),"\n",(0,i.jsx)(n.p,{children:"From the root of the backstage repository, run:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"yarn add @syntasso/plugin-ske-backend --cwd packages/backend\n"})}),"\n",(0,i.jsx)(n.h3,{id:"configure",children:"Configure"}),"\n",(0,i.jsxs)(n.p,{children:["Add the following to the ",(0,i.jsx)(n.code,{children:"app-config.yaml"})," file:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'ske:\n  scm:\n    type: "github" # or "gitlab"\n    token: <YOUR_TOKEN> # github/gitlab access token\n    repoUrl: "https://github.com/my-org/my-repo" # repository url\n    path: "resources" # optional; path within the repository\n    branch: "main" # optional; branch to use, default is "main"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"repoUrl"})," is the repository to which Backstage will push the resource\nrequests; you must configure your platform to reconcile on new documents."]}),"\n",(0,i.jsx)(n.h3,{id:"add-the-backend-route",children:"Add the backend route"}),"\n",(0,i.jsxs)(n.p,{children:["Open the ",(0,i.jsx)(n.code,{children:"packages/backend/src/index.ts"})," file and add the following import:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'import { createRouter } from "@syntasso/plugin-ske-backend";\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Then in the ",(0,i.jsx)(n.code,{children:"main()"})," function, add the following near the other endpoints in the ",(0,i.jsx)(n.code,{children:"apiRouter"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'// in the main function...\napiRouter.use("/techdocs", await techdocs(techdocsEnv));\napiRouter.use("/proxy", await proxy(proxyEnv));\napiRouter.use("/search", await search(searchEnv));\n\n//highlight-start\nconst { logger } = createEnv("ske");\napiRouter.use("/ske", await createRouter({ logger, config }));\n//highlight-end\n// ...\n'})}),"\n",(0,i.jsx)(n.h3,{id:"add-the-scaffolder-action",children:"Add the scaffolder action"}),"\n",(0,i.jsxs)(n.p,{children:["Open the ",(0,i.jsx)(n.code,{children:"packages/backend/src/plugins/scaffolder.ts"})," file and add the SKE actions. Your\n",(0,i.jsx)(n.code,{children:"scaffolder.ts"})," should look something like this:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'import { CatalogClient } from "@backstage/catalog-client";\nimport {\n  createBuiltinActions,\n  createRouter,\n} from "@backstage/plugin-scaffolder-backend";\nimport { Router } from "express";\nimport type { PluginEnvironment } from "../types";\nimport { ScmIntegrations } from "@backstage/integration";\n\n//highlight-start\n// Import skeActions\nimport { skeActions } from "@syntasso/plugin-ske-backend";\n//highlight-end\n\nexport default async function createPlugin(\n  env: PluginEnvironment\n): Promise<Router> {\n  const catalogClient = new CatalogClient({\n    discoveryApi: env.discovery,\n  });\n\n  /* To preserve the builtin actions, do the following */\n  const integrations = ScmIntegrations.fromConfig(env.config);\n  const builtInActions = createBuiltinActions({\n    catalogClient,\n    integrations,\n    config: env.config,\n    reader: env.reader,\n  });\n\n  //highlight-start\n  const actions = [\n    ...skeActions({ integrations, config: env.config }),\n    ...builtInActions,\n  ];\n  //highlight-end\n\n  return await createRouter({\n    logger: env.logger,\n    config: env.config,\n    database: env.database,\n    reader: env.reader,\n    catalogClient,\n    identity: env.identity,\n    permissions: env.permissions,\n    //highlight-next-line\n    actions, // <-- add the actions here\n  });\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Once both packages are added and configured, run ",(0,i.jsx)(n.code,{children:"yarn install"})," from the root of\nthe backstage repository to install the new packages."]}),"\n",(0,i.jsx)(n.p,{children:"Your backstage instance is now ready to use the SKE plugins."}),"\n",(0,i.jsx)(n.h2,{id:"using-the-actions",children:"Using the actions"}),"\n",(0,i.jsx)(n.p,{children:"Once both your front-end and back-end plugins are installed and configured, your\nbackstage should now have the SKE actions available and it should be able to render\nKratix resources in the catalog."}),"\n",(0,i.jsxs)(n.p,{children:["To access the documentation for the SKE actions, check the actions documentation\non your Backstage instance, which is available on the ",(0,i.jsx)(n.code,{children:"/create/actions"}),"\nendpoint."]}),"\n",(0,i.jsx)(n.h2,{id:"the-kratix-catalog-entity",children:"The Kratix Catalog Entity"}),"\n",(0,i.jsxs)(n.p,{children:["Any catalog item with ",(0,i.jsx)(n.code,{children:'type: "kratix-resource"'})," will be rendered using the\n",(0,i.jsx)(n.code,{children:"@syntasso/plugin-ske-frontend"})," plugin. To get all features of the plugin, your\nComponent must include a few annotations and labels."]}),"\n",(0,i.jsx)(n.p,{children:"For example, considering a Promise that provides a Jenkins resource, the\ncomponent definition would look like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'apiVersion: backstage.io/v1alpha1\nkind: Component\nmetadata:\n  name: KratixEntity\n  #highlight-start\n  annotations:\n    kratix.io/status: |\n      message: "Some Status Message"\n  labels:\n    kratix.io/group: "marketplace.example.io" # Promise API Group\n    kratix.io/version: "v1alpha1" # Promise API Version\n    kratix.io/kind: Jenkins # Promise API Kind\n    kratix.io/name: my-jenkins # Name of the Resource\n    kratix.io/namespace: default # Namespace of the Resource\n  #highlight-end\nspec:\n  # highlight-next-line\n  type: kratix-resource\n  # remainder of the component spec\n  lifecycle: production\n  owner: user:example\n  # ...\n'})})]})}function h(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>o});var i=t(7294);const a={},s=i.createContext(a);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);