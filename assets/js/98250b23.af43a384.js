"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[3968],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>f});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},m=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=p(r),d=i,f=c["".concat(l,".").concat(d)]||c[d]||u[d]||a;return r?n.createElement(f,o(o({ref:t},m),{},{components:r})):n.createElement(f,o({ref:t},m))}));function f(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:i,o[1]=s;for(var p=2;p<a;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},2621:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var n=r(7462),i=(r(7294),r(3905));const a={description:"Documentation for the Promise Release",title:"Promise Releases",sidebar_label:"Promise Releases",id:"intro"},o=void 0,s={unversionedId:"main/reference/promise-releases/intro",id:"main/reference/promise-releases/intro",title:"Promise Releases",description:"Documentation for the Promise Release",source:"@site/docs/main/05-reference/07-promise-releases/01-intro.md",sourceDirName:"main/05-reference/07-promise-releases",slug:"/main/reference/promise-releases/intro",permalink:"/docs/main/reference/promise-releases/intro",draft:!1,editUrl:"https://github.com/syntasso/kratix-docs/tree/main/docs/main/05-reference/07-promise-releases/01-intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{description:"Documentation for the Promise Release",title:"Promise Releases",sidebar_label:"Promise Releases",id:"intro"},sidebar:"mainSidebar",previous:{title:"Workflows",permalink:"/docs/main/reference/workflows"},next:{title:"Multi-cluster management",permalink:"/docs/main/reference/multicluster-management"}},l={},p=[{value:"Source Reference types",id:"source-reference-types",level:2},{value:"HTTP",id:"http",level:3},{value:"Updating Promise Releases",id:"updating-promise-releases",level:2},{value:"Deleting Promise Releases",id:"deleting-promise-releases",level:2}],m={toc:p};function c(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"A Promise Release represents a Promise with a specific version that will be installed in\nthe Platform. Kratix knows how to fetch the Promise from the specified source and will\nmanage the lifecycle of that Promise."),(0,i.kt)("p",null,"The API for a Promise Release is:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: platform.kratix.io/v1alpha1\nkind: PromiseRelease\nmetadata:\n  name: jenkins-release\nspec:\n  version: # The version of the Promise\n  sourceRef:\n    type: # Source type: http, git, etc.\n    # Source specific fields\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"spec.version")," represents the version of the Promise as it relates to your platform.\nIt is an arbitrary number and doesn't need to follow any specific format."),(0,i.kt)("p",null,"Promise authors can decide to version their Promises either via a Promise Release or by\nversioning their Promise definition directly. In the latter case, platform engineers\nmust wrap that Promise in a Promise Release and assign it a version."),(0,i.kt)("h2",{id:"source-reference-types"},"Source Reference types"),(0,i.kt)("p",null,"Currently, the following ",(0,i.kt)("inlineCode",{parentName:"p"},"sourceRef.types")," are supported:"),(0,i.kt)("h3",{id:"http"},"HTTP"),(0,i.kt)("p",null,"The HTTP ",(0,i.kt)("inlineCode",{parentName:"p"},"sourceRef.type")," is used to fetch a Promise from a HTTP endpoint. The\n",(0,i.kt)("inlineCode",{parentName:"p"},"sourceRef.url")," must be set to a valid URL containing a single Promise definition."),(0,i.kt)("p",null,"The below example shows a Promise Release using the HTTP ",(0,i.kt)("inlineCode",{parentName:"p"},"sourceRef.type"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: platform.kratix.io/v1alpha1\nkind: PromiseRelease\nmetadata:\n  name: jenkins-release\nspec:\n  version: v1.1.0\n  sourceRef:\n    type: http\n    url: https://raw.githubusercontent.com/syntasso/kratix-marketplace/main/jenkins/promise.yaml\n")),(0,i.kt)("h2",{id:"updating-promise-releases"},"Updating Promise Releases"),(0,i.kt)("p",null,"Whenever the ",(0,i.kt)("inlineCode",{parentName:"p"},"spec.version")," of a Promise Release changes, Kratix will\nautomatically fetch the latest Promise definition from the ",(0,i.kt)("inlineCode",{parentName:"p"},"sourceRef")," and\nupdate it in the Platform."),(0,i.kt)("p",null,"Note that updating the Promise definition in the remote location will not\nautomatically update the Promise in the Platform. The Promise Release\n",(0,i.kt)("inlineCode",{parentName:"p"},"spec.version")," must be updated to trigger the Promise update."),(0,i.kt)("p",null,"If the Promise is deleted from Platform, but the Promise Release still exists, Kratix\nwill automatically re-install the Promise."),(0,i.kt)("h2",{id:"deleting-promise-releases"},"Deleting Promise Releases"),(0,i.kt)("p",null,"When a Promise Release is deleted, the underlying Promise is also deleted. This will\ndelete all resources associated with that Promise. See ",(0,i.kt)("a",{parentName:"p",href:"../promises/delete"},"Deleting a Promise"),"."))}c.isMDXComponent=!0}}]);