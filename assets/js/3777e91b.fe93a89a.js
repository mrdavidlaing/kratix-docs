"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[2035],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),p=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(n),u=r,f=c["".concat(s,".").concat(u)]||c[u]||m[u]||o;return n?i.createElement(f,a(a({ref:t},d),{},{components:n})):i.createElement(f,a({ref:t},d))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:r,a[1]=l;for(var p=2;p<o;p++)a[p]=n[p];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2347:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var i=n(7462),r=(n(7294),n(3905));const o={title:"Workflows",sidebar_label:"Workflows",description:"Learn more about conventions in Workflows",id:"workflows"},a=void 0,l={unversionedId:"main/reference/workflows",id:"main/reference/workflows",title:"Workflows",description:"Learn more about conventions in Workflows",source:"@site/docs/main/05-reference/06-workflows.md",sourceDirName:"main/05-reference",slug:"/main/reference/workflows",permalink:"/docs/main/reference/workflows",draft:!1,editUrl:"https://github.com/syntasso/kratix-docs/tree/main/docs/main/05-reference/06-workflows.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"Workflows",sidebar_label:"Workflows",description:"Learn more about conventions in Workflows",id:"workflows"},sidebar:"mainSidebar",previous:{title:"Updates",permalink:"/docs/main/reference/resources/updates"},next:{title:"Promise Releases",permalink:"/docs/main/reference/promise-releases/intro"}},s={},p=[{value:"The Pipeline kind",id:"the-pipeline-kind",level:2},{value:"Volumes",id:"volumes",level:2},{value:"Input",id:"input",level:3},{value:"Output",id:"output",level:3},{value:"Metadata",id:"metadata",level:3},{value:"Environment Variables",id:"environment-variables",level:2}],d={toc:p};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"A ",(0,r.kt)("a",{parentName:"p",href:"./promises/intro"},"Kratix Promise")," can be configured with a series of\nWorkflows defined in the Promise's ",(0,r.kt)("inlineCode",{parentName:"p"},"workflows")," key."),(0,r.kt)("p",null,"Within the Workflows, Promise writers can trigger a series of actions\n(pipelines) that must be executed when certain conditions are met in the system.\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"workflows")," is defined as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"platform: platform.kratix.io/v1alpha1\nkind: Promise\nmetadata:\n  # ...\nspec:\n  # ...\n  workflows:\n    # lifecycle hook for Resources\n    resource:\n      # lifecycle hook for creates/updates/ongoing reconciliation of Resources\n      configure:\n        -  # Pipeline definition\n      # lifecycle hook for deletion of Resources\n      delete:\n        -  # Pipeline definition\n\n    # lifecycle hook for Promises\n    promise:\n      # lifecycle hook for creates/updates/ongoing reconciliation of the Promise\n      configure:\n        -  # Pipeline definition\n      # lifecycle hook for deletion of Promises\n      delete:\n        -  # Pipeline definition\n")),(0,r.kt)("p",null,"A particular workflow (for example, ",(0,r.kt)("inlineCode",{parentName:"p"},"resource.configure"),") is an array of\nKubernetes objects that will be executed in order. Kratix provides a built-in kind\n(",(0,r.kt)("inlineCode",{parentName:"p"},"Pipeline"),", see below) that makes the process of writing Workflows easier."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Currently, Kratix only supports ",(0,r.kt)("inlineCode",{parentName:"p"},"kind: Pipeline")," in the workflow definition. In\nthe future, we will extend this to support any other Kubernetes Objects, like\nTekton Pipelines, Argo Workflows, plain Pods/Jobs, etc.")),(0,r.kt)("h2",{id:"the-pipeline-kind"},"The Pipeline kind"),(0,r.kt)("p",null,"The Kratix ",(0,r.kt)("inlineCode",{parentName:"p"},"Pipeline")," kind is a simple wrapper around a Kubernetes Pod. It will\nautomatically mount the necessary ",(0,r.kt)("a",{parentName:"p",href:"#volumes"},"Kratix Volumes")," and set\n",(0,r.kt)("a",{parentName:"p",href:"#environment-variables"},"Enviromnemt Variables")," for the provided containers."),(0,r.kt)("p",null,"It is defined as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: platform.kratix.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: # name\nspec:\n  volumes: # optional\n  containers:\n    - name: # container name\n      image: # container image\n      # optional fields\n      command: []\n      args: []\n      env: []\n      envFrom: []\n      volumeMounts: []\n")),(0,r.kt)("p",null,"Refer to the ",(0,r.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#PodSpec"},"Kubernetes Pod Spec\ndocumentation"),"\nfor more information on the fields above."),(0,r.kt)("p",null,"To access secrets in the pipeline, refer to the ",(0,r.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/concepts/configuration/secret/"},"Kubernetes documentation"),"."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Not all fields from the Pod spec are supported. We will add support for more\nfields in the future.")),(0,r.kt)("h2",{id:"volumes"},"Volumes"),(0,r.kt)("p",null,"Kratix will run each container in the ",(0,r.kt)("inlineCode",{parentName:"p"},"spec.containers")," list in order,\nproviding a set of common volumes, as defined below."),(0,r.kt)("h3",{id:"input"},"Input"),(0,r.kt)("p",null,"Kratix provides a input directory to the container at ",(0,r.kt)("inlineCode",{parentName:"p"},"/kratix/input"),". This\ndirectory is populated with different files depending on the type of Workflow."),(0,r.kt)("p",null,"In Promise Worflows, all containers will have access to an ",(0,r.kt)("inlineCode",{parentName:"p"},"object.yaml")," file\nwithin the ",(0,r.kt)("inlineCode",{parentName:"p"},"/kratix/input")," directory. The ",(0,r.kt)("inlineCode",{parentName:"p"},"object.yaml")," contains the full\nPromise definition."),(0,r.kt)("p",null,"In Resource Workflows, the ",(0,r.kt)("inlineCode",{parentName:"p"},"object.yaml")," file contains the Resource\ndefinition submitted to the platform."),(0,r.kt)("h3",{id:"output"},"Output"),(0,r.kt)("p",null,"At the end of the workflow, all files present in the output volume, mounted at\n",(0,r.kt)("inlineCode",{parentName:"p"},"/kratix/output"),", will be written to the State Store. All containers in the\npipeline can write to this volume, and any container can add, update, or remove\ndocuments from this directory."),(0,r.kt)("p",null,"In Promise Workflows, if the Promise specifies additional ",(0,r.kt)("inlineCode",{parentName:"p"},".spec.dependencies"),",\nthese will be automatically added to the directory at the beginning of the\npipeline at ",(0,r.kt)("inlineCode",{parentName:"p"},"/kratix/output/static/dependencies.yaml"),"."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Files written to ",(0,r.kt)("inlineCode",{parentName:"p"},"/kratix/output")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"delete")," pipelines will be ignored.")),(0,r.kt)("h3",{id:"metadata"},"Metadata"),(0,r.kt)("p",null,"All containers in the ",(0,r.kt)("inlineCode",{parentName:"p"},"configure")," Pipeline have access to\nthis directory, mounted at ",(0,r.kt)("inlineCode",{parentName:"p"},"/kratix/metadata"),"."),(0,r.kt)("p",null,"Pipeline containers can control aspects of how Kratix behaves by creating\nspecial files in this directory:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"destination-selectors.yaml")," can be added to any Promise to\nfurther refine where the resources in ",(0,r.kt)("inlineCode",{parentName:"li"},"/kratix/output")," will be\n",(0,r.kt)("a",{parentName:"li",href:"./multicluster-management"},"scheduled"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"status.yaml")," allows the Pipeline to communicate information about the\nResource back to the requester. See ",(0,r.kt)("a",{parentName:"li",href:"./resources/status"},"status documentation\nfor more information"),".")),(0,r.kt)("p",null,"Kratix scans for these files and ignores all other files in the ",(0,r.kt)("inlineCode",{parentName:"p"},"/kratix/metadata"),"\ndirectory. If you need to pass additional information to the next container in\nthe pipeline, you can safely write to the ",(0,r.kt)("inlineCode",{parentName:"p"},"/kratix/metadata")," directory."),(0,r.kt)("h2",{id:"environment-variables"},"Environment Variables"),(0,r.kt)("p",null,"Kratix will set the following environment variables for all containers in the\nworkflow:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Variable"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"KRATIX_WORKFLOW_ACTION")),(0,r.kt)("td",{parentName:"tr",align:null},"The action that triggered the workflow. Either ",(0,r.kt)("inlineCode",{parentName:"td"},"configure")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"delete"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"KRATIX_WORKFLOW_TYPE")),(0,r.kt)("td",{parentName:"tr",align:null},"The type of workflow. Either ",(0,r.kt)("inlineCode",{parentName:"td"},"resource")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"promise"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"KRATIX_PROMISE_NAME")),(0,r.kt)("td",{parentName:"tr",align:null},"The name of the Promise.")))),(0,r.kt)("p",null,"By checking the ",(0,r.kt)("inlineCode",{parentName:"p"},"KRATIX_WORKFLOW_ACTION")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"KRATIX_WORKFLOW_TYPE")," environment\nvariables, you can write a single container that can be used in both ",(0,r.kt)("inlineCode",{parentName:"p"},"configure"),"\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"delete")," workflows."))}c.isMDXComponent=!0}}]);