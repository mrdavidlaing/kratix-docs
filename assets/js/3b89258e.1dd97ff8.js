"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[1705],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>k});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),p=d(n),c=r,k=p["".concat(s,".").concat(c)]||p[c]||u[c]||l;return n?a.createElement(k,i(i({ref:t},m),{},{components:n})):a.createElement(k,i({ref:t},m))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[p]="string"==typeof e?e:r,i[1]=o;for(var d=2;d<l;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},6880:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var a=n(7462),r=(n(7294),n(3905));const l={title:"Multi-cluster management",sidebar_label:"Multi-cluster management",description:"Learn more about how Kratix schedules Promises and Resources, and how you can control the scheduling process."},i=void 0,o={unversionedId:"main/reference/multicluster-management",id:"main/reference/multicluster-management",title:"Multi-cluster management",description:"Learn more about how Kratix schedules Promises and Resources, and how you can control the scheduling process.",source:"@site/docs/main/05-reference/04-multicluster-management.md",sourceDirName:"main/05-reference",slug:"/main/reference/multicluster-management",permalink:"/docs/main/reference/multicluster-management",draft:!1,editUrl:"https://github.com/syntasso/kratix-docs/tree/main/docs/main/05-reference/04-multicluster-management.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Multi-cluster management",sidebar_label:"Multi-cluster management",description:"Learn more about how Kratix schedules Promises and Resources, and how you can control the scheduling process."},sidebar:"mainSidebar",previous:{title:"BucketStateStore",permalink:"/docs/main/reference/statestore/bucketstatestore"},next:{title:"Uninstalling Kratix",permalink:"/docs/main/reference/deleting-kratix"}},s={},d=[{value:"Scheduling Promises",id:"promises",level:2},{value:"Scheduling Resources",id:"resources",level:2},{value:"Dynamic Scheduling",id:"pipeline",level:3},{value:"Compound Promises",id:"compound-promises",level:2}],m={toc:d};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"One of the most powerful Kratix features is the ability Platform teams have to\nfully control the scheduling of work across extensive and diverse infrastructure, i.e., to\ndetermine in which Kubernetes cluster (or other infrastructure) a certain workload should be deployed to."),(0,r.kt)("p",null,"In Kratix, scheduling happens in two stages:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Determining Clusters should be available to a given Promise (",(0,r.kt)("a",{parentName:"li",href:"#promises"},"Scheduling\nPromises"),")"),(0,r.kt)("li",{parentName:"ol"},"Determining where the Resources will run following a request for a Promise Resource (",(0,r.kt)("a",{parentName:"li",href:"#resources"},"Scheduling Workloads"),")")),(0,r.kt)("p",null,"The following sections in this page document those stages. For hands-on scheduling guides,\ncheck the ",(0,r.kt)("a",{parentName:"p",href:"../guides/scheduling-clusters"},"Adding a new Worker Cluster")," and ",(0,r.kt)("a",{parentName:"p",href:"../guides/compound-promises"},"Compound\nPromise")," pages."),(0,r.kt)("h2",{id:"promises"},"Scheduling Promises"),(0,r.kt)("p",null,"When a Promise is installed, Kratix will deploy the Promise dependencies into\nall Clusters registered with the Platform. When a new Cluster is registered,\nKratix will also deploy all Promise dependencies into this new Cluster."),(0,r.kt)("p",null,"Platform teams can, however, control which Clusters receive which Promises by\nusing a combination of Cluster labels and Promise selectors."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"labels")," in the Cluster document are the standard Kubernetes\n",(0,r.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/"},"labels"),":\nsimple, arbitrary, key/value pairs. In the example below, the Cluster object is\nbeing created with a label ",(0,r.kt)("inlineCode",{parentName:"p"},"environment")," with value ",(0,r.kt)("inlineCode",{parentName:"p"},"dev"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="worker-cluster-2.yaml"',title:'"worker-cluster-2.yaml"'},"apiVersion: platform.kratix.io/v1alpha1\nkind: Cluster\nmetadata:\n  # highlight-start\n  labels:\n    environment: dev\n  # highlight-end\n  # ...\n")),(0,r.kt)("p",null,"In the Promise document, the scheduling is controlled via the ",(0,r.kt)("inlineCode",{parentName:"p"},"spec.scheduling"),"\nkey, following the format below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: platform.kratix.io/v1alpha1\nkind: Promise\nmetadata: #...\nspec:\n  scheduling:\n  - target:\n      matchLabels:\n        key: value\n")),(0,r.kt)("p",null,"By setting the ",(0,r.kt)("inlineCode",{parentName:"p"},"matchLabels")," with a ",(0,r.kt)("inlineCode",{parentName:"p"},"key: value")," pair, Platform teams can\ncontrol to which Clusters (i.e. ",(0,r.kt)("inlineCode",{parentName:"p"},"target"),") the Promise's dependencies should be\nscheduled. ",(0,r.kt)("inlineCode",{parentName:"p"},"matchLabels")," is a ",(0,r.kt)("em",{parentName:"p"},"equality-based")," selector. This means it will only\nmatch Clusters that have keys/values that match. You can add multiple key/value\npairs to the ",(0,r.kt)("inlineCode",{parentName:"p"},"matchLabels"),", but note that it will only match when the Cluster\nhas a matching label for ",(0,r.kt)("em",{parentName:"p"},"all")," the selectors."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"title=jenkins-promise.yaml",title:"jenkins-promise.yaml"},"apiVersion: platform.kratix.io/v1alpha1\nkind: Promise\nmetadata:\n  name: jenkins-promise\nspec:\n  #highlight-start\n  scheduling:\n    - target:\n        matchLabels:\n          environment: dev\n  #highlight-end\n  dependencies:\n  # ...\n")),(0,r.kt)("p",null,"If a Promise has no ",(0,r.kt)("inlineCode",{parentName:"p"},"scheduling"),", it will be applied to all Clusters. If a\nCluster has no ",(0,r.kt)("inlineCode",{parentName:"p"},"labels"),", only Promises with no ",(0,r.kt)("inlineCode",{parentName:"p"},"scheduling")," set will be applied."),(0,r.kt)("p",null,"The table below contains a few examples:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Cluster Label"),(0,r.kt)("th",{parentName:"tr",align:null},"Promise Selector"),(0,r.kt)("th",{parentName:"tr",align:null},"Match?"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"no label")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"no selector")),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"env: dev")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"no selector")),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"env: dev")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"env: dev")),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"env: dev")," ",(0,r.kt)("br",null)," ",(0,r.kt)("inlineCode",{parentName:"td"},"zone:eu")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"env: dev")),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"env: dev")," ",(0,r.kt)("br",null)," ",(0,r.kt)("inlineCode",{parentName:"td"},"zone:eu")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"env: dev")," ",(0,r.kt)("br",null)," ",(0,r.kt)("inlineCode",{parentName:"td"},"zone:eu")),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"env: dev")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"env: prod")),(0,r.kt)("td",{parentName:"tr",align:null},"\u26d4\ufe0f")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"env: dev")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"env: dev")," ",(0,r.kt)("br",null)," ",(0,r.kt)("inlineCode",{parentName:"td"},"zone:eu")),(0,r.kt)("td",{parentName:"tr",align:null},"\u26d4\ufe0f")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"no label")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"env: dev")),(0,r.kt)("td",{parentName:"tr",align:null},"\u26d4\ufe0f")))),(0,r.kt)("h2",{id:"resources"},"Scheduling Resources"),(0,r.kt)("p",null,"When a new request for a Resource comes in, Kratix reacts by triggering the\n",(0,r.kt)("inlineCode",{parentName:"p"},"resource.configure")," Workflow, as defined in the Promise ",(0,r.kt)("inlineCode",{parentName:"p"},"spec.workflows"),".\nIf the Workflow contains a Kratix Pipeline, the outputs of the Pipeline will then use the labels to identify one matching Kratix Clusters which will be the target Cluster."),(0,r.kt)("p",null,"By default, Kratix will randomly select a registered Cluster to schedule the Resource.\nIf the Promise has ",(0,r.kt)("inlineCode",{parentName:"p"},"spec.scheduling")," set, the workload can only be scheduled to a Cluster that has matching labels for the Promise."),(0,r.kt)("p",null,"It is possible to dynamically determine where Resources will go during the Kratix Pipeline. The section below documents the process."),(0,r.kt)("h3",{id:"pipeline"},"Dynamic Scheduling"),(0,r.kt)("p",null,"Kratix mounts a ",(0,r.kt)("inlineCode",{parentName:"p"},"metadata")," directory at the root of the Pipeline's container when\ninstantiating the Configure Pipeline. At scheduling time, Kratix will look for a\n",(0,r.kt)("inlineCode",{parentName:"p"},"scheduling.yaml")," file in that directory with the following format:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"- target:\n    matchLabels:\n      key: value\n")),(0,r.kt)("p",null,"Kratix will then ",(0,r.kt)("strong",{parentName:"p"},"add")," those to what is already present in the Promise\n",(0,r.kt)("inlineCode",{parentName:"p"},"spec.scheduling")," field when identifying a target Cluster."),(0,r.kt)("p",null,"There is no way to overwrite keys. For example, if the Promise defines\n",(0,r.kt)("inlineCode",{parentName:"p"},"matchLabels")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"env: dev")," and the Pipeline defines it with ",(0,r.kt)("inlineCode",{parentName:"p"},"env: prod"),",\nKratix will only ever look for Clusters with the ",(0,r.kt)("inlineCode",{parentName:"p"},"env: dev")," label."),(0,r.kt)("p",null,"The table below contains a few examples:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Cluster Label"),(0,r.kt)("th",{parentName:"tr",align:null},"Promise Selector"),(0,r.kt)("th",{parentName:"tr",align:null},"cluster-selectors.yaml"),(0,r.kt)("th",{parentName:"tr",align:null},"Match?"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"no label")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"no selector")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"no_selector")),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"env: dev")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"no selector")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"no_selector")),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"env: dev")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"env: dev")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"no_selector")),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"env: dev")," ",(0,r.kt)("br",null)," ",(0,r.kt)("inlineCode",{parentName:"td"},"zone: eu")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"env: dev")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"zone: eu")),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"env: dev")," ",(0,r.kt)("br",null)," ",(0,r.kt)("inlineCode",{parentName:"td"},"zone: eu")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"no selector")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"zone: eu")),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"env: dev")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"env: dev")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"env: prod")),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"env: dev")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"env: prod")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"env: dev")),(0,r.kt)("td",{parentName:"tr",align:null},"\u26d4\ufe0f")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"env: dev")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"env: dev")," ",(0,r.kt)("br",null)," ",(0,r.kt)("inlineCode",{parentName:"td"},"zone: eu")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"no_selector")),(0,r.kt)("td",{parentName:"tr",align:null},"\u26d4\ufe0f")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"no label")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"no_selector")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"env: dev")),(0,r.kt)("td",{parentName:"tr",align:null},"\u26d4\ufe0f")))),(0,r.kt)("p",null,"In the event that more than one cluster matches the resulting labels, Kratix\nwill randomly select within the available matching registered Clusters. If you\nprefer to be certain of a single cluster match, it is suggested that you add a\nunique identifier to all clusters (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"clusterName"),") so that there can only\never be a single match."),(0,r.kt)("h2",{id:"compound-promises"},"Compound Promises"),(0,r.kt)("p",null,"Compound Promises are Promises that, in their dependencies, contain other\nPromises. That ability allows Platform teams deliver entire stacks on demand,\ninstead of simple databases or services."),(0,r.kt)("p",null,"To enable this functionality, the following needs to be true:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The Platform cluster must register itself as a Worker cluster"),(0,r.kt)("li",{parentName:"ul"},"The GitOps toolkit must be installed in the Platform cluster"),(0,r.kt)("li",{parentName:"ul"},"The Compound Promise must instruct Kratix to install its dependencies (i.e. the other Promises)\nin the Platform cluster"),(0,r.kt)("li",{parentName:"ul"},"Optionally, the sub-Promises may instruct Kratix to install their dependencies outside the\nPlatform cluster")),(0,r.kt)("p",null,"For detailed instruction on the above, please check the ",(0,r.kt)("a",{parentName:"p",href:"../guides/compound-promises"},"Compound\nPromises")," guide."))}p.isMDXComponent=!0}}]);