"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[5919],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),d=o,f=p["".concat(l,".").concat(d)]||p[d]||m[d]||a;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:o,i[1]=s;for(var u=2;u<a;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5359:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var r=n(7462),o=(n(7294),n(3905));const a={title:"Resource Request Status",sidebar_label:"Status",description:"Documentation on how to expose information from the Pipeline to the Platform user through the Resource Request Status field"},i="Status",s={unversionedId:"main/reference/resource-requests/status",id:"main/reference/resource-requests/status",title:"Resource Request Status",description:"Documentation on how to expose information from the Pipeline to the Platform user through the Resource Request Status field",source:"@site/docs/main/05-reference/05-resource-requests/04-status.md",sourceDirName:"main/05-reference/05-resource-requests",slug:"/main/reference/resource-requests/status",permalink:"/docs/main/reference/resource-requests/status",draft:!1,editUrl:"https://github.com/syntasso/kratix-docs/tree/main/docs/main/05-reference/05-resource-requests/04-status.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Resource Request Status",sidebar_label:"Status",description:"Documentation on how to expose information from the Pipeline to the Platform user through the Resource Request Status field"},sidebar:"mainSidebar",previous:{title:"Deleting",permalink:"/docs/main/reference/resource-requests/deleting-a-resource-request"},next:{title:"StateStores",permalink:"/docs/main/reference/statestore/intro"}},l={},u=[{value:"Conditions",id:"conditions",level:2}],c={toc:u};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"status"},"Status"),(0,o.kt)("p",null,"As part of your pipeline you can optionally send information about the\nresource request back to the resource requester by writing information to ",(0,o.kt)("inlineCode",{parentName:"p"},"/metadata/status.yaml"),".\nThe file can contain arbitrary key values, with the ",(0,o.kt)("inlineCode",{parentName:"p"},"message")," key being a special key that is communicated back\nto the user when running ",(0,o.kt)("inlineCode",{parentName:"p"},"kubectl get <resource-request>"),". For example if my pipeline wrote the\nfollowing to the ",(0,o.kt)("inlineCode",{parentName:"p"},"/metadata/status.yaml")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"message: Resource request provisioned with database size 10Gb\nconnectionDetails:\n  host: example.com\n  dbName: root\n")),(0,o.kt)("p",null,"Kratix would pickup the status and apply it back to the resource request. The\nuser would see the following when getting the resource request:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl get database\nNAME                   STATUS\nexample                Resource request provisioned with database size 10Gb\n")),(0,o.kt)("p",null,"And if they inspected the full status output ",(0,o.kt)("inlineCode",{parentName:"p"},"kubectl get database example -o yaml"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: example.promise.syntasso.io/v1\nkind: Database\n...\nstatus:\n message: Resource request provisioned with database size 10Gb\n connectionDetails:\n   host: example.com\n   dbName: root\n")),(0,o.kt)("p",null,"They will see all the additional key values. Status provides a simple way to\ncommunicate information back to the resource requester. Kratix will automatically\ninject the required fields for status into the ",(0,o.kt)("inlineCode",{parentName:"p"},"xaasCRD"),",you do not have to manually\nadd these fields."),(0,o.kt)("h2",{id:"conditions"},"Conditions"),(0,o.kt)("p",null,"Kratix follows the Kubernetes convention of using ",(0,o.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-states"},"conditions"),"\nto convey the status of a resource and to allow programmatic interactions. When a\nresource request is created the ",(0,o.kt)("inlineCode",{parentName:"p"},"PipelineCompleted")," condition will be set. The ",(0,o.kt)("inlineCode",{parentName:"p"},"status"),"\nfor the pipeline will be ",(0,o.kt)("inlineCode",{parentName:"p"},"False")," until the pipeline is completed. For example\nwhen a resource request is created for the first time the status will look like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'status:\n  conditions:\n  - lastTransitionTime: "2023-03-07T15:50:22Z"\n    message: Pipeline has not completed\n    reason: PipelineNotCompleted\n    status: "False"\n    type: PipelineCompleted\n')),(0,o.kt)("p",null,"once the pipeline has been completed it will look like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'status:\n  conditions:\n  - lastTransitionTime: "2023-03-07T15:50:30Z"\n    message: Pipeline completed\n    reason: PipelineExecutedSuccessfully\n    status: "True"\n    type: PipelineCompleted\n')),(0,o.kt)("p",null,"Conditions can be used to by external systems to programmatically check when a\nresource requests pipeline has been completed. Kubectl also has built-in support\nfor waiting for a condition to be met. For example after creating a resource\nrequest a user can run the following to have the CLI wait for the pipeline to be\ncompleted:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"kubectl wait redis/example --for=condition=PipelineCompleted --timeout=60s\n")),(0,o.kt)("p",null,"Once the condition is ",(0,o.kt)("inlineCode",{parentName:"p"},"True")," the command will exit."))}p.isMDXComponent=!0}}]);