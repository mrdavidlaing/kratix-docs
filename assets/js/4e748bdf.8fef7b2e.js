"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[2376],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(n),d=i,h=u["".concat(s,".").concat(d)]||u[d]||m[d]||l;return n?a.createElement(h,r(r({ref:t},p),{},{components:n})):a.createElement(h,r({ref:t},p))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:i,r[1]=o;for(var c=2;c<l;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9218:(e,t,n)=>{n.d(t,{Z:()=>b});var a,i,l,r,o,s,c,p,u,m,d,h,k,f,g=n(7294);function y(){return y=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},y.apply(this,arguments)}const b=e=>{let{title:t,titleId:n,...b}=e;return g.createElement("svg",y({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 870.496 145.505","aria-labelledby":n},b),t?g.createElement("title",{id:n},t):null,a||(a=g.createElement("defs",null,g.createElement("style",null,'@font-face{font-family:"Virgil";src:url(https://excalidraw.com/Virgil.woff2)}@font-face{font-family:"Cascadia";src:url(https://excalidraw.com/Cascadia.woff2)}'))),i||(i=g.createElement("path",{fill:"#fff",d:"M0 0h870.496v145.505H0z"})),l||(l=g.createElement("g",{strokeOpacity:.5,fillOpacity:.5,fillRule:"evenodd",strokeLinecap:"round"},g.createElement("path",{d:"M604.98 16.076s0 0 0 0m0 0s0 0 0 0m-10.38-3.01c7.11 4.35 12.76 11.74 15.85 12.26m-14.04-12.79c4.4 6.59 10.92 10.87 14.49 14.08m-20.24-13.8c6.87 8.94 15.56 14.2 28.16 27.45m-29.32-27.02c9.59 7.21 17.34 14.73 29.32 25.89m-34.93-25.1c14.4 11.6 26.42 23.24 40.29 35.59m-39.99-36.65c13.06 11.66 26.67 23.02 39.08 36.08m-45.55-37.14c10.77 10.46 18.84 19.44 48.18 42.54m-48.51-40.73c12.65 9.94 22.47 19.64 47.36 39.77m-55.11-40.24c20.45 18.77 42.36 33.83 55.18 45.23m-52.53-45.12c16.38 14.82 36.16 32.24 52.3 46.87m-60.27-46.44c14.69 12.87 28.61 21.32 58.35 48.65m-56.26-48.09c15.98 14.01 31.57 26.93 55.93 47.93m-61.72-47.26c10.88 11.32 25.44 21.47 61.4 52.2m-63.54-54.28c24.27 23.01 49.09 42.79 64.05 55.62m-70.6-55.76c20.3 18.22 43.11 37.63 67.3 60.65m-65.49-60.22c15.78 15.64 32.58 29.54 67.9 58.62m-72.65-58.34c18.78 19.69 38.44 34.41 71.58 63.95m-73.97-63.76c27.76 22.74 53.88 45.53 72.43 62.43m-78.35-64.02c24.39 19.94 50.41 41.92 78.84 69.92m-79.14-69.33c22.93 18.37 43.06 38.58 77.84 69.09m-81.88-66.97c24.13 19.13 47.82 40.53 81.78 71.63m-82.59-72.98c27.4 24.47 55.91 49.26 83.53 73.56m-88.21-73.15c27.88 25.49 53.9 51.32 86.33 76.75m-87.59-76.2c17.58 14.98 35.14 30.69 88.36 76.03m-94.28-75.52c22.09 19.02 46.3 38.8 91.04 78.12m-90.53-78.21c26.93 22.87 53.51 45.91 90.92 79.53m-99.2-82.58c28.39 23.51 53.93 49.81 99.55 86.49m-98.51-85.22c37.77 33.36 76.02 66.93 97.03 85.66m-105.36-85.61c42.84 34.71 79.12 68.26 104.49 87.2m-103.33-86.73c40.05 34.36 79.4 68.69 102.71 88.25m-108.82-89.36c30.04 29.07 61.79 53.98 106.84 90.82m-105.95-88.77c26.22 21.97 49.94 42.89 104.44 89.06m-110.52-91.11c28.72 26.64 58.3 52.51 105.67 94.44m-106.31-92.73c31.41 25.4 62.55 53.17 107.95 91.94m-111.39-92.71c36.38 34.23 77.86 68.26 107.8 96.39m-110.1-96.76c30.25 26.24 61.13 53.96 110.91 96.73m-115.3-95.7c35.04 30.58 70.5 60.9 110.43 98.26m-111.46-99.33c28.47 24.12 55.97 47.55 112.49 100.13M482 12.396c29.85 28.79 62.17 55.06 113.49 101.52M481.01 13.486c34.52 30.91 69.35 60.75 114.81 99.39m-.3.98s0 0 0 0m0 0s0 0 0 0M473.45 12.306c33.3 27.97 66.24 54.41 115.48 101.59M474.99 13.226c31.21 29.59 63.84 57.24 115.41 101.33M469.8 14.006c23.57 22.66 49.8 44.04 113.92 101.46m-115.91-101.6c38.53 35.4 78.85 69.56 115.31 100.9M460.68 14.186c24.45 19.36 47.12 39.23 115.36 100.89M462.78 14.206c40 36.18 83.1 73.35 114.6 100.18M456.47 13.676c36.77 34.27 78.23 68.25 114.59 100.78M456.84 14.276c31.71 27.69 64.6 56.28 114.02 100.17m-118.9-98.99c39.2 35.8 84.84 73.43 112.72 98.04m-114.06-99.39c30.95 29.48 65.42 58.23 114.72 100.46M445.41 13.516c35.77 30.39 69.12 60.51 114.4 101.34m-116.44-100c31.58 27.03 62.62 53.87 116.63 100.15M438.83 13.486c32.2 30.49 66.69 58.13 114.63 99.37m-115.28-99.88c27.21 23.9 53.33 47.19 114.1 100.89m-119.43-101.1c41.72 39.14 87.94 77.31 112.18 101.31M432.7 14.596c25.22 23.46 52.91 46.47 114.48 98.62m-119.71-98.66c38.94 32.7 76.26 68.89 111.68 98.89M424.89 13.126c38.92 33.52 74.29 66.04 115.08 100.38m-119.53-98.93c24.66 22.06 51.18 47.15 114.01 97.83m-115.27-98.14c34.66 31.05 67.96 60.7 114.66 98.87m-121.6-97.29c31.48 24.24 62.09 47.38 117.69 97.61M412.5 14.216c36.24 31.99 71.98 61.56 115.73 99.28m-119.75-98.14c28.66 26.41 63.59 55.59 113.47 99.72m-115.5-102.29c35.57 30.97 71.07 62.13 116.26 100.37m-122.06-99.03c35.11 30.26 67.85 57.35 113.97 100.19m-113.56-99.47c36.25 28.28 70.88 58.64 114.15 98.14m-118.27-99.61c37.86 35.67 79.22 70.26 111.63 99.51M395.45 12.846c29.5 27.34 59.77 54.76 114.35 100.75m-119.21-98.52c26.6 23.62 55.79 47.61 113.14 98.25m-114.59-98.43c31.32 26.98 64.14 53.36 114.18 99m-120.41-99.04c25.48 21.01 52.52 42.78 116.82 100.69M382.92 13.956c34.64 29.73 66.55 58.78 115.76 101.14m-122.29-99.84c28.51 24.27 52.57 44.56 114.5 98.48m-114-99.16c35.28 30.06 70.82 61.6 114.89 99.4m-122.09-99.41c32.83 28.21 65.33 57.23 116.86 98.42m-115.16-98.9c33.08 28.39 68.14 58.61 113.35 98.83m-118.72-97.43c32.85 27.84 67.34 59.59 115.89 97.87m-117.68-98.65c41.14 35 82.47 70.25 116.39 99.72M359.93 13.206c31.3 27.29 59.84 54.26 114.85 98.83m-115.35-98.04c31.54 28.2 64.11 55.94 113.7 100.61M354.11 13.486c28.4 23.26 55.59 47.82 113.87 100.43m-115.09-99.52c34.28 31.52 70.36 62.76 115.99 99.84m-123.15-98.88c36.97 31.02 74.79 66.72 116.6 99.1m-115.65-100.2c29.47 25.95 60.05 51.85 114.64 98.76m-121.87-99.14c40.42 33.53 83.41 67.79 115.53 100.48M340.91 14.066c35.31 32.29 70.3 63.07 114.03 100.5m-121.13-99.71c42.13 31.46 81.59 67.21 114.45 98.73M334.05 13.556c38.68 32.25 75.81 63.6 115.01 100.42M329.98 12.866c27.99 28.94 59.25 56.68 114.45 102.67M328.59 15.106c25.45 22.99 52.35 45.54 113.87 99.19m-119.88-98.87c31.4 26.01 61.5 50.83 115.47 100.22M321.78 14.356c40.72 36.57 83.28 72.83 114.89 100.24m-120.63-99.04c42.45 35.04 87.77 75.23 114.97 98.67M316.82 14.186c23.8 21.67 48.41 41.26 114.07 98.99m-119.3-100.47c30.82 30.35 66.85 59.59 113.24 100.41m-114.96-99.15c41.45 37.75 82.48 72.86 115.37 99.67m-121.6-100.33c43.23 37 82.55 71.36 115.89 102.46M303.24 13.626c35.18 29.46 70.77 59.86 116.23 99.76m-120.92-98.46c35.89 29.79 72.02 63.29 115.83 98.42m-116.24-99.22c34.78 32.07 70.1 63.06 114.54 98.99M291.45 12.346c27.74 23.57 56.8 48.68 114.8 103.06m-113.91-102.4c27.34 25.69 55.77 49.65 115.18 100.9m-122.96-97.7c43.24 34.38 85.93 71.94 114.09 96.44m-112.19-99.26c31.63 29.02 64.42 57.28 113.72 100m-119.91-97.54c44.63 36.92 90.95 75.83 115.79 99.79M279.87 14.246c32.74 29.01 66.13 57.73 114.74 98.61m-122.45-98.28c29.97 25.53 57.58 49.08 116.58 98.28m-115.02-98.77c40.67 35.19 79.71 70.72 114.52 100.66M266.08 12.526c35.82 31.32 71.6 62.83 117.43 102.31M266.88 13.196c39.8 36.2 78.53 70.58 115.78 99.93M262.5 13.296c36.99 33.33 75.85 67 113.64 101.45m-116-100.04c32.73 26.5 64.17 54.24 116.76 99.08m-119.63-99.75c41.9 39.44 83.48 76.37 113.04 99.27m-114.34-99.27c31.59 25.44 62.02 52.7 114.37 99.4m-121.9-99.9c27.61 24.64 53.57 44.04 113.57 101.8m-112.8-101.85c27.13 25.81 55.47 48.81 114.78 100.28M244.61 12.916c39.86 36.44 83.74 74.96 113.71 101.01m-114.01-99.71c40.89 37.38 81.14 72.14 112.83 99.74M235.96 12.386c29.18 25.71 55.92 51.06 114.23 100.11m-113.95-98.98c33.38 29.55 67.24 58.13 114.91 100.66M231.3 12.606c39 36.45 80.95 70.94 115.51 102.86m-116.24-99.97c28.88 24.91 58.2 50.4 115.03 99.15m-118.14-97.19c38.59 31.47 76.28 64.07 113.17 97.61m-114.04-98.78c31.98 28.95 63.63 57.5 113.72 97.57m-117.6-97.09c36.16 34.42 74.36 65.18 110.99 97.2m-109.91-95.76c26.01 23.37 54.18 47.26 109.75 95.42m-115.05-93.31c44.11 39.55 87.05 74.36 107.98 95.1m-107.08-95.29c40.45 35.96 82.45 71.11 108.32 94.47m-112.37-91.28c24.14 18.92 51.87 42.18 105.25 92m-103.35-92.94c39.52 37.14 80.63 73.11 104.85 92.38m-108.07-90.33c30.97 30.32 65.64 59.36 101.23 90.43m-100.41-87.7c30.18 26.16 61.66 52.86 101.26 86.32m-103.26-81.68c35.12 28.19 65.93 56.28 97.37 81.56m-96.7-83.35c31.69 29.77 65.33 57.55 94.67 84.73m-98.52-80.23c33 29.78 71.1 58.77 92.48 78.42m-91.73-79.29c29.08 23.54 55.81 48.1 92.66 79.58m-96.56-77.27c23.08 20.26 45.29 41.61 88.94 78.56m-87.48-77.79c28.94 26.72 59.32 51.58 88.56 78.02m-90.12-71.57c18.88 16.37 37.49 31.96 84.61 68.87m-82.38-70.4c18.06 15.8 36.09 30.88 82.35 72.17m-84.38-67.42c24.4 18.79 43.31 38.27 78.01 68.67m-77.55-69.67c17.46 17.23 35.1 32.42 78.82 69.3m-79.67-64.43c19.4 16.68 36.52 33.61 73.65 65.29m-74.26-64.24c29.87 24.34 57.16 47.24 73.92 62.27m-73.04-57.55c17.16 14.6 34.31 31.07 64.17 58.55m-65.13-58c16.96 13.34 35.42 28.94 65.81 57.12m-64.44-51.48c15.45 13.26 33.77 28.86 58.97 50.17m-60.92-51.06c20.93 15.75 40.79 34.03 62.68 53.46m-63.44-46.12c15.93 10.24 29.52 18.68 56.02 43.83m-53.35-46.37c13.68 12.75 30.31 26.29 53.38 47.48m-53.04-40.92c16.5 12.25 31.46 28.74 47.36 41.67m-48.74-41.91c13.36 11.31 24.37 21.49 48 41.56m-46.91-34.34c13.14 6.67 23.21 19.02 40.11 34.52m-40.11-35.38c13.62 10.02 25.96 21.28 41.84 35.31m-40.5-29.51c12.03 10.26 22.55 21 32.94 28.95m-35.75-30.95c15.23 11.83 27.68 25.18 36.96 31.84m-.6-.67s0 0 0 0m0 0s0 0 0 0m-33.56-23.36c8.08 5.82 15.08 13.92 29.02 24.12m-28.56-24.4c6.39 7.25 14.09 11.05 26.41 23.05",stroke:"#b2f2bb",strokeWidth:.5,fill:"none"}),g.createElement("path",{d:"M591.81 12.816c-52.63.05-257.29 0-316.25-.31-58.96-.31-28.66-2.29-37.48-1.54-8.83.76-10.65 2-15.47 6.07s-10.5 10.23-13.45 18.37c-2.94 8.14-4.99 20.51-4.23 30.47.75 9.96 4.8 21.84 8.77 29.29 3.97 7.45 10.34 12.35 15.05 15.44 4.72 3.09 6.39 2.79 13.26 3.07 6.88.29-25.73-1.39 28-1.38 53.73.01 240.73 1.29 294.35 1.46 53.63.17 19.98.84 27.41-.44s12.77-3.55 17.19-7.24c4.42-3.69 6.7-7.31 9.33-14.9 2.63-7.58 5.96-21.43 6.44-30.61.47-9.17-.42-16.94-3.59-24.43-3.16-7.49-10.48-16.41-15.38-20.5-4.9-4.08-11.58-3.48-14.03-4.01-2.45-.53-.79 1.01-.69.84m1.99-.57c-52.76-.11-259.81-.39-318.64-.13-58.83.25-26.1.74-34.36 1.66-8.26.92-9.91.43-15.19 3.87-5.29 3.43-13.3 8.42-16.54 16.75-3.23 8.33-3.49 22.94-2.87 33.23.62 10.28 2.59 21.45 6.58 28.48 4 7.03 12.71 10.92 17.39 13.69 4.67 2.76 3.85 2.38 10.66 2.88 6.81.51-24.26-.18 30.19.17 54.45.34 242.92 1.93 296.49 1.9 53.57-.03 17.71-.76 24.94-2.11 7.23-1.34 13.9-2.85 18.45-5.97 4.55-3.13 6.36-5.17 8.87-12.78 2.51-7.61 5.98-23.49 6.2-32.86.22-9.38-1.6-16.22-4.9-23.37-3.3-7.15-10.1-15.02-14.92-19.52-4.81-4.51-11.52-6.44-13.99-7.5-2.48-1.05-.76 1.12-.85 1.16",stroke:"#087f5b",fill:"none"}))),r||(r=g.createElement("path",{d:"M322.555 12.413c-1.82.12-8.04-.86-11.27 1.37-3.24 2.24-5.91 7.53-8.15 12.05-2.23 4.52-4.28 8.73-5.26 15.09-.97 6.36-1.39 14.71-.58 23.09.8 8.38 2.67 20.01 5.39 27.17 2.73 7.15 7.47 12.42 10.96 15.75 3.49 3.33 8.47 3.82 9.96 4.24m-3.3-100.02c-1.51.41-4.76 2.59-7.29 4.91-2.52 2.32-5.69 4.81-7.86 9.01-2.18 4.2-4.34 9.97-5.19 16.21-.86 6.24-.07 12.7.06 21.24.12 8.54-1.27 22.53.67 30.01 1.94 7.49 7.01 11.91 10.94 14.9 3.93 2.99 10.62 2.46 12.64 3.04M406.999 11.332c-1.38.28-5.86-.34-8.29 2.24-2.44 2.57-4.83 8.68-6.3 13.22-1.47 4.55-1.86 8.06-2.53 14.04-.66 5.99-1.73 13.66-1.49 21.87.25 8.2.77 20.19 2.96 27.36 2.19 7.17 7.14 12.51 10.17 15.68 3.04 3.17 6.86 2.53 8.04 3.34m-1.88-95.86c-1.01.66-5.21.33-7.43 2.56-2.23 2.24-4.06 6.59-5.91 10.84-1.85 4.24-4.1 8.34-5.2 14.62-1.09 6.28-1.91 14.78-1.37 23.07.54 8.29 2.62 19.77 4.6 26.69 1.98 6.92 4.29 11.46 7.29 14.82 3.01 3.36 9.03 4.76 10.74 5.32M513.995 12.483c-1.48.24-5.59.38-7.92 2.89-2.34 2.52-4.36 7.77-6.1 12.18-1.73 4.41-3.36 8.25-4.32 14.27-.97 6.01-1.81 13.29-1.46 21.83.34 8.53 1.53 21.95 3.52 29.37 1.99 7.41 5.69 12.29 8.43 15.12 2.74 2.83 6.54 1.37 8.01 1.85m.91-95.52c-1.77-.01-7.84-2.22-10.52-.09-2.69 2.14-3.96 8.25-5.61 12.89-1.64 4.65-3.34 8.64-4.28 14.97-.93 6.33-2.01 14.83-1.32 23.01.69 8.19 3.17 18.81 5.46 26.1 2.29 7.29 5.74 14.18 8.3 17.63 2.55 3.44 5.48 2.39 7.03 3.04M600.465 11.343c-1.53.37-5.33.97-7.77 3.43-2.45 2.47-5.05 7.04-6.88 11.36-1.84 4.33-3.76 8.31-4.14 14.61-.38 6.3 1.22 14.84 1.85 23.2.63 8.37.06 19.72 1.94 27 1.87 7.29 6.61 13.67 9.32 16.74 2.7 3.07 5.8 1.1 6.92 1.66m-.58-96.24c-1.25.18-4.4-1.33-6.64.74-2.24 2.06-5 7.12-6.8 11.64-1.8 4.52-3.34 9.33-3.99 15.48-.66 6.16.16 12.91.07 21.46-.09 8.54-2.13 22.09-.62 29.8 1.5 7.7 6.53 13.23 9.65 16.42 3.11 3.2 7.4 2.59 9.04 2.77",stroke:"#087f5b",fill:"none",strokeLinecap:"round"})),o||(o=g.createElement("g",{mask:"url(#mask-igj1dKExd5gtrFBx0EVBH)",strokeLinecap:"round"},g.createElement("path",{d:"M68.595 65.442c9.29-.04 34.02-.24 55.71-.24 21.7 0 62.07.2 74.48.24m-130.19 0c9.29-.04 34.02-.24 55.71-.24 21.7 0 62.07.2 74.48.24M170.555 75.592c10.58-3.8 21.16-7.61 28.23-10.15m-28.23 10.15c8.05-2.89 16.1-5.79 28.23-10.15",stroke:"#2f9e44",strokeWidth:4,fill:"none"}),g.createElement("path",{d:"M170.635 55.072c10.55 3.89 21.1 7.77 28.15 10.37m-28.15-10.37c8.02 2.96 16.05 5.91 28.15 10.37",stroke:"#2f9e44",strokeWidth:4,fill:"none"}))),s||(s=g.createElement("mask",{id:"mask-igj1dKExd5gtrFBx0EVBH"},g.createElement("path",{fill:"#fff",d:"M0 0h298.784v165.678H0z"}),g.createElement("path",{d:"M94.341 55.206h59.936v20H94.341z"}))),g.createElement("text",{x:29.968,fontFamily:"Virgil, Segoe UI Emoji",fontSize:16,fill:"#2f9e44",textAnchor:"middle",style:{whiteSpace:"pre"},dominantBaseline:"text-before-edge",transform:"translate(94.34 55.206)"},"request"),g.createElement("text",{fontFamily:"Virgil, Segoe UI Emoji",fontSize:16,fill:"#1e1e1e",style:{whiteSpace:"pre"},dominantBaseline:"text-before-edge",transform:"translate(214.997 54.212)"},"transform"),g.createElement("text",{fontFamily:"Virgil, Segoe UI Emoji",fontSize:16,fill:"#1e1e1e",style:{whiteSpace:"pre"},dominantBaseline:"text-before-edge",transform:"translate(520.198 55.075)"},"notify"),g.createElement("text",{x:32.16,fontFamily:"Virgil, Segoe UI Emoji",fontSize:16,fill:"#1e1e1e",textAnchor:"middle",style:{whiteSpace:"pre"},dominantBaseline:"text-before-edge",transform:"translate(311.55 33.205)"},"validate"),g.createElement("text",{x:32.16,y:20,fontFamily:"Virgil, Segoe UI Emoji",fontSize:16,fill:"#1e1e1e",textAnchor:"middle",style:{whiteSpace:"pre"},dominantBaseline:"text-before-edge",transform:"translate(311.55 33.205)"},"secure"),g.createElement("text",{x:32.16,y:40,fontFamily:"Virgil, Segoe UI Emoji",fontSize:16,fill:"#1e1e1e",textAnchor:"middle",style:{whiteSpace:"pre"},dominantBaseline:"text-before-edge",transform:"translate(311.55 33.205)"},"scan"),g.createElement("text",{x:38.776,fontFamily:"Virgil, Segoe UI Emoji",fontSize:16,fill:"#1e1e1e",textAnchor:"middle",style:{whiteSpace:"pre"},dominantBaseline:"text-before-edge",transform:"translate(405.472 45.806)"},"billing"),g.createElement("text",{x:38.776,y:20,fontFamily:"Virgil, Segoe UI Emoji",fontSize:16,fill:"#1e1e1e",textAnchor:"middle",style:{whiteSpace:"pre"},dominantBaseline:"text-before-edge",transform:"translate(405.472 45.806)"},"compliance"),c||(c=g.createElement("g",{mask:"url(#mask-rhLsx3B3GVveE0L1Vk06m)",strokeLinecap:"round"},g.createElement("path",{d:"M631.582 68.567c22.18-.11 110.92-.56 133.11-.68m-133.11.68c22.18-.11 110.92-.56 133.11-.68M736.552 78.297c9.48-3.51 18.96-7.01 28.14-10.41m-28.14 10.41c10.77-3.99 21.55-7.97 28.14-10.41",stroke:"#1971c2",strokeWidth:4,fill:"none"}),g.createElement("path",{d:"M736.442 57.777c9.52 3.41 19.04 6.82 28.25 10.11m-28.25-10.11c10.82 3.87 21.63 7.75 28.25 10.11",stroke:"#1971c2",strokeWidth:4,fill:"none"}))),p||(p=g.createElement("mask",{id:"mask-rhLsx3B3GVveE0L1Vk06m"},g.createElement("path",{fill:"#fff",d:"M0 0h864.687v169.243H0z"}),g.createElement("path",{d:"M671.631 58.229h53.008v20h-53.008z"}))),g.createElement("text",{x:26.504,fontFamily:"Virgil, Segoe UI Emoji",fontSize:16,fill:"#1971c2",textAnchor:"middle",style:{whiteSpace:"pre"},dominantBaseline:"text-before-edge",transform:"translate(671.63 58.229)"},"output"),u||(u=g.createElement("g",{strokeLinecap:"round"},g.createElement("path",{d:"m790.757 28.944 70.64-2.51.6 111.01-72.4-3.69",strokeWidth:0,fill:"#fff"}),g.createElement("path",{d:"M789.197 28.524c28.61-.65 54.9-.44 72.22-1.85m-71.03 1.63c23.24-.65 46.8.91 69.54-.07m.89-.44c-1.41 36.53-.36 69.12-1.77 107.61m.98-106.69c-.61 21.64.28 44.49.89 105.83m-.04 1.94c-16.44-.53-33.94-2.44-72.7-1.33m72.04 1.33c-27.65-.49-54.49-.43-70.62-.59m-.1-.14c1.09-32.09-.54-64.3-.49-108.78m.7 107.86c.75-41.65-.71-84.09.26-106.52",stroke:"#1971c2",strokeWidth:2,fill:"none"}))),m||(m=g.createElement("g",{strokeLinecap:"round"},g.createElement("path",{d:"m783.17 19.414 71.28 3.76-1.73 103.56-68.78 1.9",strokeWidth:0,fill:"#fff"}),g.createElement("path",{d:"M782.34 20.874c19.71.11 43.51-1.31 71.31 2.29m-71.26-2.65c19.88 1.53 39.34.67 70.78.53m-1.1 1.76c1.22 21.3-.4 44.77-1 104.22m1.58-105.81c.39 29.24.22 56.1-.28 107.49m1.64.64c-17.55-1.57-37.06-.87-69.86-.34m68.73-.58c-25.64.76-53.46 1.14-70.6-.84m-.21 1.3c-1.46-35.45-.43-72.66 2.12-107.82m-1.37 107.55c-1.34-31.23-.28-62.55-.08-107.04",stroke:"#1971c2",strokeWidth:2,fill:"none"}))),d||(d=g.createElement("g",{strokeLinecap:"round"},g.createElement("path",{d:"m774.375 14.92 68.95-3.69 1.9 109.15-71.14-.89",strokeWidth:0,fill:"#fff"}),g.createElement("path",{d:"M771.325 12.82c24.61-1.29 46.54 2.22 71.89 1.31m-70.36-.31c21-.35 43.34-.53 69.86-.68m1-.52c-2.08 29.95-2.51 58.28-.84 106.67m1.27-105.61c-.49 35.5-1.49 73.84-1.16 106.74m1.26-1.25c-26.98 1.01-48.11 1.88-69.83.51m70.09.55c-29.3.35-57.22-.94-71.32-.16m-2.14.6c1.13-35.21 3.85-67.58 1.66-107.92m-.74 107.62c.47-25.11.79-49.86 1.36-108.3",stroke:"#1971c2",strokeWidth:2,fill:"none"}))),h||(h=g.createElement("path",{d:"M784.771 62.278c6.61.25 31.6.67 39.57.03 7.97-.64 6.96-3.27 8.26-3.87m-49.34 3.09c7-.04 35.1-.81 43.29-1.12 8.2-.31 4.86-.67 5.89-.76M785.767 30.682c3.02-.59 11.08-3.31 18.94-3.43 7.87-.11 23.65 2.44 28.26 2.74m-45.49-.13c2.96-.46 9.38-1.42 16.89-1.17 7.52.24 23.47 2.48 28.2 2.65M787.8 97.457c4.67-.11 19.84-.27 25.94 0 6.1.28 7.13 1.78 10.66 1.65 3.54-.12 8.9-1.83 10.55-2.4m-48-.4c4.66.07 20.08 2.11 26.2 2.72 6.13.61 6.89 1.67 10.56.95 3.67-.73 9.41-4.65 11.48-5.3M784.146 108.96c1.52-.31 7.05-2.11 9.62-2.09 2.57.02-.08 1.76 5.8 2.2 5.88.44 23.04.87 29.47.42 6.42-.45 7.78-2.67 9.09-3.12m-55.08 1.57c1.28-.15 7.22.13 9.84.02 2.63-.12-.11-1.14 5.9-.7 6.01.44 23.8 3.43 30.14 3.33 6.33-.11 6.39-3.16 7.86-3.95M783.88 44.463c2.91.06 10.35.83 18.03 1.28 7.68.45 23.24 1.24 28.08 1.45m-47.49-.57c2.69-.26 10.72-2.78 18.45-2.47 7.73.31 22.85 3.71 27.91 4.34M783.828 80.816c1.21.38 4.35.7 7.43.4 3.08-.31 4.63-2.34 11.04-2.23 6.42.11 22.78 2.54 27.48 2.9m-47.42-1.58c1.59.65 8.03 2.46 11.25 2.44 3.22-.02 2.09-2.63 8.07-2.57 5.98.06 22.67 2.73 27.82 2.91",stroke:"#1971c2",fill:"none",strokeLinecap:"round"})),k||(k=g.createElement("g",{strokeLinecap:"round"},g.createElement("path",{d:"m9.56 27.263 51.96 1.55 1.79 78.29-54.64.68",strokeWidth:0,fill:"#fff"}),g.createElement("path",{d:"M8.35 26.333c19.31.17 39.76 2.37 55.76 3.32m-54.66-2.21c22.26.29 42.07-.45 54.28 1.13m-1.04-1.33c.42 25.79-.98 48-1.67 80.75m2.32-80.92c.72 29.58.72 59.87-.2 81.76m-.52.46c-16.24-.67-35.37-3.4-51.06-2.11m50.73 1.35c-12.33-.15-25.1-1.07-51.61-.72m-2.5 0c1.18-19.91.74-41.53.02-80.08m1.8 79.98c-.1-19.18-1.5-39.53-.68-79.84",stroke:"#2f9e44",strokeWidth:2,fill:"none"}))),f||(f=g.createElement("path",{d:"M16.7 61.793c5.01.21 24.61 1.33 30.61.96 6-.38 4.56-2.74 5.4-3.2m-34.37 1.17c5.44-.1 25.73.28 31.35.31 5.61.03 1.88.39 2.35-.16M18.534 39.156c2.3-.34 7.63-2.77 13.37-2.86 5.74-.09 17.45 2.23 21.08 2.34m-32.59-.12c2.26-.13 5.37-.35 10.66-.68 5.28-.33 17.21-1.22 21.07-1.28M19.287 88.67c3.36-.08 14.61.21 19.35.3 4.74.09 6.34.68 9.07.25 2.73-.43 6.06-2.45 7.31-2.83m-37.09 1.24c3.24-.51 14.78-.9 19.67-.52 4.88.38 6.7 2.81 9.63 2.81 2.93-.01 6.86-2.4 7.95-2.85M16.551 97.55c1.32-.34 6.29-2.22 8.3-2.54 2.01-.32-.65.23 3.76.61 4.4.37 17.94 1.8 22.67 1.63 4.73-.16 4.59-2.37 5.7-2.64m-41.98 2.16c1.19-.24 7.05-.8 9.18-.84 2.13-.04-.98.2 3.58.58 4.56.38 18.58 2.02 23.78 1.71 5.21-.31 6.7-3.03 7.44-3.6M17.474 48.443c2.27-.29 7.13-.46 12.89-.07 5.75.38 18.08 2.07 21.63 2.39m-35.7-.32c2.11-.21 7.21-1.22 13.03-.96 5.83.25 18.19 2.21 21.92 2.46M16.864 74.542c.92.33 4 1.67 6.23 1.61 2.23-.06 2.24-2.13 7.16-1.97 4.92.16 18.81 2.62 22.37 2.92m-37.3-.38c.72.62 4.51 1.1 6.84.83 2.33-.27 1.97-2.58 7.14-2.44 5.17.14 19.83 3.14 23.87 3.27",stroke:"#2f9e44",fill:"none",strokeLinecap:"round"})))}},4205:(e,t,n)=>{n.d(t,{ZP:()=>r});var a=n(7462),i=(n(7294),n(3905));const l={toc:[]};function r(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Before moving on, please clean up your environment by deleting the current Promises and Resource Requests.\nKratix will, by default, clean up any Resource Requests when the parent Promise is deleted."),(0,i.kt)("p",null,"To delete all the Promises, run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context $PLATFORM delete promises --all\n")),(0,i.kt)("p",null,"The above command will give an output similar to:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell-session"},"promise.platform.kratix.io/elastic-cloud deleted\n")))}r.isMDXComponent=!0},1567:(e,t,n)=>{n.d(t,{ZP:()=>r});var a=n(7462),i=(n(7294),n(3905));const l={toc:[]};function r(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Following the previous step of this tutorial, you should now\nhave a deployment of both Kratix and MinIO running on your Platform cluster\nwith no installed Promises."),(0,i.kt)("p",null,"You should also have two environment variables, ",(0,i.kt)("inlineCode",{parentName:"p"},"PLATFORM")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"WORKER"),"."),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Verify the current state of your installation"),"Run:",(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context $PLATFORM get deployments --namespace kratix-platform-system\n")),(0,i.kt)("p",null,"The above command will give an output similar to:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell-session"},"NAME                                 READY   UP-TO-DATE   AVAILABLE   AGE\nkratix-platform-controller-manager   1/1     1            1           1h\nminio                                1/1     1            1           1h\n")),(0,i.kt)("p",null,"You should also have a State Store created and configured to point to the\n",(0,i.kt)("inlineCode",{parentName:"p"},"kratix")," bucket on MinIO. Verify the ",(0,i.kt)("inlineCode",{parentName:"p"},"bucketstatestores"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context $PLATFORM get bucketstatestores.platform.kratix.io\n")),(0,i.kt)("p",null,"The above command will give an output similar to:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell-session"},"NAME          AGE\nminio-store   1h\n")),(0,i.kt)("p",null,"Verify there are no existing Promises:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context $PLATFORM get promises\n")),(0,i.kt)("p",null,"Verify your cluster environment variables are set:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"env | grep 'PLATFORM\\|WORKER'\n")),(0,i.kt)("p",null,"which should result in:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell-session"},"WORKER=kind-worker\nPLATFORM=kind-platform\n"))),(0,i.kt)("p",null,"If you are are not continuing from the previous section, or your outputs do not align with the validation, please refer back to\n",(0,i.kt)("a",{parentName:"p",href:"installing-kratix"},"Installing Kratix"),"."))}r.isMDXComponent=!0},6308:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>p,toc:()=>m});var a=n(7462),i=(n(7294),n(3905)),l=n(1567),r=n(4205),o=n(9218);const s={description:"Delivering your service on demand",title:"Delivering your service on demand",id:"service-on-demand",slug:"../service-on-demand"},c=void 0,p={unversionedId:"workshop/part-ii/service-on-demand",id:"workshop/part-ii/service-on-demand",title:"Delivering your service on demand",description:"Delivering your service on demand",source:"@site/docs/workshop/part-ii/02-service-on-demand.md",sourceDirName:"workshop/part-ii",slug:"/workshop/service-on-demand",permalink:"/docs/workshop/service-on-demand",draft:!1,editUrl:"https://github.com/syntasso/kratix-docs/tree/main/docs/workshop/part-ii/02-service-on-demand.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{description:"Delivering your service on demand",title:"Delivering your service on demand",id:"service-on-demand",slug:"../service-on-demand"},sidebar:"workshopSidebar",previous:{title:"Creating your first service API",permalink:"/docs/workshop/creating-an-api"},next:{title:"Extracting shared dependencies",permalink:"/docs/workshop/shared-dependencies"}},u={},m=[{value:"What is a Promise pipeline?",id:"what-is-a-pipeline",level:2},{value:"Design principles",id:"design-principles",level:3},{value:"Reusability",id:"reusability",level:4},{value:"Idempotency",id:"idempotency",level:4},{value:"Codify your delivery process in a Container",id:"write-docker-container",level:2},{value:"Write the pipeline script",id:"write-the-pipeline-script",level:3},{value:"Write the Dockerfile",id:"write-the-dockerfile",level:3},{value:"Test the pipeline",id:"test-the-pipeline",level:2},{value:"Create simple test suite",id:"create-simple-test-suite",level:3},{value:"Run the test",id:"run-the-test",level:3},{value:"Include this container in your Promise pipeline",id:"add-container-to-pipeline",level:2},{value:"Install the Promise",id:"install-promise",level:2},{value:"Prerequisite setup",id:"prerequisite-setup",level:3},{value:"Install the Promise",id:"install-the-promise",level:3},{value:"Request an on-demand instance of your Promise",id:"request-instance",level:2},{value:"Send a Resource Request",id:"send-a-resource-request",level:3},{value:"Verify the pipeline",id:"verify-the-pipeline",level:3},{value:"Verify the worker",id:"verify-the-worker",level:3},{value:"Trying to request a second instance",id:"trying-to-request-a-second-instance",level:3},{value:"Summary",id:"summary",level:2},{value:"Clean up environment",id:"cleanup",level:2},{value:"\ud83c\udf89 \xa0 Congratulations!",id:"--congratulations",level:2}],d={toc:m};function h(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This is Part 2 of ",(0,i.kt)("a",{parentName:"p",href:"intro"},"a series")," illustrating how Kratix works. ",(0,i.kt)("br",null),"\n\ud83d\udc48\ud83c\udffe","\xa0","\xa0"," Previous: ",(0,i.kt)("a",{parentName:"p",href:"creating-an-api"},"Create your first service API")," ",(0,i.kt)("br",null),"\n\ud83d\udc49\ud83c\udffe","\xa0","\xa0"," Next: ",(0,i.kt)("a",{parentName:"p",href:"shared-dependencies"},"Extracting shared dependencies")),(0,i.kt)("hr",null),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"In this tutorial, you will")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#what-is-a-pipeline"},"Learn about a Promise pipeline")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#write-docker-container"},"Write a Docker container to codify the delivery process")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#test-the-pipeline"},"Test the pipeline")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#add-container-to-pipeline"},"Include this container in your Promise pipeline")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#install-promise"},"Install the Promise")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#request-instance"},"Request an on-demand instance of your Promise")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#summary"},"Summary")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#cleanup"},"Clean up environment"))),(0,i.kt)("h2",{id:"what-is-a-pipeline"},"What is a Promise pipeline?"),(0,i.kt)("p",null,"A ",(0,i.kt)("a",{parentName:"p",href:"../main/reference/promises/intro"},"Kratix Promise")," is configured with a Request\nPipeline, defined as ",(0,i.kt)("inlineCode",{parentName:"p"},"xaasRequestPipeline")," in the Promise definition."),(0,i.kt)("p",null,"This pipeline is an ordered list of OCI-compliant images. Each image runs as an\ninit container within a single Kubernetes pod."),(0,i.kt)("p",null,"This pipeline is run whenever a user makes a request to your Promise API. The\npipeline is limited only by what actions you can take inside a Pod in Kubernetes.\nThis means you can download software, run imperative commands, wait for manual\napprovals and more."),(0,i.kt)("figure",{class:"diagram"},(0,i.kt)(o.Z,{className:"large",mdxType:"PipelineDiagram"}),(0,i.kt)("figcaption",null,"An example multi-stage Pipeline")),(0,i.kt)("p",null,"In addition to running commands within the images, Kratix will manage a few key\nfiles when the defined pipeline completes:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"/output"),": The files in this directory should be Kubernetes valid YAML as they\nwill be scheduled to a matching Kratix Cluster."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"/metadata/cluster-selectors.yaml"),": Any YAML key:value pairs in this file will\nbe appended to the ",(0,i.kt)("inlineCode",{parentName:"li"},"selector")," values in the Promise before deciding where the\noutput files are scheduled."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"metadata/status.yaml"),": A YAML document that will be written to the Resource\nRequest status section on pipeline completion.")),(0,i.kt)("p",null,"This step of the workshop will focus on the script run in an image and the output\ndirectory. Both cluster-selectors and status will be explored in an upcoming\nsection of this workshop."),(0,i.kt)("h3",{id:"design-principles"},"Design principles"),(0,i.kt)("p",null,"While the pipeline enables flexibility, you will benefit from keeping in mind\na few key principles while writing your pipeline images."),(0,i.kt)("h4",{id:"reusability"},"Reusability"),(0,i.kt)("p",null,"Pipelines are a great place to validate and enforce common requirements. For\nexample, if you write an image that can check for necessary compliance\nrequirements, that image can be used by all applicable pipelines. In addition,\nyou can write images to check for excess costs, labeling conventions, security\nrisks, and more."),(0,i.kt)("p",null,"While most pipelines will have at least one image with unique logic, building these\nimages with reusability in mind is a great way to make your platform extensible."),(0,i.kt)("h4",{id:"idempotency"},"Idempotency"),(0,i.kt)("p",null,"An idempotent container guarantees that running the same command multiple times\nwill result in the same outcome. This is an important feature of these containers\nbecause they will be auto-reconciled on an on going basis."),(0,i.kt)("p",null,"Kubernetes controllers reconcile their objects in three scenarios:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Object change"),(0,i.kt)("li",{parentName:"ul"},"Controller restart"),(0,i.kt)("li",{parentName:"ul"},"Default cadence")),(0,i.kt)("p",null,"This means that yes, on every Resource Request the pipeline will run. But also, it\nwill run any time the controller is reset, as well as every 10 hours."),(0,i.kt)("p",null,"This means you will need to write your pipeline images to make sure that rerunning\nthem will not result in any adverse side effects."),(0,i.kt)("hr",null),(0,i.kt)("p",null,"Now that you understand what you can do in a pipeline and some design principles\nfor writing images, it is time to write your own pipeline to deliver on-demand\nElastic Clouds!"),(0,i.kt)("h2",{id:"write-docker-container"},"Codify your delivery process in a Container"),(0,i.kt)("p",null,"To provision Elastic Cloud Kubernetes (ECK) you will need to both install the\noperator and use the ECK-stack Helm chart to make requests to the operator. By\nencapsulating the process in a Container you are able to manage quite complex\nactions while also having access to a testable interface."),(0,i.kt)("h3",{id:"write-the-pipeline-script"},"Write the pipeline script"),(0,i.kt)("p",null,"The pipeline requires a number of files and scripts. For that reason it is\nbest to create a subfolder to organise these specific items."),(0,i.kt)("p",null,"More specifically, the first two files you will need are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"run"),": a script containing the code that will be executed when the pipeline\nruns."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"default-config.yaml"),": a values document containing configuration options for the\ndefault ElasticSearch and Kibana."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"beats-values.yaml"),": a values document containing configuration options for when the\nData Collection is enabled.")),(0,i.kt)("p",null,"To create the subfolder and these two executable files, you can run the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir -p pipeline\ntouch pipeline/{run,default-config.yaml,beats-values.yaml}\nchmod +x pipeline/run\n")),(0,i.kt)("p",null,"Next you will write the code that manages the provisioning process in the ",(0,i.kt)("inlineCode",{parentName:"p"},"run"),"\nscript. Paste the contents below in the ",(0,i.kt)("inlineCode",{parentName:"p"},"pipeline/run")," script:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="pipeline/run"',title:'"pipeline/run"'},'#!/usr/bin/env bash\n\nset -eu -o pipefail\n\nmkdir -p to-deploy\nexport name="$(yq eval \'.metadata.name\' /input/object.yaml)"\nexport enableDataCollection="$(yq eval \'.spec.enableDataCollection\' /input/object.yaml)"\n\necho "Downloading CRDS..."\ncurl --silent --location --output to-deploy/elastic-crds.yaml \\\n    https://download.elastic.co/downloads/eck/2.8.0/crds.yaml\n\necho "Downloading Operator..."\ncurl --silent --location --output to-deploy/elastic-operator.yaml \\\n    https://download.elastic.co/downloads/eck/2.8.0/operator.yaml\n\necho "Generate ECK requests..."\n# Only set the beats value file if data collection is enabled\nvaluesFile=\'\'\nif $enableDataCollection; then\n  sed "s/NAME/${name}/g" beats-values.yaml > beats-final-values.yaml\n  valuesFile=\'--values beats-final-values.yaml\'\nfi\n\nnodePort="$(echo "${name}" | md5sum | grep -Eo "[[:digit:]]{3}" | head -n1)"\nnodePort=$(( 30000 + nodePort ))\nsed "s/NODEPORT/${nodePort}/g" default-config.yaml | sed "s/NAME/${name}/g" > default-config-final-values.yaml\n\nhelm template $name eck-stack \\\n  $valuesFile \\\n  --values default-config-final-values.yaml \\\n  --repo https://helm.elastic.co \\\n  --output-dir to-deploy\n\necho "Adding namespaces to all helm output files..."\nfind /pipeline/to-deploy/eck-stack -name \\*.yaml   -exec yq -i \'select(.metadata | has("namespace") | not).metadata.namespace |= "default"\' {} \\;\n\necho "Removing enterprise annotation..."\nfind /pipeline/to-deploy/eck-stack -name \\*.yaml   -exec yq -i \'del(.metadata.annotations["eck.k8s.elastic.co/license"])\' {} \\;\n\necho "Copying files to /output..."\nfind /pipeline/to-deploy -name \\*.yaml -exec cp {} /output \\;\n\necho "Done"\n')),(0,i.kt)("p",null,"Next, populate the ",(0,i.kt)("inlineCode",{parentName:"p"},"default-config.yaml")," document. This is file contains default\nconfiguration for the Kibana deployment. The NodePort will be injected by the\npipeline:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"title=pipeline/default-config.yaml",title:"pipeline/default-config.yaml"},"eck-elasticsearch:\n  fullnameOverride: NAME\neck-kibana:\n  fullnameOverride: NAME\n  spec:\n    config:\n      csp:\n        strict: false\n    count: 1\n    elasticsearchRef:\n      name: NAME\n    http:\n      tls:\n        selfSignedCertificate:\n          disabled: true\n      service:\n        spec:\n          type: NodePort\n          ports: [{nodePort: NODEPORT, port: 5601, name: http}]\n")),(0,i.kt)("p",null,"Next, populate the ",(0,i.kt)("inlineCode",{parentName:"p"},"beats-values.yaml")," document. Paste the following into the\n",(0,i.kt)("inlineCode",{parentName:"p"},"pipeline/beats-values.yaml")," file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="pipeline/beats-values.yaml"',title:'"pipeline/beats-values.yaml"'},"eck-beats:\n  enabled: true\n  fullnameOverride: NAME\n  spec:\n    type: metricbeat\n    elasticsearchRef:\n      name: NAME\n    kibanaRef:\n      name: NAME\n    daemonSet:\n      podTemplate:\n        spec:\n          containers:\n            - args:\n                - -e\n                - -c\n                - /etc/beat.yml\n                - -system.hostfs=/hostfs\n              name: metricbeat\n")),(0,i.kt)("details",null,(0,i.kt)("summary",null,"\ud83e\udd14 How does the run script work?"),"Take a look at the file you have just created and see how the principles and structures introduced above are applied.",(0,i.kt)("p",null,"On line 11 and 15 the script is downloading a specific version of ECK rather than using a mutable tag like ",(0,i.kt)("inlineCode",{parentName:"p"},"latest"),". This means that no matter how frequently this image runs, it will always generate the same output."),(0,i.kt)("p",null,"In addition, on line 34 the files that should be deployed to the cluster are copied to ",(0,i.kt)("inlineCode",{parentName:"p"},"/output"),". You may wonder why these files were not downloaded and created directly to the ",(0,i.kt)("inlineCode",{parentName:"p"},"output")," directory. This is an good practice that allows you to use a temporary directory to download and possibly manipulate files before finalising them in the ",(0,i.kt)("inlineCode",{parentName:"p"},"output")," directory."),(0,i.kt)("p",null,"Finally, you can see that on lines 6 and 7 the script is capturing values from the Resource Request and using those values to customise the outputs. Specifically, it is using the Resource Request name to make sure that the resources have unique names, and using the user provided API value to decide on line 45 if Beats should be installed.")),(0,i.kt)("p",null,"Your shell script is nearly testable as is. However one complication is the manipulation of the root file system. Therefore, the next step will be to package this script into a Dockerfile which will enable testing and also make it ready for use in your Kratix pipeline."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Remember there is no limitation to the languages you use in this script. You may prefer more complete programming and scripting languages like Golang, Python, or Elixir as your logic becomes more robust.")),(0,i.kt)("h3",{id:"write-the-dockerfile"},"Write the Dockerfile"),(0,i.kt)("p",null,"A ",(0,i.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/reference/builder/"},"Dockerfile")," manages both build and runtime requirements for your container."),(0,i.kt)("p",null,"To create your Dockerfile in the pipeline directory run the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"touch pipeline/Dockerfile\n")),(0,i.kt)("p",null,"Next, paste the contents below into the newly created ",(0,i.kt)("inlineCode",{parentName:"p"},"pipeline/Dockerfile"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-docker"},'FROM "alpine"\nWORKDIR /pipeline\n\nRUN apk update && apk add --no-cache bash curl openssl yq\nRUN curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 \\\n    && chmod +x get_helm.sh && ./get_helm.sh\n\nADD run /pipeline/run\nADD beats-values.yaml /pipeline/beats-values.yaml\nADD default-config.yaml /pipeline/default-config.yaml\n\nRUN chmod +x /pipeline/run\n\nCMD [ "sh", "-c", "/pipeline/run" ]\nENTRYPOINT []\n')),(0,i.kt)("p",null,"At this stage, your ",(0,i.kt)("inlineCode",{parentName:"p"},"elastic-cloud-promise")," directory should look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\ud83d\udcc2 elastic-cloud-promise\n\u251c\u2500\u2500 pipeline\n\u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u251c\u2500\u2500 beats-values.yaml\n\u2502   \u251c\u2500\u2500 default-config.yaml\n\u2502   \u2514\u2500\u2500 run\n\u251c\u2500\u2500 promise.yaml\n\u2514\u2500\u2500 resource-request.yaml\n")),(0,i.kt)("details",null,(0,i.kt)("summary",null,"\ud83e\udd14 How does the Dockerfile work?"),(0,i.kt)("p",null,"Take a look at the created file and you can see on line 1 that this is an Alpine\nLinux container that requires ",(0,i.kt)("inlineCode",{parentName:"p"},"bash"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"curl")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"yq")," to be installed on line 4.\nThis allows you to install Helm on line 5 before calling your ",(0,i.kt)("inlineCode",{parentName:"p"},"run")," script on\neach run via the ",(0,i.kt)("inlineCode",{parentName:"p"},"CMD")," declaration on line 14 after adding to the image on line\n9.")),(0,i.kt)("h2",{id:"test-the-pipeline"},"Test the pipeline"),(0,i.kt)("p",null,"Now that the script is packaged as a Dockerfile, you are able to run the script without impacting your local root directory."),(0,i.kt)("p",null,"In order run a test you will need to:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Mimic the ",(0,i.kt)("inlineCode",{parentName:"li"},"/output")," directory locally"),(0,i.kt)("li",{parentName:"ul"},"Provide the expected input files (the Resource Request)"),(0,i.kt)("li",{parentName:"ul"},"Build the image"),(0,i.kt)("li",{parentName:"ul"},"Run the container"),(0,i.kt)("li",{parentName:"ul"},"Validate the files in the ",(0,i.kt)("inlineCode",{parentName:"li"},"output")," directory")),(0,i.kt)("p",null,"Start by creating the files and test structure:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"mkdir -p test/{input,output,metadata}\n")),(0,i.kt)("p",null,"As an example input, copy the Resource Request as ",(0,i.kt)("inlineCode",{parentName:"p"},"object.yaml")," into the ",(0,i.kt)("inlineCode",{parentName:"p"},"input"),"\ndirectory:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cp resource-request.yaml test/input/object.yaml\n")),(0,i.kt)("p",null,"At this stage, your directory structure should look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\ud83d\udcc2 elastic-cloud-promise\n\u251c\u2500\u2500 pipeline\n\u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u251c\u2500\u2500 beats-values.yaml\n\u2502   \u251c\u2500\u2500 default-config.yaml\n\u2502   \u2514\u2500\u2500 run\n\u251c\u2500\u2500 promise.yaml\n\u251c\u2500\u2500 resource-request.yaml\n\u2514\u2500\u2500 test\n    \u251c\u2500\u2500 input\n    \u2502   \u2514\u2500\u2500 object.yaml\n    \u251c\u2500\u2500 metadata\n    \u2514\u2500\u2500 output\n")),(0,i.kt)("h3",{id:"create-simple-test-suite"},"Create simple test suite"),(0,i.kt)("p",null,"Now that you have your local directories all set up, it is time to actually\nbuild, run and validate the image outputs."),(0,i.kt)("p",null,"Here is where another convenience script can be helpful. By creating a build\nand test script you will be able to consistently run the necessary commands\nand expand on them as you may want to automate more of your testing."),(0,i.kt)("p",null,"Use the following command to once again set up the necessary local file structure:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir -p scripts\ntouch scripts/{build-pipeline,test-pipeline}\nchmod +x scripts/*\n")),(0,i.kt)("p",null,"Paste the following in ",(0,i.kt)("inlineCode",{parentName:"p"},"scripts/build-pipeline"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="scripts/build-pipeline"',title:'"scripts/build-pipeline"'},'#!/usr/bin/env bash\n\nset -eu -o pipefail\n\ntestdir=$(cd "$(dirname "$0")"/../test; pwd)\n\ndocker build --tag kratix-workshop/elastic-pipeline:dev $testdir/../pipeline\nkind load docker-image --name platform kratix-workshop/elastic-pipeline:dev\n')),(0,i.kt)("p",null,"Paste the following in ",(0,i.kt)("inlineCode",{parentName:"p"},"scripts/test-pipeline")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="scripts/test-pipeline"',title:'"scripts/test-pipeline"'},'#!/usr/bin/env bash\n\nscriptsdir=$(cd "$(dirname "$0")"; pwd)\ntestdir=$(cd "$(dirname "$0")"/../test; pwd)\ninputDir="$testdir/input"\noutputDir="$testdir/output"\nmetadataDir="$testdir/metadata"\n\n$scriptsdir/build-pipeline\nrm $outputDir/*\n\ndocker run --rm --volume ${outputDir}:/output --volume ${inputDir}:/input --volume ${metadataDir}:/metadata kratix-workshop/elastic-pipeline:dev\n')),(0,i.kt)("p",null,"These scripts do the following:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"build-pipeline")," codifies the dev tag for the image and how to build it. It\nwill also load the container image on the KinD cluster."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test-pipeline")," calls build-pipeline and also runs the pipeline image,\nallowing you to verify the created files in the ",(0,i.kt)("inlineCode",{parentName:"li"},"test/output")," directory.")),(0,i.kt)("p",null,"At this stage, your directory structure should look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\ud83d\udcc2 elastic-cloud-promise\n\u251c\u2500\u2500 pipeline\n\u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u251c\u2500\u2500 beats-values.yaml\n\u2502   \u251c\u2500\u2500 default-config.yaml\n\u2502   \u2514\u2500\u2500 run\n\u251c\u2500\u2500 promise.yaml\n\u251c\u2500\u2500 resource-request.yaml\n\u251c\u2500\u2500 scripts\n\u2502   \u251c\u2500\u2500 build-pipeline\n\u2502   \u2514\u2500\u2500 test-pipeline\n\u2514\u2500\u2500 test\n    \u251c\u2500\u2500 input\n    \u2502   \u2514\u2500\u2500 object.yaml\n    \u251c\u2500\u2500 metadata\n    \u2514\u2500\u2500 output\n")),(0,i.kt)("h3",{id:"run-the-test"},"Run the test"),(0,i.kt)("p",null,"To execute the test, run the script with the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"./scripts/test-pipeline\n")),(0,i.kt)("p",null,"Which should build and run the Pipeline image. Once the execution completes,\nverify the ",(0,i.kt)("inlineCode",{parentName:"p"},"test/output")," directory. You should see the following files:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\ud83d\udcc2 elastic-cloud-promise\n\u251c\u2500\u2500 ...\n\u2514\u2500\u2500 test\n    \u251c\u2500\u2500 input\n    \u2502   \u2514\u2500\u2500 object.yaml\n    \u251c\u2500\u2500 metadata\n    \u2502   \u2514\u2500\u2500 cluster-selectors.yaml\n#highlight-start\n    \u2502   \u2514\u2500\u2500 status.yaml\n#highlight-end\n    \u2514\u2500\u2500 output\n        \u251c\u2500\u2500 beats.yaml\n        \u251c\u2500\u2500 elastic-crds.yaml\n        \u251c\u2500\u2500 elastic-operator.yaml\n        \u251c\u2500\u2500 elasticsearch.yaml\n        \u2514\u2500\u2500 kibana.yaml\n")),(0,i.kt)("p",null,"You can take a look at the files and verify their contents. If everything looks\ngood, your pipeline image is ready to be included in your promise."),(0,i.kt)("admonition",{title:"Testing pipeline images",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"As you just experience, testing pipeline images is really simple. You can\nquickly validate that the pipeline is outputting exactly what you want, without\neven touching Kubernetes."),(0,i.kt)("p",{parentName:"admonition"},"The ability to treat pipeline image as independent pieces of software that can\nhave their own development lifecycle (fully testable, easy to execute locally,\nrelease independent) allows platform teams to move faster, sharing and reusing\nimages across their Promises.")),(0,i.kt)("h2",{id:"add-container-to-pipeline"},"Include this container in your Promise pipeline"),(0,i.kt)("p",null,"With your pipeline tested you are ready to add it to your Promise. To do this,\nyou will add a new top level key in the Promise ",(0,i.kt)("inlineCode",{parentName:"p"},"spec")," as a sibling to the\n",(0,i.kt)("inlineCode",{parentName:"p"},"xaasCrd")," key you created in the last section."),(0,i.kt)("p",null,"The key should be ",(0,i.kt)("inlineCode",{parentName:"p"},"xaasRequestPipeline")," and should contain a list of your\npipelines containers which will be just one for now:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"title=\"promise.yaml -- include it under the 'spec' key\"",title:'"promise.yaml',"--":!0,include:!0,it:!0,under:!0,the:!0,"'spec'":!0,'key"':!0},"  xaasRequestPipeline:\n  - kratix-workshop/elastic-pipeline:dev\n")),(0,i.kt)("h2",{id:"install-promise"},"Install the Promise"),(0,i.kt)("h3",{id:"prerequisite-setup"},"Prerequisite setup"),(0,i.kt)(l.ZP,{mdxType:"PartialVerifyKratixWithOutPromises"}),(0,i.kt)("h3",{id:"install-the-promise"},"Install the Promise"),(0,i.kt)("p",null,"You can now install the updated Promise:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context $PLATFORM create --filename promise.yaml\n")),(0,i.kt)("p",null,"To validate the Promise has been installed, you can list all Promises by running:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context kind-platform get promises\n")),(0,i.kt)("p",null,"Your output will show the ",(0,i.kt)("inlineCode",{parentName:"p"},"elastic-cloud")," Promise:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell-session"},"NAME            AGE\nelastic-cloud   10s\n")),(0,i.kt)("h2",{id:"request-instance"},"Request an on-demand instance of your Promise"),(0,i.kt)("p",null,"Now that the Promise is installed and includes a pipeline to provision the ECK resources, you can switch hats to act like an application engineer who wants to request an instance of a monitoring stack."),(0,i.kt)("p",null,"The request will result in the pipeline's output being installed on the worker cluster:"),(0,i.kt)("figure",{class:"diagram"},(0,i.kt)(o.Z,{className:"large",mdxType:"PipelineDiagram"}),(0,i.kt)("figcaption",null,"An example multi-stage Pipeline")),(0,i.kt)("h3",{id:"send-a-resource-request"},"Send a Resource Request"),(0,i.kt)("p",null,"You can use the same Resource Request as in the last section by running:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context $PLATFORM apply --filename resource-request.yaml\n")),(0,i.kt)("p",null,"You can once again see this request by listing all the request for elastic clouds using the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context $PLATFORM get elastic-cloud\n")),(0,i.kt)("p",null,"The above command will give an output similar to:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell-session"},"NAME      STATUS\nexample   Pending\n")),(0,i.kt)("p",null,"As an application engineer, you can see the Status as either ",(0,i.kt)("inlineCode",{parentName:"p"},"Pending")," meaning that the provisioning is not yet complete, or ",(0,i.kt)("inlineCode",{parentName:"p"},"Resource requested")," which indicates that the pipeline is complete. This is the basic status provided by Kratix, but you will be able to enhance this experience at a later step in this workshop."),(0,i.kt)("h3",{id:"verify-the-pipeline"},"Verify the pipeline"),(0,i.kt)("p",null,"As a platform engineer you can continue on to verify some of the processes behind the scenes. First of all, you can verify that the pipeline has been triggered by the creation of a Resource Request. To see the pod run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context $PLATFORM get pods --show-labels\n")),(0,i.kt)("p",null,"The output should look something like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell-session"},"NAME                                           READY   STATUS      RESTARTS   AGE     LABELS\nrequest-pipeline-elastic-cloud-default-33029   0/1     Completed   0          1m   kratix-promise-id=elastic-cloud-default...\n")),(0,i.kt)("p",null,"Within this pod there will be a number of containers including Kratix utility actions and the list of images you provided in the Promise."),(0,i.kt)("p",null,"To see the list of these containers in order of execution you can run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context $PLATFORM \\\n  get pods \\\n  --selector kratix-promise-id=elastic-cloud-default \\\n  --output jsonpath=\"{range .items[*].spec.initContainers[*]}{.name}{'\\n'}{end}{range .items[*].spec.containers[*]}{.name}{'\\n'}{end}\"\n")),(0,i.kt)("p",null,"Each container is listed in a row, in order that they occur so you should see:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell-session"},"reader\nxaas-request-pipeline-stage-0\nwork-writer\nstatus-writer\n")),(0,i.kt)("p",null,"While you only provided a single image, you can see that there are four listed. Each has a job as follows:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"reader")," makes sure that the Resource Request is available to the pipeline"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"xaas-request-pipeline-stage-*")," images are an ordered list from the provided containers in the Promise"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"work-writer")," schedules the files in the ",(0,i.kt)("inlineCode",{parentName:"li"},"output")," directory based on the labels provided"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"status-writer")," updates the Resource Request status")),(0,i.kt)("p",null,"The most interesting container for you will be the one you created, the ",(0,i.kt)("inlineCode",{parentName:"p"},"xaas-request-pipeline-stage-0")," container. To see the logs from this specific container you can run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context $PLATFORM logs \\\n  --selector kratix-promise-id=elastic-cloud-default \\\n  --container xaas-request-pipeline-stage-0\n")),(0,i.kt)("p",null,"The logs will look something like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell-session"},"Downloading Operator...\nGenerate ECK requests...\nwrote to-deploy/eck-stack/charts/eck-beats/templates/beats.yaml\nwrote to-deploy/eck-stack/charts/eck-elasticsearch/templates/elasticsearch.yaml\nwrote to-deploy/eck-stack/charts/eck-kibana/templates/kibana.yaml\n\nAdding namespaces to all helm output files...\nRemoving enterprise annotation...\nCopying files to /output...\nDone\n")),(0,i.kt)("h3",{id:"verify-the-worker"},"Verify the worker"),(0,i.kt)("p",null,"While it is useful to verify the container has run by viewing the logs, the outcome you most want to verify is the scheduling and creation of an ECK instance."),(0,i.kt)("p",null,"To see this you will need to check the worker cluster where the ECK server was scheduled. First you may want to verify that the operator is running:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context $WORKER get pods -n elastic-system\n")),(0,i.kt)("p",null,"With the following output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell-session"},"NAME                 READY   STATUS    RESTARTS   AGE\nelastic-operator-0   1/1     Running   0          1m\n")),(0,i.kt)("p",null,"With all the necessary CRDs installed:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context $WORKER get crds | grep elastic\n")),(0,i.kt)("p",null,"which will result in something like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell-session"},"agents.agent.k8s.elastic.co                            2023-01-01T12:00:00Z\napmservers.apm.k8s.elastic.co                          2023-01-01T12:00:00Z\nbeats.beat.k8s.elastic.co                              2023-01-01T12:00:00Z\nelasticmapsservers.maps.k8s.elastic.co                 2023-01-01T12:00:00Z\nelasticsearchautoscalers.autoscaling.k8s.elastic.co    2023-01-01T12:00:00Z\nelasticsearches.elasticsearch.k8s.elastic.co           2023-01-01T12:00:00Z\nenterprisesearches.enterprisesearch.k8s.elastic.co     2023-01-01T12:00:00Z\nkibanas.kibana.k8s.elastic.co                          2023-01-01T12:00:00Z\nlogstashes.logstash.k8s.elastic.co                     2023-01-01T12:00:00Z\nstackconfigpolicies.stackconfigpolicy.k8s.elastic.co   2023-01-01T12:00:00Z\n")),(0,i.kt)("p",null,"Finally, you will want to see the provisioned instance by running:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context $WORKER get pods --watch\n")),(0,i.kt)("p",null,"The above command will give an output similar to (it may take a while for the\npods to be ready):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell-session"},"NAME                                     READY   STATUS    RESTARTS   AGE\nexample-es-default-0                     1/1     Running   0          5m\nexample-beat-metricbeat-frpv7            1/1     Running   0          5m\nexample-eck-kibana-kb-6f4f95b787-4fqsr   1/1     Running   0          5m\n")),(0,i.kt)("p",null,"Once the Ready column reports ",(0,i.kt)("inlineCode",{parentName:"p"},"1/1"),", press ",(0,i.kt)("kbd",null,"Ctrl"),"+",(0,i.kt)("kbd",null,"C")," to\nexit the watch mode."),(0,i.kt)("h3",{id:"trying-to-request-a-second-instance"},"Trying to request a second instance"),(0,i.kt)("p",null,"The power of Kratix is the scalability of self-service, on-demand instances.\nTherefore, it is expected that any Promise will have more than one Resource Request made to it."),(0,i.kt)("p",null,"To see how the current Promise responds to a second request, you will need to\nmake a second request with the a new name:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cat resource-request.yaml | \\\n  sed 's/name: example/name: second-request/' | \\\n  kubectl --context $PLATFORM apply --filename -\n")),(0,i.kt)("p",null,"Once again, you can verify this request by listing elastic-clouds:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context $PLATFORM get elastic-clouds\n")),(0,i.kt)("p",null,"Which should now show a second instance in the list:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell-session"},"NAME             STATUS\nexample          Resource requested\nsecond-request   Resource requested\n")),(0,i.kt)("p",null,"You can also see that a second pipeline has run by checking the pods:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context $PLATFORM get pods\n")),(0,i.kt)("p",null,"However, when you go to check the status on the worker cluster, you will not see a second elastic cloud instance:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context $WORKER get pods\n")),(0,i.kt)("p",null,"This is because the GitOps reconciliation has failed due to a duplication of documents across the two requests. You can see this failure by running:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context $WORKER get kustomizations -n flux-system\n")),(0,i.kt)("p",null,"The above command will give an output similar to:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell-session"},"NAME                        AGE     READY   STATUS\nkratix-workload-crds        9m15s   False   kustomize build failed: accumulating resources: accumulation err='merging resources from './00-default-elastic-cloud-default-default-second-request-crds.yaml': may not add resource with an already registered id: CustomResourceDefinition.v1.apiextensions.k8s.io/agents.agent.k8s.elastic.co.[noNs]': must build at directory: '/tmp/kustomization-1131766306/default/worker-cluster-1/crds/00-default-elastic-cloud-default-default-second-request-crds.yaml': file is not directory\nkratix-workload-resources   9m15s   False   dependency 'flux-system/kratix-workload-crds' is not ready\n")),(0,i.kt)("p",null,"This is because the current Promise pipeline consists of both the instance specific resources, but also the shared dependencies like the ECK Operator. The next step in this workshop will showcase how to separate shared dependencies from instance specific provisioning."),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"And with that, you have transformed Elastic Cloud into an on-demand service!"),(0,i.kt)("p",null,"To recap the steps you took:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"\u2705","\xa0","\xa0","Codified the steps to provision an ECK instance"),(0,i.kt)("li",{parentName:"ol"},"\u2705","\xa0","\xa0","Packaged this script into a Docker container"),(0,i.kt)("li",{parentName:"ol"},"\u2705","\xa0","\xa0","Validated the containers behaviour with a reusable test script"),(0,i.kt)("li",{parentName:"ol"},"\u2705","\xa0","\xa0","Added the container to the Kratix Promise pipeline"),(0,i.kt)("li",{parentName:"ol"},"\u2705","\xa0","\xa0","Installed the Promise and validated the created instance"),(0,i.kt)("li",{parentName:"ol"},"\u2705","\xa0","\xa0","Explored the limitations of all logic living in the pipeline")),(0,i.kt)("h2",{id:"cleanup"},"Clean up environment"),(0,i.kt)(r.ZP,{mdxType:"PartialCleanup"}),(0,i.kt)("h2",{id:"--congratulations"},"\ud83c\udf89 ","\xa0"," Congratulations!"),(0,i.kt)("p",null,"\u2705","\xa0","\xa0","Your Promise can deliver on-demand services. ",(0,i.kt)("br",null),"\n\ud83d\udc49\ud83c\udffe","\xa0","\xa0","Next you will ",(0,i.kt)("a",{parentName:"p",href:"shared-dependencies"},"Extract shared dependencies"),"."))}h.isMDXComponent=!0}}]);