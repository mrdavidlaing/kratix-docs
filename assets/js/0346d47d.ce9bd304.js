"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[5481],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var n=a(7294);function s(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){s(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,s=function(e,t){if(null==e)return{};var a,n,s={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(s[a]=e[a]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var i=n.createContext({}),u=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=u(e.components);return n.createElement(i.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,s=e.mdxType,r=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=u(a),d=s,h=c["".concat(i,".").concat(d)]||c[d]||m[d]||r;return a?n.createElement(h,o(o({ref:t},p),{},{components:a})):n.createElement(h,o({ref:t},p))}));function h(e,t){var a=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=a.length,o=new Array(r);o[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[c]="string"==typeof e?e:s,o[1]=l;for(var u=2;u<r;u++)o[u]=a[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},1567:(e,t,a)=>{a.d(t,{ZP:()=>o});var n=a(7462),s=(a(7294),a(3905));const r={toc:[]};function o(e){let{components:t,...a}=e;return(0,s.kt)("wrapper",(0,n.Z)({},r,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Following the previous step of this tutorial, you should now\nhave a deployment of both Kratix and MinIO running on your Platform cluster\nwith no installed Promises."),(0,s.kt)("p",null,"You should also have two environment variables, ",(0,s.kt)("inlineCode",{parentName:"p"},"PLATFORM")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"WORKER"),"."),(0,s.kt)("details",null,(0,s.kt)("summary",null,"Verify the current state of your installation"),"Run:",(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context $PLATFORM get deployments --namespace kratix-platform-system\n")),(0,s.kt)("p",null,"The above command will give an output similar to:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell-session"},"NAME                                 READY   UP-TO-DATE   AVAILABLE   AGE\nkratix-platform-controller-manager   1/1     1            1           1h\nminio                                1/1     1            1           1h\n")),(0,s.kt)("p",null,"You should also have a State Store created and configured to point to the\n",(0,s.kt)("inlineCode",{parentName:"p"},"kratix")," bucket on MinIO. Verify the ",(0,s.kt)("inlineCode",{parentName:"p"},"bucketstatestores"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context $PLATFORM get bucketstatestores.platform.kratix.io\n")),(0,s.kt)("p",null,"The above command will give an output similar to:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell-session"},"NAME          AGE\nminio-store   1h\n")),(0,s.kt)("p",null,"Verify there are no existing Promises:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context $PLATFORM get promises\n")),(0,s.kt)("p",null,"Verify your cluster environment variables are set:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"env | grep 'PLATFORM\\|WORKER'\n")),(0,s.kt)("p",null,"which should result in:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell-session"},"WORKER=kind-worker\nPLATFORM=kind-platform\n"))),(0,s.kt)("p",null,"If you are are not continuing from the previous section, or your outputs do not align with the validation, please refer back to\n",(0,s.kt)("a",{parentName:"p",href:"installing-kratix"},"Installing Kratix"),"."))}o.isMDXComponent=!0},8477:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var n=a(7462),s=(a(7294),a(3905)),r=a(1567);const o={description:"Update the Resource Request status",title:"Update the Resource Request status",id:"update-status",slug:"../update-status"},l=void 0,i={unversionedId:"workshop/part-ii/update-status",id:"workshop/part-ii/update-status",title:"Update the Resource Request status",description:"Update the Resource Request status",source:"@site/docs/workshop/part-ii/05-update-status.md",sourceDirName:"workshop/part-ii",slug:"/workshop/update-status",permalink:"/docs/workshop/update-status",draft:!1,editUrl:"https://github.com/syntasso/kratix-docs/tree/main/docs/workshop/part-ii/05-update-status.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{description:"Update the Resource Request status",title:"Update the Resource Request status",id:"update-status",slug:"../update-status"},sidebar:"workshopSidebar",previous:{title:"Schedule Promises",permalink:"/docs/workshop/schedule-promise"},next:{title:"What's next?",permalink:"/docs/workshop/whats-next"}},u={},p=[{value:"Revisit pipeline metadata",id:"understand-metadata",level:2},{value:"The message field",id:"the-message-field",level:3},{value:"The conditions field",id:"the-conditions-field",level:3},{value:"Customise the Resource Request status",id:"customise-status",level:2},{value:"Request a resource and check its status",id:"rr-status",level:2},{value:"Prerequisite setup",id:"prerequisite-setup",level:3},{value:"Summary",id:"summary",level:2}],c={toc:p};function m(e){let{components:t,...a}=e;return(0,s.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"This is Part 2 of ",(0,s.kt)("a",{parentName:"p",href:"intro"},"a series")," illustrating how Kratix works. ",(0,s.kt)("br",null),"\n\ud83d\udc48\ud83c\udffe","\xa0","\xa0"," Previous: ",(0,s.kt)("a",{parentName:"p",href:"schedule-promise"},"Intentionally schedule Promise resources"),")",(0,s.kt)("br",null),"\n\ud83d\udc49\ud83c\udffe","\xa0","\xa0"," Next: ",(0,s.kt)("a",{parentName:"p",href:"whats-next"},"What's next")),(0,s.kt)("hr",null),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"In this tutorial, you will")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#understand-metadata"},"Revisit pipeline metadata")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#customise-status"},"Customise the Resource Request status")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#rr-status"},"Request a resource and check its status")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#summary"},"Summary"))),(0,s.kt)("h2",{id:"understand-metadata"},"Revisit pipeline metadata"),(0,s.kt)("p",null,"In the last section of this workshop you used the ",(0,s.kt)("inlineCode",{parentName:"p"},"/metadata/cluster-selectors.yaml")," file\nin the Promise pipeline to extend and further refine scheduling selectors."),(0,s.kt)("p",null,"Now it is time to use the ",(0,s.kt)("inlineCode",{parentName:"p"},"/metadata/status.yaml")," file to manage the information\nreturned to an Application Developer after then make a Resource Request."),(0,s.kt)("p",null,"This file must be a valid yaml document, but otherwise has very few limitations.\nAll of the information stored in this document will be set on the Resource Request\nin the status section."),(0,s.kt)("p",null,"The status field can hold a number of keys which can be programmatically seen when\ndescribing a Resource Request, or programmatically read for use in scripts or other\ntools."),(0,s.kt)("p",null,"There are two special keys when it comes to status in Kubernetes:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("inlineCode",{parentName:"li"},"message")),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("inlineCode",{parentName:"li"},"conditions"))),(0,s.kt)("h3",{id:"the-message-field"},"The message field"),(0,s.kt)("p",null,"The message field is used as the text visible when a user uses ",(0,s.kt)("inlineCode",{parentName:"p"},"kubectl get")," to list\na set of resources. The intention of this field is to be a snapshot of the state of the\nresource and to be human readable."),(0,s.kt)("p",null,"By default, Kratix will use this space to indicate pipeline completion. Starting by saying\na request is ",(0,s.kt)("inlineCode",{parentName:"p"},"pending")," and then later updating it to ",(0,s.kt)("inlineCode",{parentName:"p"},"Resource requested")," when the pipeline\nis complete."),(0,s.kt)("p",null,"You are welcome to overwrite this value with information that would be more helpful for your\nusers. For example you may want to provide a custom URL with something like ",(0,s.kt)("inlineCode",{parentName:"p"},"URL: https://custom.url.com"),"."),(0,s.kt)("h3",{id:"the-conditions-field"},"The conditions field"),(0,s.kt)("p",null,"When resources implement the conditions field Kubernetes provides the ability to take action\nbased on the status of that resource. For example, you can check wait for the health of a pod\nby running something like this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context $PLATFORM \\\n    wait pods \\\n    --namespace kratix-platform-system \\\n    --selector control-plane=controller-manager \\\n    --for condition=Ready \\\n    --timeout=90s\n")),(0,s.kt)("p",null,"Kratix supports this by default for all Resource Requests."),(0,s.kt)("h2",{id:"customise-status"},"Customise the Resource Request status"),(0,s.kt)("p",null,"At this point in the workshop you have built a repeatable process for updating the Promise\nand have also used the ",(0,s.kt)("inlineCode",{parentName:"p"},"/metadata")," directory already."),(0,s.kt)("p",null,"Therefore, this is a good chance for you to test your comfort with the process of\nextending the Promise."),(0,s.kt)("p",null,"You should take some time to try and do one of the following:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Update the message field to be more user friendly"),(0,s.kt)("li",{parentName:"ol"},"Extend the provided status to include more details")),(0,s.kt)("details",null,(0,s.kt)("summary",null,"\ud83e\udd14 Not sure how to get started?"),(0,s.kt)("p",null,"The goal for this is to create a file called ",(0,s.kt)("inlineCode",{parentName:"p"},"status.yaml")," and make sure it is saved\nto the ",(0,s.kt)("inlineCode",{parentName:"p"},"/metadata")," directory during the pipeline execution."),(0,s.kt)("p",null,"This can be done as simply as adding the following to the bottom of your current\n",(0,s.kt)("inlineCode",{parentName:"p"},"run")," script:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"cat <<EOF > /metadata/status.yaml\nmessage: a new message\nadditional-data:\n    provided-name: $name\nEOF\n"))),(0,s.kt)("h2",{id:"rr-status"},"Request a resource and check its status"),(0,s.kt)("h3",{id:"prerequisite-setup"},"Prerequisite setup"),(0,s.kt)(r.ZP,{mdxType:"PartialVerifyKratixWithOutPromises"}),(0,s.kt)("hr",null),(0,s.kt)("p",null,"Given this setup, you should now be able to follow the same installation\nsteps used in previous workshop steps."),(0,s.kt)("details",null,(0,s.kt)("summary",null,"\ud83e\udd14 Not sure how to install the Promise and make a request?"),(0,s.kt)("p",null,"Don't forget to get started with a build, load and test of the pipeline image:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"./scripts/test-pipeline\n")),(0,s.kt)("p",null,"Verify that the output shows only the following files:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell-session"},"\ud83d\udcc2 test\n\u251c\u2500\u2500 input\n\u2502   \u2514\u2500\u2500 object.yaml\n\u251c\u2500\u2500 metadata\n#highlight-next-line\n\u2502   \u2514\u2500\u2500 cluster-selectors.yaml\n\u2514\u2500\u2500 output\n    \u251c\u2500\u2500 beats.yaml\n    \u251c\u2500\u2500 elasticsearch.yaml\n    \u2514\u2500\u2500 kibana.yaml\n")),(0,s.kt)("p",null,"Next you can install the Promise before you can make a request:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context $PLATFORM create --filename promise.yaml\n")),(0,s.kt)("p",null,"Finally, you can act like an Application Developer and make a request for an instance of Elastic Cloud:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context $PLATFORM apply --filename resource-request.yaml\n"))),(0,s.kt)("p",null,"Once this Resource Request is made, you will be able to check its status which\nwill start as ",(0,s.kt)("inlineCode",{parentName:"p"},"pending")," as that is what Kratix sets before the pipeline runs,\nbut once the pipeline has complete you should see your additional fields."),(0,s.kt)("details",null,(0,s.kt)("summary",null,"\ud83e\udd14 Not sure how to check the status?"),(0,s.kt)("p",null,"You can check the status by describing the requested ECK instance."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context $PLATFORM describe elastic-clouds\n"))),(0,s.kt)("h2",{id:"summary"},"Summary"),(0,s.kt)("p",null,"And with that, you have successfully made a Promise improvement on your own. This\nimprovement has introduced how you as the Promise author can provide useful details\nto the Application Developers who will be your platform users."),(0,s.kt)("p",null,"To recap what you achieved:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"\u2705","\xa0","\xa0"," Use metadata to set a custom Resource Request status"),(0,s.kt)("li",{parentName:"ol"},"\u2705","\xa0","\xa0"," Use the convenience scripts from this workshop to iterate on the Promise")),(0,s.kt)("p",null,"\u2705","\xa0","\xa0","This tutorial concludes an Introduction to writing a Promise. ",(0,s.kt)("br",null),"\n\ud83d\udc49\ud83c\udffe","\xa0","\xa0","You can go check ",(0,s.kt)("a",{parentName:"p",href:"whats-next"},"what's next")," to learn about\nwhat else you can achieve with Kratix."))}m.isMDXComponent=!0}}]);