"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[329],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return n?i.createElement(f,a(a({ref:t},p),{},{components:n})):i.createElement(f,a({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,a[1]=l;for(var c=2;c<o;c++)a[c]=n[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3100:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var i=n(7462),r=(n(7294),n(3905));const o={description:"Documentation for writing Promise Workflows using Kratix Pipelines, covering how Kratix internally executes the Pipeline containers",title:"Resource Workflows",sidebar_label:"Workflows"},a="Workflows",l={unversionedId:"main/reference/resources/workflows",id:"main/reference/resources/workflows",title:"Resource Workflows",description:"Documentation for writing Promise Workflows using Kratix Pipelines, covering how Kratix internally executes the Pipeline containers",source:"@site/docs/main/05-reference/05-resources/02-workflows.md",sourceDirName:"main/05-reference/05-resources",slug:"/main/reference/resources/workflows",permalink:"/docs/main/reference/resources/workflows",draft:!1,editUrl:"https://github.com/syntasso/kratix-docs/tree/main/docs/main/05-reference/05-resources/02-workflows.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{description:"Documentation for writing Promise Workflows using Kratix Pipelines, covering how Kratix internally executes the Pipeline containers",title:"Resource Workflows",sidebar_label:"Workflows"},sidebar:"mainSidebar",previous:{title:"Introduction",permalink:"/docs/main/reference/resources/intro"},next:{title:"Deleting",permalink:"/docs/main/reference/resources/delete"}},s={},c=[{value:"Kratix Pipelines",id:"kratix-pipelines",level:2},{value:"<code>/kratix/input</code>",id:"kratixinput",level:3},{value:"<code>/kratix/output</code>",id:"kratixoutput",level:3},{value:"<code>/kratix/metadata</code> (<code>configure</code> only)",id:"kratixmetadata-configure-only",level:3},{value:"Running Workflows",id:"running-workflows",level:2},{value:"Workflow conventions",id:"workflow-conventions",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"workflows"},"Workflows"),(0,r.kt)("p",null,"A ",(0,r.kt)("a",{parentName:"p",href:"../promises/intro"},"Kratix Promise")," is configured with a series of Workflows\ndefined in the Promise's ",(0,r.kt)("inlineCode",{parentName:"p"},"workflows")," key. Within the Workflows, Promise writers\ncan trigger a series of actions (pipelines) that must be executed when certain\nconditions are met in the system. The ",(0,r.kt)("inlineCode",{parentName:"p"},"workflows")," is defined as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"platform: platform.kratix.io/v1alpha1\nkind: Promise\nmetadata:\n  # ...\nspec:\n  # ...\n  workflows:\n    # lifecycle hook for Resources\n    resource:\n      # lifecycle hook for creates/updates/ongoing reconciliation of Resources\n      configure:\n        -  # Pipeline definition\n      # lifecycle hook for deletion of Resources\n      delete:\n        -  # Pipeline definition\n")),(0,r.kt)("p",null,"To define a Workflow, promise writers can use any technology they want (i.e.\nTekton, plain Pods, etc). Kratix provide a basic ",(0,r.kt)("inlineCode",{parentName:"p"},"kind")," to make the process of writing Workflows simpler."),(0,r.kt)("h2",{id:"kratix-pipelines"},"Kratix Pipelines"),(0,r.kt)("p",null,"Kratix ",(0,r.kt)("inlineCode",{parentName:"p"},"Pipeline")," is defined as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: platform.kratix.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: # name\nspec:\n  containers:\n    - name: # container name\n      image: # container image\n    -  # ...\n")),(0,r.kt)("p",null,"Kratix will run each container in the ",(0,r.kt)("inlineCode",{parentName:"p"},"spec.containers")," list in order, providing\na set of common volumes. The behaviour of these volumes differ slightly for\n",(0,r.kt)("inlineCode",{parentName:"p"},"configure")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"delete")," (see blow). In order to allow re-use of the same image\nin both ",(0,r.kt)("inlineCode",{parentName:"p"},"configure")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"delete")," Kratix sets the ",(0,r.kt)("inlineCode",{parentName:"p"},"KRATIX_OPERATION")," environment\nvariable to ",(0,r.kt)("inlineCode",{parentName:"p"},"configure"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"delete")," depending on what context the image is being\ncalled in. Additionally Kratix also sets the ",(0,r.kt)("inlineCode",{parentName:"p"},"KRATIX_TYPE")," environment variable\nto ",(0,r.kt)("inlineCode",{parentName:"p"},"resource"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"promise")," depending on what context the image is being called in."),(0,r.kt)("h3",{id:"kratixinput"},(0,r.kt)("inlineCode",{parentName:"h3"},"/kratix/input")),(0,r.kt)("p",null,"This directory is pre-populated with files that are provided by Kratix or the\nprevious container. The first container will have access to an\n",(0,r.kt)("inlineCode",{parentName:"p"},"object.yaml")," file containing the Resource definition submitted to the platform. All\ncontainers will have access to this file at the ",(0,r.kt)("inlineCode",{parentName:"p"},"/kratix/input")," directory."),(0,r.kt)("h3",{id:"kratixoutput"},(0,r.kt)("inlineCode",{parentName:"h3"},"/kratix/output")),(0,r.kt)("p",null,"This directory is an empty directory provided to the container for writing files\nfor future use."),(0,r.kt)("p",null,"All containers in the pipeline will have access to the ",(0,r.kt)("inlineCode",{parentName:"p"},"/kratix/output")," directory. Any\ndocuments on this directory by the end of the pipeline will be scheduled to a Worker\nCluster. Any container on the list may add, update, or remove documents from this directory."),(0,r.kt)("p",null,"In the ",(0,r.kt)("inlineCode",{parentName:"p"},"configure")," pipeline all files present in ",(0,r.kt)("inlineCode",{parentName:"p"},"/kratix/output")," directory of the\nfinal container will be written to your GitOps repository. In the ",(0,r.kt)("inlineCode",{parentName:"p"},"delete"),"\npipeline no action occurs in the final container as nothing should be scheduled\nas part of ",(0,r.kt)("inlineCode",{parentName:"p"},"delete")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"At this time, all files must be written to the root directory of ",(0,r.kt)("inlineCode",{parentName:"p"},"/kratix/output")," (i.e.\nthere should not be any subdirectories within ",(0,r.kt)("inlineCode",{parentName:"p"},"/kratix/output"),"), and every file must\ncontain only valid Kubernetes documents that can be applied to a cluster. Each\ndocument will be scheduled per the ",(0,r.kt)("a",{parentName:"p",href:"../multicluster-management"},"scheduling docs"),"."),(0,r.kt)("p",{parentName:"admonition"},"This is actively being prioritised so should you require this feature please ",(0,r.kt)("a",{parentName:"p",href:"/docs/main/community"},"reach out"))),(0,r.kt)("h3",{id:"kratixmetadata-configure-only"},(0,r.kt)("inlineCode",{parentName:"h3"},"/kratix/metadata")," (",(0,r.kt)("inlineCode",{parentName:"h3"},"configure")," only)"),(0,r.kt)("p",null,"All containers in the ",(0,r.kt)("inlineCode",{parentName:"p"},"configure")," Pipeline have access to this directory."),(0,r.kt)("p",null,"Pipeline containers can control aspects of how Kratix behaves by creating special files in this directory:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"destination-selectors.yaml")," can be added to any Promise to\nfurther refine where the resources in ",(0,r.kt)("inlineCode",{parentName:"li"},"/kratix/output")," will be\n",(0,r.kt)("a",{parentName:"li",href:"/docs/main/reference/multicluster-management#pipeline"},"scheduled"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"status.yaml")," allows the Pipeline to communicate information about the\nResource back to the requester. See ",(0,r.kt)("a",{parentName:"li",href:"/docs/main/reference/resources/status"},"status documentation\nfor more information"),".")),(0,r.kt)("br",null),(0,r.kt)("p",null,"Kratix scans for these files and ignores all other files in the ",(0,r.kt)("inlineCode",{parentName:"p"},"/kratix/metadata"),"\ndirectory."),(0,r.kt)("h2",{id:"running-workflows"},"Running Workflows"),(0,r.kt)("p",null,"The Workflows are regularly executed on each Resource. Kubernetes reconciles on a number of different actions including, but not\nlimited to:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"On the creation of a new Resource"),(0,r.kt)("li",{parentName:"ul"},"Regular interval (default: 10 hours, not currently configurable)"),(0,r.kt)("li",{parentName:"ul"},"Recreating or restarting the Kratix Controller"),(0,r.kt)("li",{parentName:"ul"},"A change to the Resource definition")),(0,r.kt)("br",null),"All commands should be idempotent as there is a guarantee that they will be run multiple times a day, and may be run much more frequently depending on other environmental impacts like pod restarts.",(0,r.kt)("h2",{id:"workflow-conventions"},"Workflow conventions"),(0,r.kt)("p",null,"For conventions on how to do things like pass secrets into the Pipeline checkout\n",(0,r.kt)("a",{parentName:"p",href:"../workflows"},"the documentation"),"."))}u.isMDXComponent=!0}}]);